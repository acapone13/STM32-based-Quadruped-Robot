
Spider.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800c5f8  0800c5f8  0001c5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccd8  0800ccd8  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800ccd8  0800ccd8  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ccd8  0800ccd8  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccd8  0800ccd8  0001ccd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccdc  0800ccdc  0001ccdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800cce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000210  0800cef0  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800cef0  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015da1  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d56  00000000  00000000  00035fda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c0  00000000  00000000  00038d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f90  00000000  00000000  00039df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b019  00000000  00000000  0003ad80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101fe  00000000  00000000  00055d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090789  00000000  00000000  00065f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f6720  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000567c  00000000  00000000  000f679c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c5e0 	.word	0x0800c5e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	0800c5e0 	.word	0x0800c5e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <MX_DMA_Init+0x48>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <MX_DMA_Init+0x48>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6153      	str	r3, [r2, #20]
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <MX_DMA_Init+0x48>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	200e      	movs	r0, #14
 80011c0:	f003 f875 	bl	80042ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80011c4:	200e      	movs	r0, #14
 80011c6:	f003 f88e 	bl	80042e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	200f      	movs	r0, #15
 80011d0:	f003 f86d 	bl	80042ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80011d4:	200f      	movs	r0, #15
 80011d6:	f003 f886 	bl	80042e6 <HAL_NVIC_EnableIRQ>

}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000

080011e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fc:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <MX_GPIO_Init+0xd0>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a2d      	ldr	r2, [pc, #180]	; (80012b8 <MX_GPIO_Init+0xd0>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <MX_GPIO_Init+0xd0>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001214:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <MX_GPIO_Init+0xd0>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <MX_GPIO_Init+0xd0>)
 800121a:	f043 0320 	orr.w	r3, r3, #32
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <MX_GPIO_Init+0xd0>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <MX_GPIO_Init+0xd0>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a21      	ldr	r2, [pc, #132]	; (80012b8 <MX_GPIO_Init+0xd0>)
 8001232:	f043 0308 	orr.w	r3, r3, #8
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <MX_GPIO_Init+0xd0>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <MX_GPIO_Init+0xd0>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <MX_GPIO_Init+0xd0>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_GPIO_Init+0xd0>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(START_LED_GPIO_Port, START_LED_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001262:	4816      	ldr	r0, [pc, #88]	; (80012bc <MX_GPIO_Init+0xd4>)
 8001264:	f003 fc18 	bl	8004a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = START_LED_Pin;
 8001268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800126c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	2301      	movs	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001272:	2302      	movs	r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2302      	movs	r3, #2
 8001278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(START_LED_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	4619      	mov	r1, r3
 8001280:	480e      	ldr	r0, [pc, #56]	; (80012bc <MX_GPIO_Init+0xd4>)
 8001282:	f003 faaf 	bl	80047e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STOP_BUTTON_Pin;
 8001286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_GPIO_Init+0xd8>)
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STOP_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	4619      	mov	r1, r3
 800129a:	480a      	ldr	r0, [pc, #40]	; (80012c4 <MX_GPIO_Init+0xdc>)
 800129c:	f003 faa2 	bl	80047e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2028      	movs	r0, #40	; 0x28
 80012a6:	f003 f802 	bl	80042ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012aa:	2028      	movs	r0, #40	; 0x28
 80012ac:	f003 f81b 	bl	80042e6 <HAL_NVIC_EnableIRQ>

}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40011000 	.word	0x40011000
 80012c0:	10110000 	.word	0x10110000
 80012c4:	40010c00 	.word	0x40010c00

080012c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_I2C1_Init+0x50>)
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <MX_I2C1_Init+0x54>)
 80012d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_I2C1_Init+0x50>)
 80012d4:	4a12      	ldr	r2, [pc, #72]	; (8001320 <MX_I2C1_Init+0x58>)
 80012d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_I2C1_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_I2C1_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_I2C1_Init+0x50>)
 80012e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MX_I2C1_Init+0x50>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_I2C1_Init+0x50>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_I2C1_Init+0x50>)
 8001306:	f003 fc11 	bl	8004b2c <HAL_I2C_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001310:	f000 fc12 	bl	8001b38 <Error_Handler>
  }

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000024c 	.word	0x2000024c
 800131c:	40005400 	.word	0x40005400
 8001320:	000186a0 	.word	0x000186a0

08001324 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a15      	ldr	r2, [pc, #84]	; (8001394 <HAL_I2C_MspInit+0x70>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d123      	bne.n	800138c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_I2C_MspInit+0x74>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a13      	ldr	r2, [pc, #76]	; (8001398 <HAL_I2C_MspInit+0x74>)
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_I2C_MspInit+0x74>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800135c:	23c0      	movs	r3, #192	; 0xc0
 800135e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001360:	2312      	movs	r3, #18
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	4619      	mov	r1, r3
 800136e:	480b      	ldr	r0, [pc, #44]	; (800139c <HAL_I2C_MspInit+0x78>)
 8001370:	f003 fa38 	bl	80047e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_I2C_MspInit+0x74>)
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_I2C_MspInit+0x74>)
 800137a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137e:	61d3      	str	r3, [r2, #28]
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_I2C_MspInit+0x74>)
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800138c:	bf00      	nop
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40005400 	.word	0x40005400
 8001398:	40021000 	.word	0x40021000
 800139c:	40010c00 	.word	0x40010c00

080013a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a0:	b5b0      	push	{r4, r5, r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	REF = NoRef;
 80013a4:	4b42      	ldr	r3, [pc, #264]	; (80014b0 <main+0x110>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
	state = STILL;
 80013aa:	4b42      	ldr	r3, [pc, #264]	; (80014b4 <main+0x114>)
 80013ac:	220b      	movs	r2, #11
 80013ae:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b0:	f002 fe22 	bl	8003ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b4:	f000 f890 	bl	80014d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b8:	f7ff ff16 	bl	80011e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80013bc:	f7ff feee 	bl	800119c <MX_DMA_Init>
  MX_I2C1_Init();
 80013c0:	f7ff ff82 	bl	80012c8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80013c4:	f002 fd28 	bl	8003e18 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80013c8:	f002 fbf0 	bl	8003bac <MX_TIM2_Init>
  MX_TIM3_Init();
 80013cc:	f002 fc62 	bl	8003c94 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80013d0:	f000 f8c7 	bl	8001562 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
//  UARTDMA_Init(&huartdma, &huart1);
  PCA9685_Init(&hi2c1);
 80013d4:	4838      	ldr	r0, [pc, #224]	; (80014b8 <main+0x118>)
 80013d6:	f000 fda7 	bl	8001f28 <PCA9685_Init>

  sprintf(USART_TxStream, "SPIDER ROBOT v1.2\n\r");
 80013da:	4a38      	ldr	r2, [pc, #224]	; (80014bc <main+0x11c>)
 80013dc:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <main+0x120>)
 80013de:	4615      	mov	r5, r2
 80013e0:	461c      	mov	r4, r3
 80013e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e4:	6028      	str	r0, [r5, #0]
 80013e6:	6069      	str	r1, [r5, #4]
 80013e8:	60aa      	str	r2, [r5, #8]
 80013ea:	60eb      	str	r3, [r5, #12]
 80013ec:	6820      	ldr	r0, [r4, #0]
 80013ee:	6128      	str	r0, [r5, #16]

//  HAL_UART_Transmit(&huart1, (uint8_t*) USART_TxStream, (sizeof(USART_TxStream)-1), 100);
  HAL_UART_Transmit_DMA(&huart1, (uint8_t*) USART_TxStream, (uint16_t)(sizeof(USART_TxStream)-1));
 80013f0:	2227      	movs	r2, #39	; 0x27
 80013f2:	4932      	ldr	r1, [pc, #200]	; (80014bc <main+0x11c>)
 80013f4:	4833      	ldr	r0, [pc, #204]	; (80014c4 <main+0x124>)
 80013f6:	f006 fab5 	bl	8007964 <HAL_UART_Transmit_DMA>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80013fa:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <main+0x124>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <main+0x124>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 0210 	orr.w	r2, r2, #16
 8001408:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1, USART_RxStream, RX_BFR_SIZE);
 800140a:	220a      	movs	r2, #10
 800140c:	492e      	ldr	r1, [pc, #184]	; (80014c8 <main+0x128>)
 800140e:	482d      	ldr	r0, [pc, #180]	; (80014c4 <main+0x124>)
 8001410:	f006 fb14 	bl	8007a3c <HAL_UART_Receive_DMA>

  // Start Timer 2 andTimer3
  HAL_TIM_Base_Start_IT(&htim2);
 8001414:	482d      	ldr	r0, [pc, #180]	; (80014cc <main+0x12c>)
 8001416:	f005 fc81 	bl	8006d1c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800141a:	482d      	ldr	r0, [pc, #180]	; (80014d0 <main+0x130>)
 800141c:	f005 fc7e 	bl	8006d1c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (REF == Ref)
 8001420:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <main+0x110>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d136      	bne.n	8001496 <main+0xf6>
	  {
		  switch (state)
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <main+0x114>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	3b01      	subs	r3, #1
 800142e:	2b09      	cmp	r3, #9
 8001430:	d83b      	bhi.n	80014aa <main+0x10a>
 8001432:	a201      	add	r2, pc, #4	; (adr r2, 8001438 <main+0x98>)
 8001434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001438:	08001461 	.word	0x08001461
 800143c:	08001467 	.word	0x08001467
 8001440:	08001473 	.word	0x08001473
 8001444:	0800146d 	.word	0x0800146d
 8001448:	08001479 	.word	0x08001479
 800144c:	0800147f 	.word	0x0800147f
 8001450:	080014ab 	.word	0x080014ab
 8001454:	080014ab 	.word	0x080014ab
 8001458:	08001485 	.word	0x08001485
 800145c:	0800148b 	.word	0x0800148b
		  {
		  case WALKING_FORWARD:
			  forward_walk();
 8001460:	f001 fb40 	bl	8002ae4 <forward_walk>
			  break;
 8001464:	e022      	b.n	80014ac <main+0x10c>
		  case WALKING_BACKWARD:
			  backward_walk();
 8001466:	f001 fc0d 	bl	8002c84 <backward_walk>
			  break;
 800146a:	e01f      	b.n	80014ac <main+0x10c>
		  case WALKING_RIGHT:
			  right_walk();
 800146c:	f001 feec 	bl	8003248 <right_walk>
			  break;
 8001470:	e01c      	b.n	80014ac <main+0x10c>
		  case WALKING_LEFT:
			  left_walk();
 8001472:	f001 fef7 	bl	8003264 <left_walk>
			  break;
 8001476:	e019      	b.n	80014ac <main+0x10c>
		  case TURNING_RIGHT:
			  turn_right();
 8001478:	f001 fdb8 	bl	8002fec <turn_right>
			  break;
 800147c:	e016      	b.n	80014ac <main+0x10c>
		  case TURNING_LEFT:
			  turn_left();
 800147e:	f001 fcd1 	bl	8002e24 <turn_left>
			  break;
 8001482:	e013      	b.n	80014ac <main+0x10c>
		  case SIT:
			  sit();
 8001484:	f001 fe9c 	bl	80031c0 <sit>
			  break;
 8001488:	e010      	b.n	80014ac <main+0x10c>
		  case STAND:
			  stand();
 800148a:	f001 febb 	bl	8003204 <stand>
			  REF = NoRef;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <main+0x110>)
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
			  break;
 8001494:	e00a      	b.n	80014ac <main+0x10c>
		  }
	  }
	  else
	  {
		  // Force Homing
		  homing(refPos);
 8001496:	480f      	ldr	r0, [pc, #60]	; (80014d4 <main+0x134>)
 8001498:	f000 fd66 	bl	8001f68 <homing>
		  state = HOME;
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <main+0x114>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
		  REF = Ref;
 80014a2:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <main+0x110>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e7ba      	b.n	8001420 <main+0x80>
			  break;
 80014aa:	bf00      	nop
	  if (REF == Ref)
 80014ac:	e7b8      	b.n	8001420 <main+0x80>
 80014ae:	bf00      	nop
 80014b0:	200002e8 	.word	0x200002e8
 80014b4:	20000314 	.word	0x20000314
 80014b8:	2000024c 	.word	0x2000024c
 80014bc:	20000354 	.word	0x20000354
 80014c0:	0800c5f8 	.word	0x0800c5f8
 80014c4:	20000498 	.word	0x20000498
 80014c8:	20000318 	.word	0x20000318
 80014cc:	200003c8 	.word	0x200003c8
 80014d0:	20000380 	.word	0x20000380
 80014d4:	20000000 	.word	0x20000000

080014d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b090      	sub	sp, #64	; 0x40
 80014dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014de:	f107 0318 	add.w	r3, r7, #24
 80014e2:	2228      	movs	r2, #40	; 0x28
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f006 ff03 	bl	80082f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fa:	2301      	movs	r3, #1
 80014fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001502:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001508:	2301      	movs	r3, #1
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150c:	2302      	movs	r3, #2
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001514:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001516:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800151a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151c:	f107 0318 	add.w	r3, r7, #24
 8001520:	4618      	mov	r0, r3
 8001522:	f004 ff8f 	bl	8006444 <HAL_RCC_OscConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800152c:	f000 fb04 	bl	8001b38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001530:	230f      	movs	r3, #15
 8001532:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001534:	2302      	movs	r3, #2
 8001536:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800153c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2101      	movs	r1, #1
 800154a:	4618      	mov	r0, r3
 800154c:	f005 f9fa 	bl	8006944 <HAL_RCC_ClockConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001556:	f000 faef 	bl	8001b38 <Error_Handler>
  }
}
 800155a:	bf00      	nop
 800155c:	3740      	adds	r7, #64	; 0x40
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	2025      	movs	r0, #37	; 0x25
 800156c:	f002 fe9f 	bl	80042ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001570:	2025      	movs	r0, #37	; 0x25
 8001572:	f002 feb8 	bl	80042e6 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2020      	movs	r0, #32
 800157c:	f002 fe97 	bl	80042ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001580:	2020      	movs	r0, #32
 8001582:	f002 feb0 	bl	80042e6 <HAL_NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <getState>:

/* USER CODE BEGIN 4 */
//	Utility Functions
void getState(spiderState currState)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b0fa      	sub	sp, #488	; 0x1e8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4602      	mov	r2, r0
 8001594:	1dfb      	adds	r3, r7, #7
 8001596:	701a      	strb	r2, [r3, #0]
	const char sTable[][MAX_STRLEN] = {
 8001598:	f107 0308 	add.w	r3, r7, #8
 800159c:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <getState+0x5c>)
 800159e:	4618      	mov	r0, r3
 80015a0:	4611      	mov	r1, r2
 80015a2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80015a6:	461a      	mov	r2, r3
 80015a8:	f006 fe98 	bl	80082dc <memcpy>
			"MOVING_JOINT",
			"SIT",
			"STAND",
			"STILL"
	};
	memset(&USART_TxStream[0], 0, sizeof(USART_TxStream));
 80015ac:	2228      	movs	r2, #40	; 0x28
 80015ae:	2100      	movs	r1, #0
 80015b0:	480e      	ldr	r0, [pc, #56]	; (80015ec <getState+0x60>)
 80015b2:	f006 fe9e 	bl	80082f2 <memset>
	sprintf(USART_TxStream, "Current State: %s\n\r", sTable[currState]);
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781a      	ldrb	r2, [r3, #0]
 80015ba:	f107 0108 	add.w	r1, r7, #8
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	440b      	add	r3, r1
 80015c8:	461a      	mov	r2, r3
 80015ca:	4909      	ldr	r1, [pc, #36]	; (80015f0 <getState+0x64>)
 80015cc:	4807      	ldr	r0, [pc, #28]	; (80015ec <getState+0x60>)
 80015ce:	f007 fae7 	bl	8008ba0 <siprintf>
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*) USART_TxStream, (uint16_t)(sizeof(USART_TxStream)-1));
 80015d2:	2227      	movs	r2, #39	; 0x27
 80015d4:	4905      	ldr	r1, [pc, #20]	; (80015ec <getState+0x60>)
 80015d6:	4807      	ldr	r0, [pc, #28]	; (80015f4 <getState+0x68>)
 80015d8:	f006 f9c4 	bl	8007964 <HAL_UART_Transmit_DMA>
}
 80015dc:	bf00      	nop
 80015de:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	0800c620 	.word	0x0800c620
 80015ec:	20000354 	.word	0x20000354
 80015f0:	0800c60c 	.word	0x0800c60c
 80015f4:	20000498 	.word	0x20000498

080015f8 <InterpretCmd>:

//	Command Interpretation function
void InterpretCmd()
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
	uint8_t value8 = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	71fb      	strb	r3, [r7, #7]
	uint16_t value16 = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	80bb      	strh	r3, [r7, #4]

	switch (command[0])
 8001606:	4ba6      	ldr	r3, [pc, #664]	; (80018a0 <InterpretCmd+0x2a8>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	3b21      	subs	r3, #33	; 0x21
 800160c:	2b36      	cmp	r3, #54	; 0x36
 800160e:	f200 813f 	bhi.w	8001890 <InterpretCmd+0x298>
 8001612:	a201      	add	r2, pc, #4	; (adr r2, 8001618 <InterpretCmd+0x20>)
 8001614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001618:	08001885 	.word	0x08001885
 800161c:	08001891 	.word	0x08001891
 8001620:	08001891 	.word	0x08001891
 8001624:	08001891 	.word	0x08001891
 8001628:	08001891 	.word	0x08001891
 800162c:	08001891 	.word	0x08001891
 8001630:	08001891 	.word	0x08001891
 8001634:	08001891 	.word	0x08001891
 8001638:	08001891 	.word	0x08001891
 800163c:	08001891 	.word	0x08001891
 8001640:	08001891 	.word	0x08001891
 8001644:	08001891 	.word	0x08001891
 8001648:	08001891 	.word	0x08001891
 800164c:	08001891 	.word	0x08001891
 8001650:	08001891 	.word	0x08001891
 8001654:	08001891 	.word	0x08001891
 8001658:	08001891 	.word	0x08001891
 800165c:	08001891 	.word	0x08001891
 8001660:	08001891 	.word	0x08001891
 8001664:	08001891 	.word	0x08001891
 8001668:	08001891 	.word	0x08001891
 800166c:	08001891 	.word	0x08001891
 8001670:	08001891 	.word	0x08001891
 8001674:	08001891 	.word	0x08001891
 8001678:	08001891 	.word	0x08001891
 800167c:	08001891 	.word	0x08001891
 8001680:	08001891 	.word	0x08001891
 8001684:	08001891 	.word	0x08001891
 8001688:	08001891 	.word	0x08001891
 800168c:	08001891 	.word	0x08001891
 8001690:	0800187f 	.word	0x0800187f
 8001694:	08001891 	.word	0x08001891
 8001698:	08001891 	.word	0x08001891
 800169c:	08001891 	.word	0x08001891
 80016a0:	08001891 	.word	0x08001891
 80016a4:	08001891 	.word	0x08001891
 80016a8:	08001891 	.word	0x08001891
 80016ac:	08001891 	.word	0x08001891
 80016b0:	08001891 	.word	0x08001891
 80016b4:	0800179b 	.word	0x0800179b
 80016b8:	08001891 	.word	0x08001891
 80016bc:	08001891 	.word	0x08001891
 80016c0:	08001891 	.word	0x08001891
 80016c4:	08001839 	.word	0x08001839
 80016c8:	08001891 	.word	0x08001891
 80016cc:	08001891 	.word	0x08001891
 80016d0:	08001891 	.word	0x08001891
 80016d4:	08001891 	.word	0x08001891
 80016d8:	08001891 	.word	0x08001891
 80016dc:	08001891 	.word	0x08001891
 80016e0:	080017bf 	.word	0x080017bf
 80016e4:	08001775 	.word	0x08001775
 80016e8:	08001891 	.word	0x08001891
 80016ec:	08001891 	.word	0x08001891
 80016f0:	080016f5 	.word	0x080016f5
		case 'W':
			//	Walk Mode
			//	Initialize timer 2 to stop movement after a period of 5s.
//			HAL_TIM_Base_Start_IT(&htim2);
//			htim2.Instance->CNT = 0;
			resetTimer(&htim2);
 80016f4:	486b      	ldr	r0, [pc, #428]	; (80018a4 <InterpretCmd+0x2ac>)
 80016f6:	f002 fb81 	bl	8003dfc <resetTimer>
			switch (command[1])
 80016fa:	4b69      	ldr	r3, [pc, #420]	; (80018a0 <InterpretCmd+0x2a8>)
 80016fc:	785b      	ldrb	r3, [r3, #1]
 80016fe:	3b42      	subs	r3, #66	; 0x42
 8001700:	2b10      	cmp	r3, #16
 8001702:	d835      	bhi.n	8001770 <InterpretCmd+0x178>
 8001704:	a201      	add	r2, pc, #4	; (adr r2, 800170c <InterpretCmd+0x114>)
 8001706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170a:	bf00      	nop
 800170c:	08001759 	.word	0x08001759
 8001710:	08001771 	.word	0x08001771
 8001714:	08001771 	.word	0x08001771
 8001718:	08001771 	.word	0x08001771
 800171c:	08001751 	.word	0x08001751
 8001720:	08001771 	.word	0x08001771
 8001724:	08001771 	.word	0x08001771
 8001728:	08001771 	.word	0x08001771
 800172c:	08001771 	.word	0x08001771
 8001730:	08001771 	.word	0x08001771
 8001734:	08001769 	.word	0x08001769
 8001738:	08001771 	.word	0x08001771
 800173c:	08001771 	.word	0x08001771
 8001740:	08001771 	.word	0x08001771
 8001744:	08001771 	.word	0x08001771
 8001748:	08001771 	.word	0x08001771
 800174c:	08001761 	.word	0x08001761
			{
				case 'F':
					//	Move Forwards
					state = WALKING_FORWARD;
 8001750:	4b55      	ldr	r3, [pc, #340]	; (80018a8 <InterpretCmd+0x2b0>)
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
					//	Complete
					break;
 8001756:	e00c      	b.n	8001772 <InterpretCmd+0x17a>
				case 'B':
					//	Move Bacjwards
					state = WALKING_BACKWARD;
 8001758:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <InterpretCmd+0x2b0>)
 800175a:	2202      	movs	r2, #2
 800175c:	701a      	strb	r2, [r3, #0]
					//	Complete
					break;
 800175e:	e008      	b.n	8001772 <InterpretCmd+0x17a>
				case 'R':
					//	Move Right
					state = WALKING_RIGHT;
 8001760:	4b51      	ldr	r3, [pc, #324]	; (80018a8 <InterpretCmd+0x2b0>)
 8001762:	2204      	movs	r2, #4
 8001764:	701a      	strb	r2, [r3, #0]
					//	Complete
					break;
 8001766:	e004      	b.n	8001772 <InterpretCmd+0x17a>
				case 'L':
					//	Move Left
					state = WALKING_LEFT;
 8001768:	4b4f      	ldr	r3, [pc, #316]	; (80018a8 <InterpretCmd+0x2b0>)
 800176a:	2203      	movs	r2, #3
 800176c:	701a      	strb	r2, [r3, #0]
					//	Complete
					break;
 800176e:	e000      	b.n	8001772 <InterpretCmd+0x17a>
				default:
					break;
 8001770:	bf00      	nop
			}
			break;
 8001772:	e090      	b.n	8001896 <InterpretCmd+0x29e>
		case 'T':
			resetTimer(&htim2);
 8001774:	484b      	ldr	r0, [pc, #300]	; (80018a4 <InterpretCmd+0x2ac>)
 8001776:	f002 fb41 	bl	8003dfc <resetTimer>
			switch (command[1])
 800177a:	4b49      	ldr	r3, [pc, #292]	; (80018a0 <InterpretCmd+0x2a8>)
 800177c:	785b      	ldrb	r3, [r3, #1]
 800177e:	2b4c      	cmp	r3, #76	; 0x4c
 8001780:	d006      	beq.n	8001790 <InterpretCmd+0x198>
 8001782:	2b52      	cmp	r3, #82	; 0x52
 8001784:	d000      	beq.n	8001788 <InterpretCmd+0x190>
					//	Turn Left
					state = TURNING_LEFT;
					//	Complete
					break;
				default:
					break;
 8001786:	e007      	b.n	8001798 <InterpretCmd+0x1a0>
					state = TURNING_RIGHT;
 8001788:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <InterpretCmd+0x2b0>)
 800178a:	2205      	movs	r2, #5
 800178c:	701a      	strb	r2, [r3, #0]
					break;
 800178e:	e003      	b.n	8001798 <InterpretCmd+0x1a0>
					state = TURNING_LEFT;
 8001790:	4b45      	ldr	r3, [pc, #276]	; (80018a8 <InterpretCmd+0x2b0>)
 8001792:	2206      	movs	r2, #6
 8001794:	701a      	strb	r2, [r3, #0]
					break;
 8001796:	bf00      	nop
			}
			break;
 8001798:	e07d      	b.n	8001896 <InterpretCmd+0x29e>
		case 'H':
			switch (command[1])
 800179a:	4b41      	ldr	r3, [pc, #260]	; (80018a0 <InterpretCmd+0x2a8>)
 800179c:	785b      	ldrb	r3, [r3, #1]
 800179e:	2b41      	cmp	r3, #65	; 0x41
 80017a0:	d006      	beq.n	80017b0 <InterpretCmd+0x1b8>
 80017a2:	2b4f      	cmp	r3, #79	; 0x4f
 80017a4:	d000      	beq.n	80017a8 <InterpretCmd+0x1b0>
					//	Stop or Halt Command
					stop();
					state = STILL;
					break;
				default:
					break;
 80017a6:	e009      	b.n	80017bc <InterpretCmd+0x1c4>
					REF = NoRef;
 80017a8:	4b40      	ldr	r3, [pc, #256]	; (80018ac <InterpretCmd+0x2b4>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
					break;
 80017ae:	e005      	b.n	80017bc <InterpretCmd+0x1c4>
					stop();
 80017b0:	f001 fd66 	bl	8003280 <stop>
					state = STILL;
 80017b4:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <InterpretCmd+0x2b0>)
 80017b6:	220b      	movs	r2, #11
 80017b8:	701a      	strb	r2, [r3, #0]
					break;
 80017ba:	bf00      	nop
			}
			break;
 80017bc:	e06b      	b.n	8001896 <InterpretCmd+0x29e>
		case 'S':
			switch (command[1])
 80017be:	4b38      	ldr	r3, [pc, #224]	; (80018a0 <InterpretCmd+0x2a8>)
 80017c0:	785b      	ldrb	r3, [r3, #1]
 80017c2:	2b49      	cmp	r3, #73	; 0x49
 80017c4:	d005      	beq.n	80017d2 <InterpretCmd+0x1da>
 80017c6:	2b54      	cmp	r3, #84	; 0x54
 80017c8:	d107      	bne.n	80017da <InterpretCmd+0x1e2>
			{
				case 'T':
					state = STAND;
 80017ca:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <InterpretCmd+0x2b0>)
 80017cc:	220a      	movs	r2, #10
 80017ce:	701a      	strb	r2, [r3, #0]
					break;
 80017d0:	e031      	b.n	8001836 <InterpretCmd+0x23e>
				case 'I':
					state = SIT;
 80017d2:	4b35      	ldr	r3, [pc, #212]	; (80018a8 <InterpretCmd+0x2b0>)
 80017d4:	2209      	movs	r2, #9
 80017d6:	701a      	strb	r2, [r3, #0]
					break;
 80017d8:	e02d      	b.n	8001836 <InterpretCmd+0x23e>
				default:
					//	Servo Control Mode
					//	:S#P###
					//	# -> Servo number
					//	### -> Angle
					state = MOVING_JOINT;
 80017da:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <InterpretCmd+0x2b0>)
 80017dc:	2208      	movs	r2, #8
 80017de:	701a      	strb	r2, [r3, #0]
					if (command[1])
 80017e0:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <InterpretCmd+0x2a8>)
 80017e2:	785b      	ldrb	r3, [r3, #1]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d004      	beq.n	80017f2 <InterpretCmd+0x1fa>
					{
						value8 = atoi(&command[1]);
 80017e8:	4831      	ldr	r0, [pc, #196]	; (80018b0 <InterpretCmd+0x2b8>)
 80017ea:	f006 fd49 	bl	8008280 <atoi>
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
					}
					if (command[2] == 'P' && command[3])
 80017f2:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <InterpretCmd+0x2a8>)
 80017f4:	789b      	ldrb	r3, [r3, #2]
 80017f6:	2b50      	cmp	r3, #80	; 0x50
 80017f8:	d109      	bne.n	800180e <InterpretCmd+0x216>
 80017fa:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <InterpretCmd+0x2a8>)
 80017fc:	78db      	ldrb	r3, [r3, #3]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <InterpretCmd+0x216>
					{
						value16 = atoi(&command[3]);
 8001802:	482c      	ldr	r0, [pc, #176]	; (80018b4 <InterpretCmd+0x2bc>)
 8001804:	f006 fd3c 	bl	8008280 <atoi>
 8001808:	4603      	mov	r3, r0
 800180a:	80bb      	strh	r3, [r7, #4]
 800180c:	e00c      	b.n	8001828 <InterpretCmd+0x230>
					}
					else if (command[3] == 'P' && command[4])
 800180e:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <InterpretCmd+0x2a8>)
 8001810:	78db      	ldrb	r3, [r3, #3]
 8001812:	2b50      	cmp	r3, #80	; 0x50
 8001814:	d108      	bne.n	8001828 <InterpretCmd+0x230>
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <InterpretCmd+0x2a8>)
 8001818:	791b      	ldrb	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d004      	beq.n	8001828 <InterpretCmd+0x230>
					{
						value16 = atoi(&command[4]);
 800181e:	4826      	ldr	r0, [pc, #152]	; (80018b8 <InterpretCmd+0x2c0>)
 8001820:	f006 fd2e 	bl	8008280 <atoi>
 8001824:	4603      	mov	r3, r0
 8001826:	80bb      	strh	r3, [r7, #4]
					}
					servoControl(anglePos, value8, value16);
 8001828:	88ba      	ldrh	r2, [r7, #4]
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4619      	mov	r1, r3
 800182e:	4823      	ldr	r0, [pc, #140]	; (80018bc <InterpretCmd+0x2c4>)
 8001830:	f001 fd58 	bl	80032e4 <servoControl>
					break;
 8001834:	bf00      	nop
			}
			break;
 8001836:	e02e      	b.n	8001896 <InterpretCmd+0x29e>
		case 'L':
			//	Leg Control MOde
			//	:L#*
			// * -> U: Up, D: Down, R: Right, L: Left
			state = MOVING_LEG;
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <InterpretCmd+0x2b0>)
 800183a:	2207      	movs	r2, #7
 800183c:	701a      	strb	r2, [r3, #0]
			char movement;
			if (command[1] && command[2] && command[3])
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <InterpretCmd+0x2a8>)
 8001840:	785b      	ldrb	r3, [r3, #1]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d026      	beq.n	8001894 <InterpretCmd+0x29c>
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <InterpretCmd+0x2a8>)
 8001848:	789b      	ldrb	r3, [r3, #2]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d022      	beq.n	8001894 <InterpretCmd+0x29c>
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <InterpretCmd+0x2a8>)
 8001850:	78db      	ldrb	r3, [r3, #3]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d01e      	beq.n	8001894 <InterpretCmd+0x29c>
			{
				value8 = atoi(&command[1]);
 8001856:	4816      	ldr	r0, [pc, #88]	; (80018b0 <InterpretCmd+0x2b8>)
 8001858:	f006 fd12 	bl	8008280 <atoi>
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
				movement = command[2];
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <InterpretCmd+0x2a8>)
 8001862:	789b      	ldrb	r3, [r3, #2]
 8001864:	70fb      	strb	r3, [r7, #3]
				value16 = atoi(&command[3]);
 8001866:	4813      	ldr	r0, [pc, #76]	; (80018b4 <InterpretCmd+0x2bc>)
 8001868:	f006 fd0a 	bl	8008280 <atoi>
 800186c:	4603      	mov	r3, r0
 800186e:	80bb      	strh	r3, [r7, #4]
				legControl(anglePos, value8, movement, value16);
 8001870:	88bb      	ldrh	r3, [r7, #4]
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	79f9      	ldrb	r1, [r7, #7]
 8001876:	4811      	ldr	r0, [pc, #68]	; (80018bc <InterpretCmd+0x2c4>)
 8001878:	f001 fd4c 	bl	8003314 <legControl>
			}
			break;
 800187c:	e00a      	b.n	8001894 <InterpretCmd+0x29c>
		case '?':
			//	Print Position Information
			// Get Position of each leg
			printPosition();
 800187e:	f002 f82b 	bl	80038d8 <printPosition>
			break;
 8001882:	e008      	b.n	8001896 <InterpretCmd+0x29e>
		case '!':
			// Get State
			getState(state);
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <InterpretCmd+0x2b0>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fe7f 	bl	800158c <getState>
			break;
 800188e:	e002      	b.n	8001896 <InterpretCmd+0x29e>
		default:
			break;
 8001890:	bf00      	nop
 8001892:	e000      	b.n	8001896 <InterpretCmd+0x29e>
			break;
 8001894:	bf00      	nop
	}
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200002ec 	.word	0x200002ec
 80018a4:	200003c8 	.word	0x200003c8
 80018a8:	20000314 	.word	0x20000314
 80018ac:	200002e8 	.word	0x200002e8
 80018b0:	200002ed 	.word	0x200002ed
 80018b4:	200002ef 	.word	0x200002ef
 80018b8:	200002f0 	.word	0x200002f0
 80018bc:	200002d0 	.word	0x200002d0

080018c0 <HAL_UART_RxCpltCallback>:

//	Interruptions
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018c0:	b5b0      	push	{r4, r5, r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	2b10      	cmp	r3, #16
 80018d4:	f040 80bc 	bne.w	8001a50 <HAL_UART_RxCpltCallback+0x190>
	{
 80018d8:	466b      	mov	r3, sp
 80018da:	461d      	mov	r5, r3
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	4b60      	ldr	r3, [pc, #384]	; (8001a64 <HAL_UART_RxCpltCallback+0x1a4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	4b5e      	ldr	r3, [pc, #376]	; (8001a64 <HAL_UART_RxCpltCallback+0x1a4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
		RxCounter++;
 80018f2:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <HAL_UART_RxCpltCallback+0x1a8>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4b5b      	ldr	r3, [pc, #364]	; (8001a68 <HAL_UART_RxCpltCallback+0x1a8>)
 80018fc:	701a      	strb	r2, [r3, #0]

		uint16_t start = RxBfrPos;
 80018fe:	4b5b      	ldr	r3, [pc, #364]	; (8001a6c <HAL_UART_RxCpltCallback+0x1ac>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	833b      	strh	r3, [r7, #24]
		RxBfrPos = RX_BFR_SIZE - (uint16_t)huart->hdmarx->Instance->CNDTR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f1c3 030a 	rsb	r3, r3, #10
 8001912:	b2da      	uxtb	r2, r3
 8001914:	4b55      	ldr	r3, [pc, #340]	; (8001a6c <HAL_UART_RxCpltCallback+0x1ac>)
 8001916:	701a      	strb	r2, [r3, #0]
		uint16_t len = RX_BFR_SIZE;
 8001918:	230a      	movs	r3, #10
 800191a:	837b      	strh	r3, [r7, #26]

		if (RxRollover < 2)
 800191c:	4b54      	ldr	r3, [pc, #336]	; (8001a70 <HAL_UART_RxCpltCallback+0x1b0>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d81c      	bhi.n	800195e <HAL_UART_RxCpltCallback+0x9e>
		{
			if (RxRollover)
 8001924:	4b52      	ldr	r3, [pc, #328]	; (8001a70 <HAL_UART_RxCpltCallback+0x1b0>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d011      	beq.n	8001950 <HAL_UART_RxCpltCallback+0x90>
			{
				if (RxBfrPos <= start) len = RxBfrPos + RX_BFR_SIZE - start;
 800192c:	4b4f      	ldr	r3, [pc, #316]	; (8001a6c <HAL_UART_RxCpltCallback+0x1ac>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	8b3a      	ldrh	r2, [r7, #24]
 8001934:	429a      	cmp	r2, r3
 8001936:	d308      	bcc.n	800194a <HAL_UART_RxCpltCallback+0x8a>
 8001938:	4b4c      	ldr	r3, [pc, #304]	; (8001a6c <HAL_UART_RxCpltCallback+0x1ac>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b29a      	uxth	r2, r3
 800193e:	8b3b      	ldrh	r3, [r7, #24]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	b29b      	uxth	r3, r3
 8001944:	330a      	adds	r3, #10
 8001946:	837b      	strh	r3, [r7, #26]
 8001948:	e00b      	b.n	8001962 <HAL_UART_RxCpltCallback+0xa2>
				else len = RX_BFR_SIZE + 1;
 800194a:	230b      	movs	r3, #11
 800194c:	837b      	strh	r3, [r7, #26]
 800194e:	e008      	b.n	8001962 <HAL_UART_RxCpltCallback+0xa2>
			}
			else
			{
				len = RxBfrPos - start;
 8001950:	4b46      	ldr	r3, [pc, #280]	; (8001a6c <HAL_UART_RxCpltCallback+0x1ac>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	b29a      	uxth	r2, r3
 8001956:	8b3b      	ldrh	r3, [r7, #24]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	837b      	strh	r3, [r7, #26]
 800195c:	e001      	b.n	8001962 <HAL_UART_RxCpltCallback+0xa2>
			}
		}
		else
		{
			len = RX_BFR_SIZE + 2;
 800195e:	230c      	movs	r3, #12
 8001960:	837b      	strh	r3, [r7, #26]
		}

		int i;
		char data[len];
 8001962:	8b78      	ldrh	r0, [r7, #26]
 8001964:	4603      	mov	r3, r0
 8001966:	3b01      	subs	r3, #1
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	b281      	uxth	r1, r0
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	f04f 0400 	mov.w	r4, #0
 8001978:	00d4      	lsls	r4, r2, #3
 800197a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800197e:	00cb      	lsls	r3, r1, #3
 8001980:	b281      	uxth	r1, r0
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	f04f 0400 	mov.w	r4, #0
 800198e:	00d4      	lsls	r4, r2, #3
 8001990:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001994:	00cb      	lsls	r3, r1, #3
 8001996:	4603      	mov	r3, r0
 8001998:	3307      	adds	r3, #7
 800199a:	08db      	lsrs	r3, r3, #3
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	ebad 0d03 	sub.w	sp, sp, r3
 80019a2:	466b      	mov	r3, sp
 80019a4:	3300      	adds	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]
		memcpy(data, &USART_RxStream[start], len);
 80019a8:	6938      	ldr	r0, [r7, #16]
 80019aa:	8b3b      	ldrh	r3, [r7, #24]
 80019ac:	4a31      	ldr	r2, [pc, #196]	; (8001a74 <HAL_UART_RxCpltCallback+0x1b4>)
 80019ae:	4413      	add	r3, r2
 80019b0:	8b7a      	ldrh	r2, [r7, #26]
 80019b2:	4619      	mov	r1, r3
 80019b4:	f006 fc92 	bl	80082dc <memcpy>

		for (i = 0; i < len; i++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
 80019bc:	e03f      	b.n	8001a3e <HAL_UART_RxCpltCallback+0x17e>
		{
			switch (data[i])
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b3a      	cmp	r3, #58	; 0x3a
 80019c8:	d004      	beq.n	80019d4 <HAL_UART_RxCpltCallback+0x114>
 80019ca:	2b3b      	cmp	r3, #59	; 0x3b
 80019cc:	d009      	beq.n	80019e2 <HAL_UART_RxCpltCallback+0x122>
 80019ce:	2b0d      	cmp	r3, #13
 80019d0:	d007      	beq.n	80019e2 <HAL_UART_RxCpltCallback+0x122>
 80019d2:	e016      	b.n	8001a02 <HAL_UART_RxCpltCallback+0x142>
			{
				case ':':
					indRx = 0;
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <HAL_UART_RxCpltCallback+0x1b8>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
					flagRx = 1;
 80019da:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <HAL_UART_RxCpltCallback+0x1bc>)
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
					break;
 80019e0:	e02a      	b.n	8001a38 <HAL_UART_RxCpltCallback+0x178>
				case '\r':
				case ';':
					if (flagRx)
 80019e2:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <HAL_UART_RxCpltCallback+0x1bc>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d023      	beq.n	8001a32 <HAL_UART_RxCpltCallback+0x172>
					{
						flagRx = 0;
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_UART_RxCpltCallback+0x1bc>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
						command[indRx] = 0;
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_UART_RxCpltCallback+0x1b8>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <HAL_UART_RxCpltCallback+0x1c0>)
 80019f8:	2100      	movs	r1, #0
 80019fa:	5499      	strb	r1, [r3, r2]
						InterpretCmd();
 80019fc:	f7ff fdfc 	bl	80015f8 <InterpretCmd>
					}
					break;
 8001a00:	e017      	b.n	8001a32 <HAL_UART_RxCpltCallback+0x172>
				default:
					if (flagRx)
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <HAL_UART_RxCpltCallback+0x1bc>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d015      	beq.n	8001a36 <HAL_UART_RxCpltCallback+0x176>
					{
						command[indRx] = data[i];
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_UART_RxCpltCallback+0x1b8>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	4413      	add	r3, r2
 8001a16:	781a      	ldrb	r2, [r3, #0]
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_UART_RxCpltCallback+0x1c0>)
 8001a1a:	545a      	strb	r2, [r3, r1]
						if (indRx < MAX_STRLEN - 1) indRx++;
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_UART_RxCpltCallback+0x1b8>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b26      	cmp	r3, #38	; 0x26
 8001a22:	d808      	bhi.n	8001a36 <HAL_UART_RxCpltCallback+0x176>
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <HAL_UART_RxCpltCallback+0x1b8>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_UART_RxCpltCallback+0x1b8>)
 8001a2e:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001a30:	e001      	b.n	8001a36 <HAL_UART_RxCpltCallback+0x176>
					break;
 8001a32:	bf00      	nop
 8001a34:	e000      	b.n	8001a38 <HAL_UART_RxCpltCallback+0x178>
					break;
 8001a36:	bf00      	nop
		for (i = 0; i < len; i++)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	8b7b      	ldrh	r3, [r7, #26]
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbbb      	blt.n	80019be <HAL_UART_RxCpltCallback+0xfe>
			}
		}

		RxRollover = 0;
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_UART_RxCpltCallback+0x1b0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	46ad      	mov	sp, r5
	}
	else
	{
		RxRollover++;
	}
}
 8001a4e:	e005      	b.n	8001a5c <HAL_UART_RxCpltCallback+0x19c>
		RxRollover++;
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <HAL_UART_RxCpltCallback+0x1b0>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	3301      	adds	r3, #1
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_UART_RxCpltCallback+0x1b0>)
 8001a5a:	701a      	strb	r2, [r3, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bdb0      	pop	{r4, r5, r7, pc}
 8001a64:	20000498 	.word	0x20000498
 8001a68:	2000022d 	.word	0x2000022d
 8001a6c:	2000022e 	.word	0x2000022e
 8001a70:	2000022c 	.word	0x2000022c
 8001a74:	20000318 	.word	0x20000318
 8001a78:	20000230 	.word	0x20000230
 8001a7c:	2000022f 	.word	0x2000022f
 8001a80:	200002ec 	.word	0x200002ec

08001a84 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a1a      	ldr	r2, [pc, #104]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d115      	bne.n	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		if (state != HOME && state != STILL && state != MOVING_JOINT && state != MOVING_LEG)
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d029      	beq.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001a9c:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b0b      	cmp	r3, #11
 8001aa2:	d025      	beq.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001aa4:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d021      	beq.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b07      	cmp	r3, #7
 8001ab2:	d01d      	beq.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x6c>
		{
			stop();
 8001ab4:	f001 fbe4 	bl	8003280 <stop>
			state = STILL;
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001aba:	220b      	movs	r2, #11
 8001abc:	701a      	strb	r2, [r3, #0]
		else
		{
			HAL_GPIO_WritePin(START_LED_GPIO_Port, START_LED_Pin, GPIO_PIN_RESET);
		}
	}
}
 8001abe:	e017      	b.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x6c>
	else if (htim == &htim3)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d113      	bne.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x6c>
		if (state != STILL && state != HOME)
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b0b      	cmp	r3, #11
 8001ace:	d009      	beq.n	8001ae4 <HAL_TIM_PeriodElapsedCallback+0x60>
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_TIM_PeriodElapsedCallback+0x60>
			HAL_GPIO_TogglePin(START_LED_GPIO_Port, START_LED_Pin);
 8001ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001adc:	4809      	ldr	r0, [pc, #36]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001ade:	f002 fff3 	bl	8004ac8 <HAL_GPIO_TogglePin>
}
 8001ae2:	e005      	b.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x6c>
			HAL_GPIO_WritePin(START_LED_GPIO_Port, START_LED_Pin, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aea:	4806      	ldr	r0, [pc, #24]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001aec:	f002 ffd4 	bl	8004a98 <HAL_GPIO_WritePin>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	200003c8 	.word	0x200003c8
 8001afc:	20000314 	.word	0x20000314
 8001b00:	20000380 	.word	0x20000380
 8001b04:	40011000 	.word	0x40011000

08001b08 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
	stop();
 8001b12:	f001 fbb5 	bl	8003280 <stop>
	state = STILL;
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x28>)
 8001b18:	220b      	movs	r2, #11
 8001b1a:	701a      	strb	r2, [r3, #0]
	homing(refPos);
 8001b1c:	4805      	ldr	r0, [pc, #20]	; (8001b34 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001b1e:	f000 fa23 	bl	8001f68 <homing>
	state = HOME;
 8001b22:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x28>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000314 	.word	0x20000314
 8001b34:	20000000 	.word	0x20000000

08001b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <PCA9685_SetBit>:


I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af04      	add	r7, sp, #16
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	71bb      	strb	r3, [r7, #6]
 8001b52:	4613      	mov	r3, r2
 8001b54:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if (Value) Value =1;
 8001b56:	797b      	ldrb	r3, [r7, #5]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <PCA9685_SetBit+0x1c>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	717b      	strb	r3, [r7, #5]

	if (HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001b60:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <PCA9685_SetBit+0xb0>)
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	230a      	movs	r3, #10
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	f107 030f 	add.w	r3, r7, #15
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2301      	movs	r3, #1
 8001b78:	2180      	movs	r1, #128	; 0x80
 8001b7a:	f003 fb07 	bl	800518c <HAL_I2C_Mem_Read>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e031      	b.n	8001bec <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1 << PCA9685_MODE1_RESTART_BIT) | (1 << Bit));
 8001b88:	79bb      	ldrb	r3, [r7, #6]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	b25b      	sxtb	r3, r3
 8001b92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b96:	b25b      	sxtb	r3, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	b25a      	sxtb	r2, r3
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	b25b      	sxtb	r3, r3
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1) << Bit;
 8001ba8:	797b      	ldrb	r3, [r7, #5]
 8001baa:	f003 0201 	and.w	r2, r3, #1
 8001bae:	79bb      	ldrb	r3, [r7, #6]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	b25a      	sxtb	r2, r3
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	b25b      	sxtb	r3, r3
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	b25b      	sxtb	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	73fb      	strb	r3, [r7, #15]

	if (HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <PCA9685_SetBit+0xb0>)
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	230a      	movs	r3, #10
 8001bcc:	9302      	str	r3, [sp, #8]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	f107 030f 	add.w	r3, r7, #15
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	f003 f9dc 	bl	8004f98 <HAL_I2C_Mem_Write>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	2000037c 	.word	0x2000037c

08001bf8 <PCA9685_SoftwareReset>:


PCA9685_STATUS PCA9685_SoftwareReset()
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 8001bfe:	2306      	movs	r3, #6
 8001c00:	71fb      	strb	r3, [r7, #7]
	if (HAL_OK != HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <PCA9685_SoftwareReset+0x30>)
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	1dfa      	adds	r2, r7, #7
 8001c08:	230a      	movs	r3, #10
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	2100      	movs	r1, #0
 8001c10:	f003 f8c4 	bl	8004d9c <HAL_I2C_Master_Transmit>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	2000037c 	.word	0x2000037c

08001c2c <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff ff81 	bl	8001b44 <PCA9685_SetBit>
 8001c42:	4603      	mov	r3, r0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2107      	movs	r1, #7
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f7ff ff71 	bl	8001b44 <PCA9685_SetBit>
 8001c62:	4603      	mov	r3, r0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2105      	movs	r1, #5
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f7ff ff61 	bl	8001b44 <PCA9685_SetBit>
 8001c82:	4603      	mov	r3, r0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	0000      	movs	r0, r0
	...

08001c90 <PCA9685_SetPWMFrequency>:
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_ALLCALL_BIT, Enable);
}

//	Frequency
PCA9685_STATUS PCA9685_SetPWMFrequency(uint16_t Freq)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af04      	add	r7, sp, #16
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if (Freq >= 1526)
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d902      	bls.n	8001caa <PCA9685_SetPWMFrequency+0x1a>
	{
		Prescale = 0x03;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	72fb      	strb	r3, [r7, #11]
 8001ca8:	e043      	b.n	8001d32 <PCA9685_SetPWMFrequency+0xa2>
	}
	else if (Freq <= 24)
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	2b18      	cmp	r3, #24
 8001cae:	d802      	bhi.n	8001cb6 <PCA9685_SetPWMFrequency+0x26>
	{
		Prescale = 0xFF;
 8001cb0:	23ff      	movs	r3, #255	; 0xff
 8001cb2:	72fb      	strb	r3, [r7, #11]
 8001cb4:	e03d      	b.n	8001d32 <PCA9685_SetPWMFrequency+0xa2>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Freq)) - 1;
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff f80b 	bl	8000cd4 <__aeabi_ui2f>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fbb1 	bl	8000428 <__aeabi_f2d>
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <PCA9685_SetPWMFrequency+0xe8>)
 8001ccc:	f7fe fc04 	bl	80004d8 <__aeabi_dmul>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4623      	mov	r3, r4
 8001cd8:	a125      	add	r1, pc, #148	; (adr r1, 8001d70 <PCA9685_SetPWMFrequency+0xe0>)
 8001cda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cde:	f7fe fd25 	bl	800072c <__aeabi_ddiv>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460c      	mov	r4, r1
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	4621      	mov	r1, r4
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <PCA9685_SetPWMFrequency+0xec>)
 8001cf0:	f7fe fa3a 	bl	8000168 <__aeabi_dsub>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	460c      	mov	r4, r1
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	f7fe fee4 	bl	8000ac8 <__aeabi_d2f>
 8001d00:	4603      	mov	r3, r0
 8001d02:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f7fe fb8f 	bl	8000428 <__aeabi_f2d>
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <PCA9685_SetPWMFrequency+0xf0>)
 8001d10:	f7fe fa2c 	bl	800016c <__adddf3>
 8001d14:	4603      	mov	r3, r0
 8001d16:	460c      	mov	r4, r1
 8001d18:	4618      	mov	r0, r3
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	f008 fbc8 	bl	800a4b0 <floor>
 8001d20:	4603      	mov	r3, r0
 8001d22:	460c      	mov	r4, r1
 8001d24:	4618      	mov	r0, r3
 8001d26:	4621      	mov	r1, r4
 8001d28:	f7fe feae 	bl	8000a88 <__aeabi_d2uiz>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	72fb      	strb	r3, [r7, #11]
	}

	//	To change the frequency, PCA9685 has to be in Sleep Mode
	PCA9685_SleepMode(1);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff ff7a 	bl	8001c2c <PCA9685_SleepMode>
	//	Send Prescale Value to Servo Controller
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10);
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <PCA9685_SetPWMFrequency+0xf4>)
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	230a      	movs	r3, #10
 8001d3e:	9302      	str	r3, [sp, #8]
 8001d40:	2301      	movs	r3, #1
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	f107 030b 	add.w	r3, r7, #11
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	22fe      	movs	r2, #254	; 0xfe
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	f003 f922 	bl	8004f98 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7ff ff69 	bl	8001c2c <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f7ff ff76 	bl	8001c4c <PCA9685_RestartMode>

	return PCA9685_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd90      	pop	{r4, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	f3af 8000 	nop.w
 8001d70:	00000000 	.word	0x00000000
 8001d74:	4177d784 	.word	0x4177d784
 8001d78:	40b00000 	.word	0x40b00000
 8001d7c:	3ff00000 	.word	0x3ff00000
 8001d80:	3fe00000 	.word	0x3fe00000
 8001d84:	2000037c 	.word	0x2000037c

08001d88 <PCA9685_SetPWM>:

PCA9685_STATUS PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af04      	add	r7, sp, #16
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
 8001d92:	460b      	mov	r3, r1
 8001d94:	80bb      	strh	r3, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	3306      	adds	r3, #6
 8001da2:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8001da4:	88bb      	ldrh	r3, [r7, #4]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime >> 8;
 8001daa:	88bb      	ldrh	r3, [r7, #4]
 8001dac:	0a1b      	lsrs	r3, r3, #8
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime >> 8;
 8001dba:	887b      	ldrh	r3, [r7, #2]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	72fb      	strb	r3, [r7, #11]

	if (HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <PCA9685_SetPWM+0x70>)
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	230a      	movs	r3, #10
 8001dce:	9302      	str	r3, [sp, #8]
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	f107 0308 	add.w	r3, r7, #8
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2301      	movs	r3, #1
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	f003 f8db 	bl	8004f98 <HAL_I2C_Mem_Write>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <PCA9685_SetPWM+0x64>
	{
		return PCA9685_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <PCA9685_SetPWM+0x66>
	}

	return PCA9685_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000037c 	.word	0x2000037c

08001dfc <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
 8001e06:	460b      	mov	r3, r1
 8001e08:	80bb      	strh	r3, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	71bb      	strb	r3, [r7, #6]
	if (Value > 4095) Value = 4095;
 8001e0e:	88bb      	ldrh	r3, [r7, #4]
 8001e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e14:	d302      	bcc.n	8001e1c <PCA9685_SetPin+0x20>
 8001e16:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001e1a:	80bb      	strh	r3, [r7, #4]

	if (Invert) {
 8001e1c:	79bb      	ldrb	r3, [r7, #6]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d025      	beq.n	8001e6e <PCA9685_SetPin+0x72>
		if (Value == 0) {
 8001e22:	88bb      	ldrh	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d108      	bne.n	8001e3a <PCA9685_SetPin+0x3e>
			//	Special value for signal fully on
			return PCA9685_SetPWM(Channel, 4096, 0);
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ffa9 	bl	8001d88 <PCA9685_SetPWM>
 8001e36:	4603      	mov	r3, r0
 8001e38:	e03a      	b.n	8001eb0 <PCA9685_SetPin+0xb4>
		}
		else if (Value == 4095)
 8001e3a:	88bb      	ldrh	r3, [r7, #4]
 8001e3c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d108      	bne.n	8001e56 <PCA9685_SetPin+0x5a>
		{
			//	Special value for signal fully off
			return PCA9685_SetPWM(Channel, 0, 4096);
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff9b 	bl	8001d88 <PCA9685_SetPWM>
 8001e52:	4603      	mov	r3, r0
 8001e54:	e02c      	b.n	8001eb0 <PCA9685_SetPin+0xb4>
		}
		else
		{
			return PCA9685_SetPWM(Channel, 0, 4095-Value);
 8001e56:	88bb      	ldrh	r3, [r7, #4]
 8001e58:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001e5c:	330f      	adds	r3, #15
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff8f 	bl	8001d88 <PCA9685_SetPWM>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	e020      	b.n	8001eb0 <PCA9685_SetPin+0xb4>
		}
	}
	else
	{
		if (Value == 4095) {
 8001e6e:	88bb      	ldrh	r3, [r7, #4]
 8001e70:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d108      	bne.n	8001e8a <PCA9685_SetPin+0x8e>
			//	Special value for signal fully on
			return PCA9685_SetPWM(Channel, 4096, 0);
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff81 	bl	8001d88 <PCA9685_SetPWM>
 8001e86:	4603      	mov	r3, r0
 8001e88:	e012      	b.n	8001eb0 <PCA9685_SetPin+0xb4>
		}
		else if (Value == 0)
 8001e8a:	88bb      	ldrh	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d108      	bne.n	8001ea2 <PCA9685_SetPin+0xa6>
		{
			//	Special value for signal fully off
			return PCA9685_SetPWM(Channel, 0, 4096);
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff75 	bl	8001d88 <PCA9685_SetPWM>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	e006      	b.n	8001eb0 <PCA9685_SetPin+0xb4>
		}
		else
		{
			return PCA9685_SetPWM(Channel, 0, Value);
 8001ea2:	88ba      	ldrh	r2, [r7, #4]
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff6d 	bl	8001d88 <PCA9685_SetPWM>
 8001eae:	4603      	mov	r3, r0
		}
	}
	return PCA9685_ERROR;
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, uint16_t Angle, uint8_t Invert)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	80bb      	strh	r3, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	71bb      	strb	r3, [r7, #6]
	float Value;
	if (Angle < MIN_ANGLE) Angle = MIN_ANGLE;
	if (Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 8001eca:	88bb      	ldrh	r3, [r7, #4]
 8001ecc:	2bb4      	cmp	r3, #180	; 0xb4
 8001ece:	d901      	bls.n	8001ed4 <PCA9685_SetServoAngle+0x1c>
 8001ed0:	23b4      	movs	r3, #180	; 0xb4
 8001ed2:	80bb      	strh	r3, [r7, #4]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8001ed4:	88bb      	ldrh	r3, [r7, #4]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe ff00 	bl	8000cdc <__aeabi_i2f>
 8001edc:	4603      	mov	r3, r0
 8001ede:	490f      	ldr	r1, [pc, #60]	; (8001f1c <PCA9685_SetServoAngle+0x64>)
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe ff4f 	bl	8000d84 <__aeabi_fmul>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	490d      	ldr	r1, [pc, #52]	; (8001f20 <PCA9685_SetServoAngle+0x68>)
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fffe 	bl	8000eec <__aeabi_fdiv>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	490c      	ldr	r1, [pc, #48]	; (8001f24 <PCA9685_SetServoAngle+0x6c>)
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fe3d 	bl	8000b74 <__addsf3>
 8001efa:	4603      	mov	r3, r0
 8001efc:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, Invert);
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f7ff f92c 	bl	800115c <__aeabi_f2uiz>
 8001f04:	4603      	mov	r3, r0
 8001f06:	b299      	uxth	r1, r3
 8001f08:	79ba      	ldrb	r2, [r7, #6]
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff75 	bl	8001dfc <PCA9685_SetPin>
 8001f12:	4603      	mov	r3, r0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	43c30000 	.word	0x43c30000
 8001f20:	43340000 	.word	0x43340000
 8001f24:	42dc0000 	.word	0x42dc0000

08001f28 <PCA9685_Init>:
#endif

void PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8001f30:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <PCA9685_Init+0x3c>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6013      	str	r3, [r2, #0]

	PCA9685_STATUS Status;

	Status = PCA9685_SoftwareReset();
 8001f36:	f7ff fe5f 	bl	8001bf8 <PCA9685_SoftwareReset>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	73fb      	strb	r3, [r7, #15]
#ifdef PCA9685_SERVO_MODE
	Status = PCA9685_SetPWMFrequency(48);
 8001f3e:	2030      	movs	r0, #48	; 0x30
 8001f40:	f7ff fea6 	bl	8001c90 <PCA9685_SetPWMFrequency>
 8001f44:	4603      	mov	r3, r0
 8001f46:	73fb      	strb	r3, [r7, #15]
#else
	PCA9685_SetPWMFrequency(1000);
#endif
	//	Set AutoIncrement
	Status = PCA9685_AutoIncrement(1);
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f7ff fe8f 	bl	8001c6c <PCA9685_AutoIncrement>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	73fb      	strb	r3, [r7, #15]
	if (Status != PCA9685_OK)
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <PCA9685_Init+0x34>
	{
		Error_Handler();
 8001f58:	f7ff fdee 	bl	8001b38 <Error_Handler>
	}
}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2000037c 	.word	0x2000037c

08001f68 <homing>:
#include "pca9685.h"
#include "usart.h"


void homing(float refPos[4][3])
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	pos2Angle(refPos, 1);
 8001f70:	2101      	movs	r1, #1
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 fb7e 	bl	8002674 <pos2Angle>
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <inverseCinematic>:

void inverseCinematic(float *alpha, float *beta, float *gamma, float x, float y, float z)
{
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b08e      	sub	sp, #56	; 0x38
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
	//	Theta 1: First Joint variable -> alpha
	float theta1 = atan2(y, x);
 8001f8e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f90:	f7fe fa4a 	bl	8000428 <__aeabi_f2d>
 8001f94:	4604      	mov	r4, r0
 8001f96:	460d      	mov	r5, r1
 8001f98:	6838      	ldr	r0, [r7, #0]
 8001f9a:	f7fe fa45 	bl	8000428 <__aeabi_f2d>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	4629      	mov	r1, r5
 8001fa6:	f008 fc2f 	bl	800a808 <atan2>
 8001faa:	4603      	mov	r3, r0
 8001fac:	460c      	mov	r4, r1
 8001fae:	4618      	mov	r0, r3
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	f7fe fd89 	bl	8000ac8 <__aeabi_d2f>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	637b      	str	r3, [r7, #52]	; 0x34
	*alpha = theta1 / PI * 180;
 8001fba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001fbc:	f7fe fa34 	bl	8000428 <__aeabi_f2d>
 8001fc0:	a39d      	add	r3, pc, #628	; (adr r3, 8002238 <inverseCinematic+0x2b8>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	f7fe fbb1 	bl	800072c <__aeabi_ddiv>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	460c      	mov	r4, r1
 8001fce:	4618      	mov	r0, r3
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	4ba0      	ldr	r3, [pc, #640]	; (8002258 <inverseCinematic+0x2d8>)
 8001fd8:	f7fe fa7e 	bl	80004d8 <__aeabi_dmul>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	460c      	mov	r4, r1
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	f7fe fd70 	bl	8000ac8 <__aeabi_d2f>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	601a      	str	r2, [r3, #0]

	//	Internal variables for calculations
	float d = sqrt((x*x) + (y*y));
 8001fee:	6839      	ldr	r1, [r7, #0]
 8001ff0:	6838      	ldr	r0, [r7, #0]
 8001ff2:	f7fe fec7 	bl	8000d84 <__aeabi_fmul>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	461c      	mov	r4, r3
 8001ffa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001ffc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ffe:	f7fe fec1 	bl	8000d84 <__aeabi_fmul>
 8002002:	4603      	mov	r3, r0
 8002004:	4619      	mov	r1, r3
 8002006:	4620      	mov	r0, r4
 8002008:	f7fe fdb4 	bl	8000b74 <__addsf3>
 800200c:	4603      	mov	r3, r0
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fa0a 	bl	8000428 <__aeabi_f2d>
 8002014:	4603      	mov	r3, r0
 8002016:	460c      	mov	r4, r1
 8002018:	4618      	mov	r0, r3
 800201a:	4621      	mov	r1, r4
 800201c:	f008 fbf6 	bl	800a80c <sqrt>
 8002020:	4603      	mov	r3, r0
 8002022:	460c      	mov	r4, r1
 8002024:	4618      	mov	r0, r3
 8002026:	4621      	mov	r1, r4
 8002028:	f7fe fd4e 	bl	8000ac8 <__aeabi_d2f>
 800202c:	4603      	mov	r3, r0
 800202e:	633b      	str	r3, [r7, #48]	; 0x30
	float h = d - lengthA;
 8002030:	498a      	ldr	r1, [pc, #552]	; (800225c <inverseCinematic+0x2dc>)
 8002032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002034:	f7fe fd9c 	bl	8000b70 <__aeabi_fsub>
 8002038:	4603      	mov	r3, r0
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
	float r = sqrt(h*h + z*z);
 800203c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800203e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002040:	f7fe fea0 	bl	8000d84 <__aeabi_fmul>
 8002044:	4603      	mov	r3, r0
 8002046:	461c      	mov	r4, r3
 8002048:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800204a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800204c:	f7fe fe9a 	bl	8000d84 <__aeabi_fmul>
 8002050:	4603      	mov	r3, r0
 8002052:	4619      	mov	r1, r3
 8002054:	4620      	mov	r0, r4
 8002056:	f7fe fd8d 	bl	8000b74 <__addsf3>
 800205a:	4603      	mov	r3, r0
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe f9e3 	bl	8000428 <__aeabi_f2d>
 8002062:	4603      	mov	r3, r0
 8002064:	460c      	mov	r4, r1
 8002066:	4618      	mov	r0, r3
 8002068:	4621      	mov	r1, r4
 800206a:	f008 fbcf 	bl	800a80c <sqrt>
 800206e:	4603      	mov	r3, r0
 8002070:	460c      	mov	r4, r1
 8002072:	4618      	mov	r0, r3
 8002074:	4621      	mov	r1, r4
 8002076:	f7fe fd27 	bl	8000ac8 <__aeabi_d2f>
 800207a:	4603      	mov	r3, r0
 800207c:	62bb      	str	r3, [r7, #40]	; 0x28

	//	Theta 2: Second Joint variable -> beta
	float theta2a = atan2(z, h);
 800207e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002080:	f7fe f9d2 	bl	8000428 <__aeabi_f2d>
 8002084:	4604      	mov	r4, r0
 8002086:	460d      	mov	r5, r1
 8002088:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800208a:	f7fe f9cd 	bl	8000428 <__aeabi_f2d>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4620      	mov	r0, r4
 8002094:	4629      	mov	r1, r5
 8002096:	f008 fbb7 	bl	800a808 <atan2>
 800209a:	4603      	mov	r3, r0
 800209c:	460c      	mov	r4, r1
 800209e:	4618      	mov	r0, r3
 80020a0:	4621      	mov	r1, r4
 80020a2:	f7fe fd11 	bl	8000ac8 <__aeabi_d2f>
 80020a6:	4603      	mov	r3, r0
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
	float theta2b = acos(((lengthB*lengthB) + (r*r) - (lengthC*lengthC)) / (2 * lengthB * r));
 80020aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020ae:	f7fe fe69 	bl	8000d84 <__aeabi_fmul>
 80020b2:	4603      	mov	r3, r0
 80020b4:	496a      	ldr	r1, [pc, #424]	; (8002260 <inverseCinematic+0x2e0>)
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fd5c 	bl	8000b74 <__addsf3>
 80020bc:	4603      	mov	r3, r0
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe f9b2 	bl	8000428 <__aeabi_f2d>
 80020c4:	a35e      	add	r3, pc, #376	; (adr r3, 8002240 <inverseCinematic+0x2c0>)
 80020c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ca:	f7fe f84d 	bl	8000168 <__aeabi_dsub>
 80020ce:	4603      	mov	r3, r0
 80020d0:	460c      	mov	r4, r1
 80020d2:	4625      	mov	r5, r4
 80020d4:	461c      	mov	r4, r3
 80020d6:	4963      	ldr	r1, [pc, #396]	; (8002264 <inverseCinematic+0x2e4>)
 80020d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020da:	f7fe fe53 	bl	8000d84 <__aeabi_fmul>
 80020de:	4603      	mov	r3, r0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe f9a1 	bl	8000428 <__aeabi_f2d>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4620      	mov	r0, r4
 80020ec:	4629      	mov	r1, r5
 80020ee:	f7fe fb1d 	bl	800072c <__aeabi_ddiv>
 80020f2:	4603      	mov	r3, r0
 80020f4:	460c      	mov	r4, r1
 80020f6:	4618      	mov	r0, r3
 80020f8:	4621      	mov	r1, r4
 80020fa:	f008 fadd 	bl	800a6b8 <acos>
 80020fe:	4603      	mov	r3, r0
 8002100:	460c      	mov	r4, r1
 8002102:	4618      	mov	r0, r3
 8002104:	4621      	mov	r1, r4
 8002106:	f7fe fcdf 	bl	8000ac8 <__aeabi_d2f>
 800210a:	4603      	mov	r3, r0
 800210c:	623b      	str	r3, [r7, #32]
	float theta2 = theta2a + theta2b + (PI/2);
 800210e:	6a39      	ldr	r1, [r7, #32]
 8002110:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002112:	f7fe fd2f 	bl	8000b74 <__addsf3>
 8002116:	4603      	mov	r3, r0
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe f985 	bl	8000428 <__aeabi_f2d>
 800211e:	a34a      	add	r3, pc, #296	; (adr r3, 8002248 <inverseCinematic+0x2c8>)
 8002120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002124:	f7fe f822 	bl	800016c <__adddf3>
 8002128:	4603      	mov	r3, r0
 800212a:	460c      	mov	r4, r1
 800212c:	4618      	mov	r0, r3
 800212e:	4621      	mov	r1, r4
 8002130:	f7fe fcca 	bl	8000ac8 <__aeabi_d2f>
 8002134:	4603      	mov	r3, r0
 8002136:	61fb      	str	r3, [r7, #28]
	*beta = theta2 / PI * 180;
 8002138:	69f8      	ldr	r0, [r7, #28]
 800213a:	f7fe f975 	bl	8000428 <__aeabi_f2d>
 800213e:	a33e      	add	r3, pc, #248	; (adr r3, 8002238 <inverseCinematic+0x2b8>)
 8002140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002144:	f7fe faf2 	bl	800072c <__aeabi_ddiv>
 8002148:	4603      	mov	r3, r0
 800214a:	460c      	mov	r4, r1
 800214c:	4618      	mov	r0, r3
 800214e:	4621      	mov	r1, r4
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	4b40      	ldr	r3, [pc, #256]	; (8002258 <inverseCinematic+0x2d8>)
 8002156:	f7fe f9bf 	bl	80004d8 <__aeabi_dmul>
 800215a:	4603      	mov	r3, r0
 800215c:	460c      	mov	r4, r1
 800215e:	4618      	mov	r0, r3
 8002160:	4621      	mov	r1, r4
 8002162:	f7fe fcb1 	bl	8000ac8 <__aeabi_d2f>
 8002166:	4602      	mov	r2, r0
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	601a      	str	r2, [r3, #0]

	//	Theta 3: Second Joint variable -> gamma
	float temp = sin(theta2b) * (r / lengthC);
 800216c:	6a38      	ldr	r0, [r7, #32]
 800216e:	f7fe f95b 	bl	8000428 <__aeabi_f2d>
 8002172:	4603      	mov	r3, r0
 8002174:	460c      	mov	r4, r1
 8002176:	4618      	mov	r0, r3
 8002178:	4621      	mov	r1, r4
 800217a:	f008 fa63 	bl	800a644 <sin>
 800217e:	4604      	mov	r4, r0
 8002180:	460d      	mov	r5, r1
 8002182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002184:	f7fe f950 	bl	8000428 <__aeabi_f2d>
 8002188:	a331      	add	r3, pc, #196	; (adr r3, 8002250 <inverseCinematic+0x2d0>)
 800218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218e:	f7fe facd 	bl	800072c <__aeabi_ddiv>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4620      	mov	r0, r4
 8002198:	4629      	mov	r1, r5
 800219a:	f7fe f99d 	bl	80004d8 <__aeabi_dmul>
 800219e:	4603      	mov	r3, r0
 80021a0:	460c      	mov	r4, r1
 80021a2:	4618      	mov	r0, r3
 80021a4:	4621      	mov	r1, r4
 80021a6:	f7fe fc8f 	bl	8000ac8 <__aeabi_d2f>
 80021aa:	4603      	mov	r3, r0
 80021ac:	61bb      	str	r3, [r7, #24]
	float theta3 = asin(abs(temp) > 1 ? round(temp) : temp);
 80021ae:	69b8      	ldr	r0, [r7, #24]
 80021b0:	f7fe ffae 	bl	8001110 <__aeabi_f2iz>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bfb8      	it	lt
 80021ba:	425b      	neglt	r3, r3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	dd0b      	ble.n	80021d8 <inverseCinematic+0x258>
 80021c0:	69b8      	ldr	r0, [r7, #24]
 80021c2:	f7fe f931 	bl	8000428 <__aeabi_f2d>
 80021c6:	4603      	mov	r3, r0
 80021c8:	460c      	mov	r4, r1
 80021ca:	4618      	mov	r0, r3
 80021cc:	4621      	mov	r1, r4
 80021ce:	f008 f9f3 	bl	800a5b8 <round>
 80021d2:	4603      	mov	r3, r0
 80021d4:	460c      	mov	r4, r1
 80021d6:	e004      	b.n	80021e2 <inverseCinematic+0x262>
 80021d8:	69b8      	ldr	r0, [r7, #24]
 80021da:	f7fe f925 	bl	8000428 <__aeabi_f2d>
 80021de:	4603      	mov	r3, r0
 80021e0:	460c      	mov	r4, r1
 80021e2:	4618      	mov	r0, r3
 80021e4:	4621      	mov	r1, r4
 80021e6:	f008 fabb 	bl	800a760 <asin>
 80021ea:	4603      	mov	r3, r0
 80021ec:	460c      	mov	r4, r1
 80021ee:	4618      	mov	r0, r3
 80021f0:	4621      	mov	r1, r4
 80021f2:	f7fe fc69 	bl	8000ac8 <__aeabi_d2f>
 80021f6:	4603      	mov	r3, r0
 80021f8:	617b      	str	r3, [r7, #20]
//	float epsilon = (PI / 2) - theta2;
	*gamma = theta3 / PI * 180;
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7fe f914 	bl	8000428 <__aeabi_f2d>
 8002200:	a30d      	add	r3, pc, #52	; (adr r3, 8002238 <inverseCinematic+0x2b8>)
 8002202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002206:	f7fe fa91 	bl	800072c <__aeabi_ddiv>
 800220a:	4603      	mov	r3, r0
 800220c:	460c      	mov	r4, r1
 800220e:	4618      	mov	r0, r3
 8002210:	4621      	mov	r1, r4
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <inverseCinematic+0x2d8>)
 8002218:	f7fe f95e 	bl	80004d8 <__aeabi_dmul>
 800221c:	4603      	mov	r3, r0
 800221e:	460c      	mov	r4, r1
 8002220:	4618      	mov	r0, r3
 8002222:	4621      	mov	r1, r4
 8002224:	f7fe fc50 	bl	8000ac8 <__aeabi_d2f>
 8002228:	4602      	mov	r2, r0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	601a      	str	r2, [r3, #0]
}
 800222e:	bf00      	nop
 8002230:	3738      	adds	r7, #56	; 0x38
 8002232:	46bd      	mov	sp, r7
 8002234:	bdb0      	pop	{r4, r5, r7, pc}
 8002236:	bf00      	nop
 8002238:	4d12d84a 	.word	0x4d12d84a
 800223c:	400921fb 	.word	0x400921fb
 8002240:	00000000 	.word	0x00000000
 8002244:	40b77640 	.word	0x40b77640
 8002248:	4d12d84a 	.word	0x4d12d84a
 800224c:	3ff921fb 	.word	0x3ff921fb
 8002250:	00000000 	.word	0x00000000
 8002254:	40536000 	.word	0x40536000
 8002258:	40668000 	.word	0x40668000
 800225c:	41dc0000 	.word	0x41dc0000
 8002260:	453d1000 	.word	0x453d1000
 8002264:	42dc0000 	.word	0x42dc0000

08002268 <setPosition>:

void setPosition(int leg, float x, float y, float z)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
	expectedPos[leg][0] = x;
 8002276:	4911      	ldr	r1, [pc, #68]	; (80022bc <setPosition+0x54>)
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	601a      	str	r2, [r3, #0]
	expectedPos[leg][1] = y;
 8002288:	490c      	ldr	r1, [pc, #48]	; (80022bc <setPosition+0x54>)
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	3304      	adds	r3, #4
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	601a      	str	r2, [r3, #0]
	expectedPos[leg][2] = z;
 800229c:	4907      	ldr	r1, [pc, #28]	; (80022bc <setPosition+0x54>)
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	3308      	adds	r3, #8
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	601a      	str	r2, [r3, #0]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	200002a0 	.word	0x200002a0

080022c0 <setStep>:

void setStep(int leg)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	// Check X axis
	float xStep = abs(expectedPos[leg][0] - actualPos[leg][0]) > 20 ? absoluteStep : (float)(fabs(expectedPos[leg][0] - actualPos[leg][0]));
 80022c8:	49b0      	ldr	r1, [pc, #704]	; (800258c <setStep+0x2cc>)
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	49ad      	ldr	r1, [pc, #692]	; (8002590 <setStep+0x2d0>)
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	f7fe fc41 	bl	8000b70 <__aeabi_fsub>
 80022ee:	4603      	mov	r3, r0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe ff0d 	bl	8001110 <__aeabi_f2iz>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bfb8      	it	lt
 80022fc:	425b      	neglt	r3, r3
 80022fe:	2b14      	cmp	r3, #20
 8002300:	dc16      	bgt.n	8002330 <setStep+0x70>
 8002302:	49a2      	ldr	r1, [pc, #648]	; (800258c <setStep+0x2cc>)
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	499f      	ldr	r1, [pc, #636]	; (8002590 <setStep+0x2d0>)
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4619      	mov	r1, r3
 8002324:	f7fe fc24 	bl	8000b70 <__aeabi_fsub>
 8002328:	4603      	mov	r3, r0
 800232a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800232e:	e000      	b.n	8002332 <setStep+0x72>
 8002330:	4b98      	ldr	r3, [pc, #608]	; (8002594 <setStep+0x2d4>)
 8002332:	617b      	str	r3, [r7, #20]
	if (expectedPos[leg][0] > actualPos[leg][0])
 8002334:	4995      	ldr	r1, [pc, #596]	; (800258c <setStep+0x2cc>)
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	4992      	ldr	r1, [pc, #584]	; (8002590 <setStep+0x2d0>)
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4619      	mov	r1, r3
 8002356:	f7fe fed1 	bl	80010fc <__aeabi_fcmpgt>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d016      	beq.n	800238e <setStep+0xce>
	{
		actualPos[leg][0] += xStep;
 8002360:	498b      	ldr	r1, [pc, #556]	; (8002590 <setStep+0x2d0>)
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6979      	ldr	r1, [r7, #20]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fbfe 	bl	8000b74 <__addsf3>
 8002378:	4603      	mov	r3, r0
 800237a:	4618      	mov	r0, r3
 800237c:	4984      	ldr	r1, [pc, #528]	; (8002590 <setStep+0x2d0>)
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	6018      	str	r0, [r3, #0]
 800238c:	e02b      	b.n	80023e6 <setStep+0x126>
	}
	else if (expectedPos[leg][0] < actualPos[leg][0])
 800238e:	497f      	ldr	r1, [pc, #508]	; (800258c <setStep+0x2cc>)
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	497c      	ldr	r1, [pc, #496]	; (8002590 <setStep+0x2d0>)
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4619      	mov	r1, r3
 80023b0:	f7fe fe86 	bl	80010c0 <__aeabi_fcmplt>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d015      	beq.n	80023e6 <setStep+0x126>
	{
		actualPos[leg][0] -= xStep;
 80023ba:	4975      	ldr	r1, [pc, #468]	; (8002590 <setStep+0x2d0>)
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6979      	ldr	r1, [r7, #20]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe fbcf 	bl	8000b70 <__aeabi_fsub>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4618      	mov	r0, r3
 80023d6:	496e      	ldr	r1, [pc, #440]	; (8002590 <setStep+0x2d0>)
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	6018      	str	r0, [r3, #0]
	}

	//	Check Y axis
	float yStep = abs(expectedPos[leg][1] - actualPos[leg][1]) > 20 ? absoluteStep : (float)fabs(expectedPos[leg][1] - actualPos[leg][1]);
 80023e6:	4969      	ldr	r1, [pc, #420]	; (800258c <setStep+0x2cc>)
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	3304      	adds	r3, #4
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	4965      	ldr	r1, [pc, #404]	; (8002590 <setStep+0x2d0>)
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	3304      	adds	r3, #4
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4619      	mov	r1, r3
 800240c:	f7fe fbb0 	bl	8000b70 <__aeabi_fsub>
 8002410:	4603      	mov	r3, r0
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe fe7c 	bl	8001110 <__aeabi_f2iz>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	bfb8      	it	lt
 800241e:	425b      	neglt	r3, r3
 8002420:	2b14      	cmp	r3, #20
 8002422:	dc18      	bgt.n	8002456 <setStep+0x196>
 8002424:	4959      	ldr	r1, [pc, #356]	; (800258c <setStep+0x2cc>)
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3304      	adds	r3, #4
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	4956      	ldr	r1, [pc, #344]	; (8002590 <setStep+0x2d0>)
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	3304      	adds	r3, #4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4619      	mov	r1, r3
 800244a:	f7fe fb91 	bl	8000b70 <__aeabi_fsub>
 800244e:	4603      	mov	r3, r0
 8002450:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002454:	e000      	b.n	8002458 <setStep+0x198>
 8002456:	4b4f      	ldr	r3, [pc, #316]	; (8002594 <setStep+0x2d4>)
 8002458:	613b      	str	r3, [r7, #16]
	if (expectedPos[leg][1] > actualPos[leg][1])
 800245a:	494c      	ldr	r1, [pc, #304]	; (800258c <setStep+0x2cc>)
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	3304      	adds	r3, #4
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	4948      	ldr	r1, [pc, #288]	; (8002590 <setStep+0x2d0>)
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	3304      	adds	r3, #4
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4619      	mov	r1, r3
 8002480:	f7fe fe3c 	bl	80010fc <__aeabi_fcmpgt>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d018      	beq.n	80024bc <setStep+0x1fc>
	{
		actualPos[leg][1] += yStep;
 800248a:	4941      	ldr	r1, [pc, #260]	; (8002590 <setStep+0x2d0>)
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	3304      	adds	r3, #4
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6939      	ldr	r1, [r7, #16]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fb68 	bl	8000b74 <__addsf3>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4618      	mov	r0, r3
 80024a8:	4939      	ldr	r1, [pc, #228]	; (8002590 <setStep+0x2d0>)
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	3304      	adds	r3, #4
 80024b8:	6018      	str	r0, [r3, #0]
 80024ba:	e02f      	b.n	800251c <setStep+0x25c>
	}
	else if (expectedPos[leg][1] < actualPos[leg][1])
 80024bc:	4933      	ldr	r1, [pc, #204]	; (800258c <setStep+0x2cc>)
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	3304      	adds	r3, #4
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	4930      	ldr	r1, [pc, #192]	; (8002590 <setStep+0x2d0>)
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	3304      	adds	r3, #4
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	f7fe fded 	bl	80010c0 <__aeabi_fcmplt>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d017      	beq.n	800251c <setStep+0x25c>
	{
		actualPos[leg][1] -= yStep;
 80024ec:	4928      	ldr	r1, [pc, #160]	; (8002590 <setStep+0x2d0>)
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	3304      	adds	r3, #4
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6939      	ldr	r1, [r7, #16]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe fb35 	bl	8000b70 <__aeabi_fsub>
 8002506:	4603      	mov	r3, r0
 8002508:	4618      	mov	r0, r3
 800250a:	4921      	ldr	r1, [pc, #132]	; (8002590 <setStep+0x2d0>)
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	3304      	adds	r3, #4
 800251a:	6018      	str	r0, [r3, #0]
	}

	//	Check Y axis
	float zStep = abs(expectedPos[leg][2] - actualPos[leg][2]) > 20 ? absoluteStep : (float)fabs(expectedPos[leg][2] - actualPos[leg][2]);
 800251c:	491b      	ldr	r1, [pc, #108]	; (800258c <setStep+0x2cc>)
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	3308      	adds	r3, #8
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	4918      	ldr	r1, [pc, #96]	; (8002590 <setStep+0x2d0>)
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	3308      	adds	r3, #8
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4619      	mov	r1, r3
 8002542:	f7fe fb15 	bl	8000b70 <__aeabi_fsub>
 8002546:	4603      	mov	r3, r0
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fde1 	bl	8001110 <__aeabi_f2iz>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	bfb8      	it	lt
 8002554:	425b      	neglt	r3, r3
 8002556:	2b14      	cmp	r3, #20
 8002558:	dc1e      	bgt.n	8002598 <setStep+0x2d8>
 800255a:	490c      	ldr	r1, [pc, #48]	; (800258c <setStep+0x2cc>)
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	3308      	adds	r3, #8
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	4908      	ldr	r1, [pc, #32]	; (8002590 <setStep+0x2d0>)
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	3308      	adds	r3, #8
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4619      	mov	r1, r3
 8002580:	f7fe faf6 	bl	8000b70 <__aeabi_fsub>
 8002584:	4603      	mov	r3, r0
 8002586:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800258a:	e006      	b.n	800259a <setStep+0x2da>
 800258c:	200002a0 	.word	0x200002a0
 8002590:	20000324 	.word	0x20000324
 8002594:	41a00000 	.word	0x41a00000
 8002598:	4b33      	ldr	r3, [pc, #204]	; (8002668 <setStep+0x3a8>)
 800259a:	60fb      	str	r3, [r7, #12]
	if (expectedPos[leg][2] > actualPos[leg][2])
 800259c:	4933      	ldr	r1, [pc, #204]	; (800266c <setStep+0x3ac>)
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	3308      	adds	r3, #8
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	4930      	ldr	r1, [pc, #192]	; (8002670 <setStep+0x3b0>)
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	3308      	adds	r3, #8
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	f7fe fd9b 	bl	80010fc <__aeabi_fcmpgt>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d018      	beq.n	80025fe <setStep+0x33e>
	{
		actualPos[leg][2] += zStep;
 80025cc:	4928      	ldr	r1, [pc, #160]	; (8002670 <setStep+0x3b0>)
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	3308      	adds	r3, #8
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68f9      	ldr	r1, [r7, #12]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fac7 	bl	8000b74 <__addsf3>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4618      	mov	r0, r3
 80025ea:	4921      	ldr	r1, [pc, #132]	; (8002670 <setStep+0x3b0>)
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	3308      	adds	r3, #8
 80025fa:	6018      	str	r0, [r3, #0]
	}
	else if (expectedPos[leg][2] < actualPos[leg][2])
	{
		actualPos[leg][2] -= zStep;
	}
}
 80025fc:	e030      	b.n	8002660 <setStep+0x3a0>
	else if (expectedPos[leg][2] < actualPos[leg][2])
 80025fe:	491b      	ldr	r1, [pc, #108]	; (800266c <setStep+0x3ac>)
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	3308      	adds	r3, #8
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	4917      	ldr	r1, [pc, #92]	; (8002670 <setStep+0x3b0>)
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	3308      	adds	r3, #8
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4619      	mov	r1, r3
 8002624:	f7fe fd4c 	bl	80010c0 <__aeabi_fcmplt>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d100      	bne.n	8002630 <setStep+0x370>
}
 800262e:	e017      	b.n	8002660 <setStep+0x3a0>
		actualPos[leg][2] -= zStep;
 8002630:	490f      	ldr	r1, [pc, #60]	; (8002670 <setStep+0x3b0>)
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	3308      	adds	r3, #8
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68f9      	ldr	r1, [r7, #12]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fa93 	bl	8000b70 <__aeabi_fsub>
 800264a:	4603      	mov	r3, r0
 800264c:	4618      	mov	r0, r3
 800264e:	4908      	ldr	r1, [pc, #32]	; (8002670 <setStep+0x3b0>)
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	3308      	adds	r3, #8
 800265e:	6018      	str	r0, [r3, #0]
}
 8002660:	bf00      	nop
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	41a00000 	.word	0x41a00000
 800266c:	200002a0 	.word	0x200002a0
 8002670:	20000324 	.word	0x20000324

08002674 <pos2Angle>:

void pos2Angle(float position[4][3], int homing)
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b08d      	sub	sp, #52	; 0x34
 8002678:	af02      	add	r7, sp, #8
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
	uint16_t refAngles[SERVO_COUNT];
	static float alpha, beta, gamma;
	int leg;
	for (leg = 0; leg < LEG_COUNT; leg++)
 800267e:	2300      	movs	r3, #0
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
 8002682:	e0a5      	b.n	80027d0 <pos2Angle+0x15c>
	{
		uint8_t bottomServo = ((leg + 1) * 3) - 3;
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	0052      	lsls	r2, r2, #1
 800268c:	4413      	add	r3, r2
 800268e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t middleServo = ((leg + 1) * 3) - 2;
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	3301      	adds	r3, #1
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	0052      	lsls	r2, r2, #1
 800269c:	4413      	add	r3, r2
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	3b02      	subs	r3, #2
 80026a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t topServo = ((leg + 1) * 3) - 1;
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	3301      	adds	r3, #1
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	0052      	lsls	r2, r2, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		// Calculate servo angles from cartesian variables with inverse cinematic
		inverseCinematic(&alpha, &beta, &gamma, position[leg][0], position[leg][1], position[leg][2]);
 80026ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	461a      	mov	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	461a      	mov	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4413      	add	r3, r2
 80026dc:	6859      	ldr	r1, [r3, #4]
 80026de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	461a      	mov	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	9100      	str	r1, [sp, #0]
 80026f4:	4603      	mov	r3, r0
 80026f6:	4a3f      	ldr	r2, [pc, #252]	; (80027f4 <pos2Angle+0x180>)
 80026f8:	493f      	ldr	r1, [pc, #252]	; (80027f8 <pos2Angle+0x184>)
 80026fa:	4840      	ldr	r0, [pc, #256]	; (80027fc <pos2Angle+0x188>)
 80026fc:	f7ff fc40 	bl	8001f80 <inverseCinematic>
		refAngles[bottomServo] = (uint16_t)alpha;
 8002700:	4b3e      	ldr	r3, [pc, #248]	; (80027fc <pos2Angle+0x188>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe fd27 	bl	800115c <__aeabi_f2uiz>
 800270e:	4603      	mov	r3, r0
 8002710:	b29a      	uxth	r2, r3
 8002712:	0063      	lsls	r3, r4, #1
 8002714:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002718:	440b      	add	r3, r1
 800271a:	f823 2c20 	strh.w	r2, [r3, #-32]
		refAngles[middleServo] = (uint16_t)beta;
 800271e:	4b36      	ldr	r3, [pc, #216]	; (80027f8 <pos2Angle+0x184>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f897 4022 	ldrb.w	r4, [r7, #34]	; 0x22
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fd18 	bl	800115c <__aeabi_f2uiz>
 800272c:	4603      	mov	r3, r0
 800272e:	b29a      	uxth	r2, r3
 8002730:	0063      	lsls	r3, r4, #1
 8002732:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002736:	440b      	add	r3, r1
 8002738:	f823 2c20 	strh.w	r2, [r3, #-32]
		refAngles[topServo] = (uint16_t)gamma;
 800273c:	4b2d      	ldr	r3, [pc, #180]	; (80027f4 <pos2Angle+0x180>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f897 4021 	ldrb.w	r4, [r7, #33]	; 0x21
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fd09 	bl	800115c <__aeabi_f2uiz>
 800274a:	4603      	mov	r3, r0
 800274c:	b29a      	uxth	r2, r3
 800274e:	0063      	lsls	r3, r4, #1
 8002750:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002754:	440b      	add	r3, r1
 8002756:	f823 2c20 	strh.w	r2, [r3, #-32]

		// Update actual Position
		if (homing)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d034      	beq.n	80027ca <pos2Angle+0x156>
		{
			actualPos[leg][0] = position[leg][0];
 8002760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	461a      	mov	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4413      	add	r3, r2
 8002770:	6819      	ldr	r1, [r3, #0]
 8002772:	4823      	ldr	r0, [pc, #140]	; (8002800 <pos2Angle+0x18c>)
 8002774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002776:	4613      	mov	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4403      	add	r3, r0
 8002780:	6019      	str	r1, [r3, #0]
			actualPos[leg][1] = position[leg][1];
 8002782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	461a      	mov	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	6859      	ldr	r1, [r3, #4]
 8002794:	481a      	ldr	r0, [pc, #104]	; (8002800 <pos2Angle+0x18c>)
 8002796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002798:	4613      	mov	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4403      	add	r3, r0
 80027a2:	3304      	adds	r3, #4
 80027a4:	6019      	str	r1, [r3, #0]
			actualPos[leg][2] = position[leg][2];
 80027a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	461a      	mov	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	6899      	ldr	r1, [r3, #8]
 80027b8:	4811      	ldr	r0, [pc, #68]	; (8002800 <pos2Angle+0x18c>)
 80027ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4403      	add	r3, r0
 80027c6:	3308      	adds	r3, #8
 80027c8:	6019      	str	r1, [r3, #0]
	for (leg = 0; leg < LEG_COUNT; leg++)
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	3301      	adds	r3, #1
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	f77f af56 	ble.w	8002684 <pos2Angle+0x10>
		}
	}
	checkLimits(refAngles);
 80027d8:	f107 0308 	add.w	r3, r7, #8
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 f956 	bl	8002a8e <checkLimits>
	setServo(refAngles);
 80027e2:	f107 0308 	add.w	r3, r7, #8
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f8b7 	bl	800295a <setServo>
}
 80027ec:	bf00      	nop
 80027ee:	372c      	adds	r7, #44	; 0x2c
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd90      	pop	{r4, r7, pc}
 80027f4:	2000023c 	.word	0x2000023c
 80027f8:	20000238 	.word	0x20000238
 80027fc:	20000234 	.word	0x20000234
 8002800:	20000324 	.word	0x20000324

08002804 <servoMovement>:

void servoMovement()
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08e      	sub	sp, #56	; 0x38
 8002808:	af00      	add	r7, sp, #0
	float tempPos[4][3];
	int i, j;
	for (i = 0; i < LEG_COUNT; i++)
 800280a:	2300      	movs	r3, #0
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
 800280e:	e020      	b.n	8002852 <servoMovement+0x4e>
	{
		for (j = 0; j < 3; j++)
 8002810:	2300      	movs	r3, #0
 8002812:	633b      	str	r3, [r7, #48]	; 0x30
 8002814:	e017      	b.n	8002846 <servoMovement+0x42>
		{
			tempPos[i][j] = actualPos[i][j];
 8002816:	4915      	ldr	r1, [pc, #84]	; (800286c <servoMovement+0x68>)
 8002818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002822:	4413      	add	r3, r2
 8002824:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002828:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800283a:	4413      	add	r3, r2
 800283c:	f843 1c38 	str.w	r1, [r3, #-56]
		for (j = 0; j < 3; j++)
 8002840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002842:	3301      	adds	r3, #1
 8002844:	633b      	str	r3, [r7, #48]	; 0x30
 8002846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002848:	2b02      	cmp	r3, #2
 800284a:	dde4      	ble.n	8002816 <servoMovement+0x12>
	for (i = 0; i < LEG_COUNT; i++)
 800284c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284e:	3301      	adds	r3, #1
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
 8002852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002854:	2b03      	cmp	r3, #3
 8002856:	dddb      	ble.n	8002810 <servoMovement+0xc>
		}
	}
	pos2Angle(tempPos, 0);
 8002858:	463b      	mov	r3, r7
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff09 	bl	8002674 <pos2Angle>
}
 8002862:	bf00      	nop
 8002864:	3738      	adds	r7, #56	; 0x38
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000324 	.word	0x20000324

08002870 <waitReach>:

void waitReach(int leg){
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	while(expectedPos[leg][0] != actualPos[leg][0] || expectedPos[leg][1] != actualPos[leg][1] \
 8002878:	e00b      	b.n	8002892 <waitReach+0x22>
			|| expectedPos[leg][2] != actualPos[leg][2])
	{
		setStep(leg);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff fd20 	bl	80022c0 <setStep>
		servoMovement();
 8002880:	f7ff ffc0 	bl	8002804 <servoMovement>
		if (speed == legSpeed)
 8002884:	4b28      	ldr	r3, [pc, #160]	; (8002928 <waitReach+0xb8>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <waitReach+0x22>
		{
			HAL_Delay(40);
 800288c:	2028      	movs	r0, #40	; 0x28
 800288e:	f001 fc15 	bl	80040bc <HAL_Delay>
	while(expectedPos[leg][0] != actualPos[leg][0] || expectedPos[leg][1] != actualPos[leg][1] \
 8002892:	4926      	ldr	r1, [pc, #152]	; (800292c <waitReach+0xbc>)
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	4923      	ldr	r1, [pc, #140]	; (8002930 <waitReach+0xc0>)
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4619      	mov	r1, r3
 80028b4:	f7fe fbfa 	bl	80010ac <__aeabi_fcmpeq>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0dd      	beq.n	800287a <waitReach+0xa>
 80028be:	491b      	ldr	r1, [pc, #108]	; (800292c <waitReach+0xbc>)
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	3304      	adds	r3, #4
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	4917      	ldr	r1, [pc, #92]	; (8002930 <waitReach+0xc0>)
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	3304      	adds	r3, #4
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4619      	mov	r1, r3
 80028e4:	f7fe fbe2 	bl	80010ac <__aeabi_fcmpeq>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0c5      	beq.n	800287a <waitReach+0xa>
			|| expectedPos[leg][2] != actualPos[leg][2])
 80028ee:	490f      	ldr	r1, [pc, #60]	; (800292c <waitReach+0xbc>)
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	3308      	adds	r3, #8
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	490b      	ldr	r1, [pc, #44]	; (8002930 <waitReach+0xc0>)
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	3308      	adds	r3, #8
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4619      	mov	r1, r3
 8002914:	f7fe fbca 	bl	80010ac <__aeabi_fcmpeq>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0ad      	beq.n	800287a <waitReach+0xa>
		}
	}
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000322 	.word	0x20000322
 800292c:	200002a0 	.word	0x200002a0
 8002930:	20000324 	.word	0x20000324

08002934 <waitAllReach>:

void waitAllReach()
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < LEG_COUNT; i++)
 800293a:	2300      	movs	r3, #0
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	e005      	b.n	800294c <waitAllReach+0x18>
	{
		waitReach(i);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ff95 	bl	8002870 <waitReach>
	for (i = 0; i < LEG_COUNT; i++)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3301      	adds	r3, #1
 800294a:	607b      	str	r3, [r7, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b03      	cmp	r3, #3
 8002950:	ddf6      	ble.n	8002940 <waitAllReach+0xc>
	}
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <setServo>:

void setServo(uint16_t *angles)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
	int leg, servo;
	for (leg = 0; leg < LEG_COUNT; leg++)
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	e077      	b.n	8002a58 <setServo+0xfe>
	{
		uint8_t bottomServo = ((leg + 1) * 3) - 3;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	0052      	lsls	r2, r2, #1
 8002970:	4413      	add	r3, r2
 8002972:	73fb      	strb	r3, [r7, #15]
		uint8_t middleServo = ((leg + 1) * 3) - 2;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3301      	adds	r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	0052      	lsls	r2, r2, #1
 800297e:	4413      	add	r3, r2
 8002980:	b2db      	uxtb	r3, r3
 8002982:	3b02      	subs	r3, #2
 8002984:	73bb      	strb	r3, [r7, #14]
		uint8_t topServo = ((leg + 1) * 3) - 1;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	3301      	adds	r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	0052      	lsls	r2, r2, #1
 8002990:	4413      	add	r3, r2
 8002992:	b2db      	uxtb	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	737b      	strb	r3, [r7, #13]
		//	Set angles for each servo
		if (leg == 0)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d11a      	bne.n	80029d4 <setServo+0x7a>
		{
			angles[bottomServo] = 180 - angles[bottomServo];
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	881a      	ldrh	r2, [r3, #0]
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	440b      	add	r3, r1
 80029b0:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 80029b4:	b292      	uxth	r2, r2
 80029b6:	801a      	strh	r2, [r3, #0]
			angles[topServo] = 180 - angles[topServo];
 80029b8:	7b7b      	ldrb	r3, [r7, #13]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	4413      	add	r3, r2
 80029c0:	881a      	ldrh	r2, [r3, #0]
 80029c2:	7b7b      	ldrb	r3, [r7, #13]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	440b      	add	r3, r1
 80029ca:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 80029ce:	b292      	uxth	r2, r2
 80029d0:	801a      	strh	r2, [r3, #0]
 80029d2:	e03e      	b.n	8002a52 <setServo+0xf8>
		}
		else if (leg == 1)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d10d      	bne.n	80029f6 <setServo+0x9c>
		{
			angles[middleServo] = 180 - angles[middleServo];
 80029da:	7bbb      	ldrb	r3, [r7, #14]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	881a      	ldrh	r2, [r3, #0]
 80029e4:	7bbb      	ldrb	r3, [r7, #14]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	440b      	add	r3, r1
 80029ec:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 80029f0:	b292      	uxth	r2, r2
 80029f2:	801a      	strh	r2, [r3, #0]
 80029f4:	e02d      	b.n	8002a52 <setServo+0xf8>
		}
		else if (leg == 2)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d11a      	bne.n	8002a32 <setServo+0xd8>
		{
			angles[bottomServo] = 180 - angles[bottomServo];
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	4413      	add	r3, r2
 8002a04:	881a      	ldrh	r2, [r3, #0]
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	440b      	add	r3, r1
 8002a0e:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8002a12:	b292      	uxth	r2, r2
 8002a14:	801a      	strh	r2, [r3, #0]
			angles[topServo] = 180 - angles[topServo];
 8002a16:	7b7b      	ldrb	r3, [r7, #13]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	881a      	ldrh	r2, [r3, #0]
 8002a20:	7b7b      	ldrb	r3, [r7, #13]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	440b      	add	r3, r1
 8002a28:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8002a2c:	b292      	uxth	r2, r2
 8002a2e:	801a      	strh	r2, [r3, #0]
 8002a30:	e00f      	b.n	8002a52 <setServo+0xf8>
		}
		else if (leg == 3)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d10c      	bne.n	8002a52 <setServo+0xf8>
		{
			angles[middleServo] = 180 - angles[middleServo];
 8002a38:	7bbb      	ldrb	r3, [r7, #14]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	881a      	ldrh	r2, [r3, #0]
 8002a42:	7bbb      	ldrb	r3, [r7, #14]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	440b      	add	r3, r1
 8002a4a:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8002a4e:	b292      	uxth	r2, r2
 8002a50:	801a      	strh	r2, [r3, #0]
	for (leg = 0; leg < LEG_COUNT; leg++)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	3301      	adds	r3, #1
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	dd84      	ble.n	8002968 <setServo+0xe>
		}
	}
	for (servo = 0; servo < SERVO_COUNT; servo++)
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	e00d      	b.n	8002a80 <setServo+0x126>
	{
		PCA9685_SetServoAngle(servo, angles[servo], 0);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	b2d8      	uxtb	r0, r3
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	4413      	add	r3, r2
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	2200      	movs	r2, #0
 8002a74:	4619      	mov	r1, r3
 8002a76:	f7ff fa1f 	bl	8001eb8 <PCA9685_SetServoAngle>
	for (servo = 0; servo < SERVO_COUNT; servo++)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	2b0b      	cmp	r3, #11
 8002a84:	ddee      	ble.n	8002a64 <setServo+0x10a>
	}
}
 8002a86:	bf00      	nop
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <checkLimits>:

void checkLimits(uint16_t *angles)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < SERVO_COUNT; i++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	e01a      	b.n	8002ad2 <checkLimits+0x44>
	{
		angles[i] = angles[i] > 180 ? 180 : angles[i];
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	881a      	ldrh	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	440b      	add	r3, r1
 8002aae:	2ab4      	cmp	r2, #180	; 0xb4
 8002ab0:	bf28      	it	cs
 8002ab2:	22b4      	movcs	r2, #180	; 0xb4
 8002ab4:	b292      	uxth	r2, r2
 8002ab6:	801a      	strh	r2, [r3, #0]
		angles[i] = angles[i] < 0 ? 0 : angles[i];
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	441a      	add	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	440b      	add	r3, r1
 8002ac8:	8812      	ldrh	r2, [r2, #0]
 8002aca:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < SERVO_COUNT; i++)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b0b      	cmp	r3, #11
 8002ad6:	dde1      	ble.n	8002a9c <checkLimits+0xe>
	}
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
	...

08002ae4 <forward_walk>:

void forward_walk()
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
	speed = legSpeed;
 8002ae8:	4b5f      	ldr	r3, [pc, #380]	; (8002c68 <forward_walk+0x184>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
	if (actualPos[2][1] == yMax)
 8002aee:	4b5f      	ldr	r3, [pc, #380]	; (8002c6c <forward_walk+0x188>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	495f      	ldr	r1, [pc, #380]	; (8002c70 <forward_walk+0x18c>)
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fe fad9 	bl	80010ac <__aeabi_fcmpeq>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d058      	beq.n	8002bb2 <forward_walk+0xce>
	{
		//	Legs 1 & 3 move
		//	Leg 3 moves to the front
		setPosition(2, xRef, yMax, zRef);
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	4a5a      	ldr	r2, [pc, #360]	; (8002c70 <forward_walk+0x18c>)
 8002b06:	f04f 0100 	mov.w	r1, #0
 8002b0a:	2002      	movs	r0, #2
 8002b0c:	f7ff fbac 	bl	8002268 <setPosition>
		waitReach(2);
 8002b10:	2002      	movs	r0, #2
 8002b12:	f7ff fead 	bl	8002870 <waitReach>
		setPosition(2, xmidMax, ymidMin, zRef);
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	4a56      	ldr	r2, [pc, #344]	; (8002c74 <forward_walk+0x190>)
 8002b1c:	4956      	ldr	r1, [pc, #344]	; (8002c78 <forward_walk+0x194>)
 8002b1e:	2002      	movs	r0, #2
 8002b20:	f7ff fba2 	bl	8002268 <setPosition>
		waitReach(2);
 8002b24:	2002      	movs	r0, #2
 8002b26:	f7ff fea3 	bl	8002870 <waitReach>
		setPosition(2, xmidMax, ymidMin, zMin);
 8002b2a:	4b54      	ldr	r3, [pc, #336]	; (8002c7c <forward_walk+0x198>)
 8002b2c:	4a51      	ldr	r2, [pc, #324]	; (8002c74 <forward_walk+0x190>)
 8002b2e:	4952      	ldr	r1, [pc, #328]	; (8002c78 <forward_walk+0x194>)
 8002b30:	2002      	movs	r0, #2
 8002b32:	f7ff fb99 	bl	8002268 <setPosition>
		waitReach(2);
 8002b36:	2002      	movs	r0, #2
 8002b38:	f7ff fe9a 	bl	8002870 <waitReach>

		//	Body movement
		setPosition(0, xmidMax, ymidMin, zMin);
 8002b3c:	4b4f      	ldr	r3, [pc, #316]	; (8002c7c <forward_walk+0x198>)
 8002b3e:	4a4d      	ldr	r2, [pc, #308]	; (8002c74 <forward_walk+0x190>)
 8002b40:	494d      	ldr	r1, [pc, #308]	; (8002c78 <forward_walk+0x194>)
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7ff fb90 	bl	8002268 <setPosition>
		setPosition(1, xRef, yMax, zMin);
 8002b48:	4b4c      	ldr	r3, [pc, #304]	; (8002c7c <forward_walk+0x198>)
 8002b4a:	4a49      	ldr	r2, [pc, #292]	; (8002c70 <forward_walk+0x18c>)
 8002b4c:	f04f 0100 	mov.w	r1, #0
 8002b50:	2001      	movs	r0, #1
 8002b52:	f7ff fb89 	bl	8002268 <setPosition>
		setPosition(2, xMid, yMid, zMin);
 8002b56:	4b49      	ldr	r3, [pc, #292]	; (8002c7c <forward_walk+0x198>)
 8002b58:	4a49      	ldr	r2, [pc, #292]	; (8002c80 <forward_walk+0x19c>)
 8002b5a:	4949      	ldr	r1, [pc, #292]	; (8002c80 <forward_walk+0x19c>)
 8002b5c:	2002      	movs	r0, #2
 8002b5e:	f7ff fb83 	bl	8002268 <setPosition>
		setPosition(3, xMid, yMid, zMin);
 8002b62:	4b46      	ldr	r3, [pc, #280]	; (8002c7c <forward_walk+0x198>)
 8002b64:	4a46      	ldr	r2, [pc, #280]	; (8002c80 <forward_walk+0x19c>)
 8002b66:	4946      	ldr	r1, [pc, #280]	; (8002c80 <forward_walk+0x19c>)
 8002b68:	2003      	movs	r0, #3
 8002b6a:	f7ff fb7d 	bl	8002268 <setPosition>
		waitAllReach();
 8002b6e:	f7ff fee1 	bl	8002934 <waitAllReach>

//		//	Leg 1 moves to the front
		setPosition(0, xMid, yMid, 0);
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	4a42      	ldr	r2, [pc, #264]	; (8002c80 <forward_walk+0x19c>)
 8002b78:	4941      	ldr	r1, [pc, #260]	; (8002c80 <forward_walk+0x19c>)
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7ff fb74 	bl	8002268 <setPosition>
		waitReach(0);
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7ff fe75 	bl	8002870 <waitReach>
		setPosition(0, xRef, yMax, zRef);
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	4a39      	ldr	r2, [pc, #228]	; (8002c70 <forward_walk+0x18c>)
 8002b8c:	f04f 0100 	mov.w	r1, #0
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7ff fb69 	bl	8002268 <setPosition>
		waitReach(0);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7ff fe6a 	bl	8002870 <waitReach>
		setPosition(0, xRef, yMax, zMin);
 8002b9c:	4b37      	ldr	r3, [pc, #220]	; (8002c7c <forward_walk+0x198>)
 8002b9e:	4a34      	ldr	r2, [pc, #208]	; (8002c70 <forward_walk+0x18c>)
 8002ba0:	f04f 0100 	mov.w	r1, #0
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f7ff fb5f 	bl	8002268 <setPosition>
		waitReach(0);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7ff fe60 	bl	8002870 <waitReach>
		setPosition(3, xRef, yMax, zRef);
		waitReach(3);
		setPosition(3, xRef, yMax, zMin);
		waitReach(3);
	}
}
 8002bb0:	e057      	b.n	8002c62 <forward_walk+0x17e>
		setPosition(1, xRef, yMax, zRef);
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	4a2e      	ldr	r2, [pc, #184]	; (8002c70 <forward_walk+0x18c>)
 8002bb8:	f04f 0100 	mov.w	r1, #0
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f7ff fb53 	bl	8002268 <setPosition>
		waitReach(1);
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	f7ff fe54 	bl	8002870 <waitReach>
		setPosition(1, xmidMax, ymidMin, zRef);
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	4a29      	ldr	r2, [pc, #164]	; (8002c74 <forward_walk+0x190>)
 8002bce:	492a      	ldr	r1, [pc, #168]	; (8002c78 <forward_walk+0x194>)
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	f7ff fb49 	bl	8002268 <setPosition>
		waitReach(1);
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f7ff fe4a 	bl	8002870 <waitReach>
		setPosition(1, xmidMax, ymidMin, zMin);
 8002bdc:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <forward_walk+0x198>)
 8002bde:	4a25      	ldr	r2, [pc, #148]	; (8002c74 <forward_walk+0x190>)
 8002be0:	4925      	ldr	r1, [pc, #148]	; (8002c78 <forward_walk+0x194>)
 8002be2:	2001      	movs	r0, #1
 8002be4:	f7ff fb40 	bl	8002268 <setPosition>
		waitReach(1);
 8002be8:	2001      	movs	r0, #1
 8002bea:	f7ff fe41 	bl	8002870 <waitReach>
		setPosition(0, xMid, yMid, zMin);
 8002bee:	4b23      	ldr	r3, [pc, #140]	; (8002c7c <forward_walk+0x198>)
 8002bf0:	4a23      	ldr	r2, [pc, #140]	; (8002c80 <forward_walk+0x19c>)
 8002bf2:	4923      	ldr	r1, [pc, #140]	; (8002c80 <forward_walk+0x19c>)
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7ff fb37 	bl	8002268 <setPosition>
		setPosition(1, xMid, yMid, zMin);
 8002bfa:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <forward_walk+0x198>)
 8002bfc:	4a20      	ldr	r2, [pc, #128]	; (8002c80 <forward_walk+0x19c>)
 8002bfe:	4920      	ldr	r1, [pc, #128]	; (8002c80 <forward_walk+0x19c>)
 8002c00:	2001      	movs	r0, #1
 8002c02:	f7ff fb31 	bl	8002268 <setPosition>
		setPosition(2, xRef, yMax, zMin);
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <forward_walk+0x198>)
 8002c08:	4a19      	ldr	r2, [pc, #100]	; (8002c70 <forward_walk+0x18c>)
 8002c0a:	f04f 0100 	mov.w	r1, #0
 8002c0e:	2002      	movs	r0, #2
 8002c10:	f7ff fb2a 	bl	8002268 <setPosition>
		setPosition(3, xmidMax, ymidMin, zMin);
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <forward_walk+0x198>)
 8002c16:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <forward_walk+0x190>)
 8002c18:	4917      	ldr	r1, [pc, #92]	; (8002c78 <forward_walk+0x194>)
 8002c1a:	2003      	movs	r0, #3
 8002c1c:	f7ff fb24 	bl	8002268 <setPosition>
		waitAllReach();
 8002c20:	f7ff fe88 	bl	8002934 <waitAllReach>
		setPosition(3, xMid, yMid, zRef);
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	4a15      	ldr	r2, [pc, #84]	; (8002c80 <forward_walk+0x19c>)
 8002c2a:	4915      	ldr	r1, [pc, #84]	; (8002c80 <forward_walk+0x19c>)
 8002c2c:	2003      	movs	r0, #3
 8002c2e:	f7ff fb1b 	bl	8002268 <setPosition>
		waitReach(3);
 8002c32:	2003      	movs	r0, #3
 8002c34:	f7ff fe1c 	bl	8002870 <waitReach>
		setPosition(3, xRef, yMax, zRef);
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	4a0c      	ldr	r2, [pc, #48]	; (8002c70 <forward_walk+0x18c>)
 8002c3e:	f04f 0100 	mov.w	r1, #0
 8002c42:	2003      	movs	r0, #3
 8002c44:	f7ff fb10 	bl	8002268 <setPosition>
		waitReach(3);
 8002c48:	2003      	movs	r0, #3
 8002c4a:	f7ff fe11 	bl	8002870 <waitReach>
		setPosition(3, xRef, yMax, zMin);
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <forward_walk+0x198>)
 8002c50:	4a07      	ldr	r2, [pc, #28]	; (8002c70 <forward_walk+0x18c>)
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	2003      	movs	r0, #3
 8002c58:	f7ff fb06 	bl	8002268 <setPosition>
		waitReach(3);
 8002c5c:	2003      	movs	r0, #3
 8002c5e:	f7ff fe07 	bl	8002870 <waitReach>
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000322 	.word	0x20000322
 8002c6c:	20000324 	.word	0x20000324
 8002c70:	42a50000 	.word	0x42a50000
 8002c74:	42257ae1 	.word	0x42257ae1
 8002c78:	428ebd71 	.word	0x428ebd71
 8002c7c:	c29b0000 	.word	0xc29b0000
 8002c80:	426951ec 	.word	0x426951ec

08002c84 <backward_walk>:

void backward_walk()
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
	speed = legSpeed;
 8002c88:	4b5f      	ldr	r3, [pc, #380]	; (8002e08 <backward_walk+0x184>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
	if (actualPos[2][1] == yMax)
 8002c8e:	4b5f      	ldr	r3, [pc, #380]	; (8002e0c <backward_walk+0x188>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	495f      	ldr	r1, [pc, #380]	; (8002e10 <backward_walk+0x18c>)
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe fa09 	bl	80010ac <__aeabi_fcmpeq>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d058      	beq.n	8002d52 <backward_walk+0xce>
	{
		//	Legs 2 & 4 move
		//	Leg 2 moves to the front
		setPosition(3, xRef, yMax, zRef);
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	4a5a      	ldr	r2, [pc, #360]	; (8002e10 <backward_walk+0x18c>)
 8002ca6:	f04f 0100 	mov.w	r1, #0
 8002caa:	2003      	movs	r0, #3
 8002cac:	f7ff fadc 	bl	8002268 <setPosition>
		waitReach(3);
 8002cb0:	2003      	movs	r0, #3
 8002cb2:	f7ff fddd 	bl	8002870 <waitReach>
		setPosition(3, xmidMax, ymidMin, zRef);
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	4a56      	ldr	r2, [pc, #344]	; (8002e14 <backward_walk+0x190>)
 8002cbc:	4956      	ldr	r1, [pc, #344]	; (8002e18 <backward_walk+0x194>)
 8002cbe:	2003      	movs	r0, #3
 8002cc0:	f7ff fad2 	bl	8002268 <setPosition>
		waitReach(3);
 8002cc4:	2003      	movs	r0, #3
 8002cc6:	f7ff fdd3 	bl	8002870 <waitReach>
		setPosition(3, xmidMax, ymidMin, zMin);
 8002cca:	4b54      	ldr	r3, [pc, #336]	; (8002e1c <backward_walk+0x198>)
 8002ccc:	4a51      	ldr	r2, [pc, #324]	; (8002e14 <backward_walk+0x190>)
 8002cce:	4952      	ldr	r1, [pc, #328]	; (8002e18 <backward_walk+0x194>)
 8002cd0:	2003      	movs	r0, #3
 8002cd2:	f7ff fac9 	bl	8002268 <setPosition>
		waitReach(3);
 8002cd6:	2003      	movs	r0, #3
 8002cd8:	f7ff fdca 	bl	8002870 <waitReach>

		//	Body movement
		setPosition(0, xRef, yMax, zMin);
 8002cdc:	4b4f      	ldr	r3, [pc, #316]	; (8002e1c <backward_walk+0x198>)
 8002cde:	4a4c      	ldr	r2, [pc, #304]	; (8002e10 <backward_walk+0x18c>)
 8002ce0:	f04f 0100 	mov.w	r1, #0
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7ff fabf 	bl	8002268 <setPosition>
		setPosition(1, xmidMax, ymidMin, zMin);
 8002cea:	4b4c      	ldr	r3, [pc, #304]	; (8002e1c <backward_walk+0x198>)
 8002cec:	4a49      	ldr	r2, [pc, #292]	; (8002e14 <backward_walk+0x190>)
 8002cee:	494a      	ldr	r1, [pc, #296]	; (8002e18 <backward_walk+0x194>)
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	f7ff fab9 	bl	8002268 <setPosition>
		setPosition(2,  xMid, yMid, zMin);
 8002cf6:	4b49      	ldr	r3, [pc, #292]	; (8002e1c <backward_walk+0x198>)
 8002cf8:	4a49      	ldr	r2, [pc, #292]	; (8002e20 <backward_walk+0x19c>)
 8002cfa:	4949      	ldr	r1, [pc, #292]	; (8002e20 <backward_walk+0x19c>)
 8002cfc:	2002      	movs	r0, #2
 8002cfe:	f7ff fab3 	bl	8002268 <setPosition>
		setPosition(3, xMid, yMid, zMin);
 8002d02:	4b46      	ldr	r3, [pc, #280]	; (8002e1c <backward_walk+0x198>)
 8002d04:	4a46      	ldr	r2, [pc, #280]	; (8002e20 <backward_walk+0x19c>)
 8002d06:	4946      	ldr	r1, [pc, #280]	; (8002e20 <backward_walk+0x19c>)
 8002d08:	2003      	movs	r0, #3
 8002d0a:	f7ff faad 	bl	8002268 <setPosition>
		waitAllReach();
 8002d0e:	f7ff fe11 	bl	8002934 <waitAllReach>

		//	Leg 4 moves to the front
		setPosition(1, xMid, yMid, zRef);
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	4a42      	ldr	r2, [pc, #264]	; (8002e20 <backward_walk+0x19c>)
 8002d18:	4941      	ldr	r1, [pc, #260]	; (8002e20 <backward_walk+0x19c>)
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	f7ff faa4 	bl	8002268 <setPosition>
		waitReach(1);
 8002d20:	2001      	movs	r0, #1
 8002d22:	f7ff fda5 	bl	8002870 <waitReach>
		setPosition(1, xRef, yMax, xRef);
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	4a39      	ldr	r2, [pc, #228]	; (8002e10 <backward_walk+0x18c>)
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	2001      	movs	r0, #1
 8002d32:	f7ff fa99 	bl	8002268 <setPosition>
		waitReach(1);
 8002d36:	2001      	movs	r0, #1
 8002d38:	f7ff fd9a 	bl	8002870 <waitReach>
		setPosition(1, xRef, yMax, zMin);
 8002d3c:	4b37      	ldr	r3, [pc, #220]	; (8002e1c <backward_walk+0x198>)
 8002d3e:	4a34      	ldr	r2, [pc, #208]	; (8002e10 <backward_walk+0x18c>)
 8002d40:	f04f 0100 	mov.w	r1, #0
 8002d44:	2001      	movs	r0, #1
 8002d46:	f7ff fa8f 	bl	8002268 <setPosition>
		waitReach(1);
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	f7ff fd90 	bl	8002870 <waitReach>
		setPosition(2, xRef, yMax, zRef);
		waitReach(2);
		setPosition(2, xRef, yMax, zMin);
		waitReach(2);
	}
}
 8002d50:	e057      	b.n	8002e02 <backward_walk+0x17e>
		setPosition(0, xRef, yMax, zRef);
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	4a2e      	ldr	r2, [pc, #184]	; (8002e10 <backward_walk+0x18c>)
 8002d58:	f04f 0100 	mov.w	r1, #0
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f7ff fa83 	bl	8002268 <setPosition>
		waitReach(0);
 8002d62:	2000      	movs	r0, #0
 8002d64:	f7ff fd84 	bl	8002870 <waitReach>
		setPosition(0, xmidMax, ymidMin, zRef);
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	4a29      	ldr	r2, [pc, #164]	; (8002e14 <backward_walk+0x190>)
 8002d6e:	492a      	ldr	r1, [pc, #168]	; (8002e18 <backward_walk+0x194>)
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7ff fa79 	bl	8002268 <setPosition>
		waitReach(0);
 8002d76:	2000      	movs	r0, #0
 8002d78:	f7ff fd7a 	bl	8002870 <waitReach>
		setPosition(0, xmidMax, ymidMin, zMin);
 8002d7c:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <backward_walk+0x198>)
 8002d7e:	4a25      	ldr	r2, [pc, #148]	; (8002e14 <backward_walk+0x190>)
 8002d80:	4925      	ldr	r1, [pc, #148]	; (8002e18 <backward_walk+0x194>)
 8002d82:	2000      	movs	r0, #0
 8002d84:	f7ff fa70 	bl	8002268 <setPosition>
		waitReach(0);
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7ff fd71 	bl	8002870 <waitReach>
		setPosition(0, xMid, yMid, zMin);
 8002d8e:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <backward_walk+0x198>)
 8002d90:	4a23      	ldr	r2, [pc, #140]	; (8002e20 <backward_walk+0x19c>)
 8002d92:	4923      	ldr	r1, [pc, #140]	; (8002e20 <backward_walk+0x19c>)
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7ff fa67 	bl	8002268 <setPosition>
		setPosition(1, xMid, yMid, zMin);
 8002d9a:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <backward_walk+0x198>)
 8002d9c:	4a20      	ldr	r2, [pc, #128]	; (8002e20 <backward_walk+0x19c>)
 8002d9e:	4920      	ldr	r1, [pc, #128]	; (8002e20 <backward_walk+0x19c>)
 8002da0:	2001      	movs	r0, #1
 8002da2:	f7ff fa61 	bl	8002268 <setPosition>
		setPosition(2, xmidMax, ymidMin, zMin);
 8002da6:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <backward_walk+0x198>)
 8002da8:	4a1a      	ldr	r2, [pc, #104]	; (8002e14 <backward_walk+0x190>)
 8002daa:	491b      	ldr	r1, [pc, #108]	; (8002e18 <backward_walk+0x194>)
 8002dac:	2002      	movs	r0, #2
 8002dae:	f7ff fa5b 	bl	8002268 <setPosition>
		setPosition(3, xRef, yMax, zMin);
 8002db2:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <backward_walk+0x198>)
 8002db4:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <backward_walk+0x18c>)
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	2003      	movs	r0, #3
 8002dbc:	f7ff fa54 	bl	8002268 <setPosition>
		waitAllReach();
 8002dc0:	f7ff fdb8 	bl	8002934 <waitAllReach>
		setPosition(2, xMid, yMid, zRef);
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	4a15      	ldr	r2, [pc, #84]	; (8002e20 <backward_walk+0x19c>)
 8002dca:	4915      	ldr	r1, [pc, #84]	; (8002e20 <backward_walk+0x19c>)
 8002dcc:	2002      	movs	r0, #2
 8002dce:	f7ff fa4b 	bl	8002268 <setPosition>
		waitReach(2);
 8002dd2:	2002      	movs	r0, #2
 8002dd4:	f7ff fd4c 	bl	8002870 <waitReach>
		setPosition(2, xRef, yMax, zRef);
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	4a0c      	ldr	r2, [pc, #48]	; (8002e10 <backward_walk+0x18c>)
 8002dde:	f04f 0100 	mov.w	r1, #0
 8002de2:	2002      	movs	r0, #2
 8002de4:	f7ff fa40 	bl	8002268 <setPosition>
		waitReach(2);
 8002de8:	2002      	movs	r0, #2
 8002dea:	f7ff fd41 	bl	8002870 <waitReach>
		setPosition(2, xRef, yMax, zMin);
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <backward_walk+0x198>)
 8002df0:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <backward_walk+0x18c>)
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	2002      	movs	r0, #2
 8002df8:	f7ff fa36 	bl	8002268 <setPosition>
		waitReach(2);
 8002dfc:	2002      	movs	r0, #2
 8002dfe:	f7ff fd37 	bl	8002870 <waitReach>
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000322 	.word	0x20000322
 8002e0c:	20000324 	.word	0x20000324
 8002e10:	42a50000 	.word	0x42a50000
 8002e14:	42257ae1 	.word	0x42257ae1
 8002e18:	428ebd71 	.word	0x428ebd71
 8002e1c:	c29b0000 	.word	0xc29b0000
 8002e20:	426951ec 	.word	0x426951ec

08002e24 <turn_left>:

void turn_left()
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
	speed = legSpeed;
 8002e28:	4b69      	ldr	r3, [pc, #420]	; (8002fd0 <turn_left+0x1ac>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
	if (actualPos[2][1] == yMax)
 8002e2e:	4b69      	ldr	r3, [pc, #420]	; (8002fd4 <turn_left+0x1b0>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	4969      	ldr	r1, [pc, #420]	; (8002fd8 <turn_left+0x1b4>)
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fe f939 	bl	80010ac <__aeabi_fcmpeq>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d062      	beq.n	8002f06 <turn_left+0xe2>
	{
		//	Legs 2 & 1 move
		//	Leg 2 moves to the front
		setPosition(2, xRef, yMax, zRef);
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	4a64      	ldr	r2, [pc, #400]	; (8002fd8 <turn_left+0x1b4>)
 8002e46:	f04f 0100 	mov.w	r1, #0
 8002e4a:	2002      	movs	r0, #2
 8002e4c:	f7ff fa0c 	bl	8002268 <setPosition>
		waitReach(2);
 8002e50:	2002      	movs	r0, #2
 8002e52:	f7ff fd0d 	bl	8002870 <waitReach>
		setPosition(2, xmidMax, ymidMin, zRef);
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	4a60      	ldr	r2, [pc, #384]	; (8002fdc <turn_left+0x1b8>)
 8002e5c:	4960      	ldr	r1, [pc, #384]	; (8002fe0 <turn_left+0x1bc>)
 8002e5e:	2002      	movs	r0, #2
 8002e60:	f7ff fa02 	bl	8002268 <setPosition>
		waitReach(2);
 8002e64:	2002      	movs	r0, #2
 8002e66:	f7ff fd03 	bl	8002870 <waitReach>

		// Body movement and final Leg 2 movement
		setPosition(0, xMid, yMid, zMin);
 8002e6a:	4b5e      	ldr	r3, [pc, #376]	; (8002fe4 <turn_left+0x1c0>)
 8002e6c:	4a5e      	ldr	r2, [pc, #376]	; (8002fe8 <turn_left+0x1c4>)
 8002e6e:	495e      	ldr	r1, [pc, #376]	; (8002fe8 <turn_left+0x1c4>)
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7ff f9f9 	bl	8002268 <setPosition>
		setPosition(1, xMax, yRef, zMin);
 8002e76:	4b5b      	ldr	r3, [pc, #364]	; (8002fe4 <turn_left+0x1c0>)
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	4956      	ldr	r1, [pc, #344]	; (8002fd8 <turn_left+0x1b4>)
 8002e7e:	2001      	movs	r0, #1
 8002e80:	f7ff f9f2 	bl	8002268 <setPosition>
		setPosition(2, xMax, yRef, zMin);
 8002e84:	4b57      	ldr	r3, [pc, #348]	; (8002fe4 <turn_left+0x1c0>)
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	4953      	ldr	r1, [pc, #332]	; (8002fd8 <turn_left+0x1b4>)
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	f7ff f9eb 	bl	8002268 <setPosition>
		setPosition(3, xmidMin, xmidMax, zMin);
 8002e92:	4b54      	ldr	r3, [pc, #336]	; (8002fe4 <turn_left+0x1c0>)
 8002e94:	4a52      	ldr	r2, [pc, #328]	; (8002fe0 <turn_left+0x1bc>)
 8002e96:	4951      	ldr	r1, [pc, #324]	; (8002fdc <turn_left+0x1b8>)
 8002e98:	2003      	movs	r0, #3
 8002e9a:	f7ff f9e5 	bl	8002268 <setPosition>
		waitAllReach();
 8002e9e:	f7ff fd49 	bl	8002934 <waitAllReach>

		//	Leg 1 moves to the reference
		setPosition(1, xMax, yRef, zRef);
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	494b      	ldr	r1, [pc, #300]	; (8002fd8 <turn_left+0x1b4>)
 8002eac:	2001      	movs	r0, #1
 8002eae:	f7ff f9db 	bl	8002268 <setPosition>
		waitReach(1);
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	f7ff fcdc 	bl	8002870 <waitReach>
		setPosition(1, xMid, yMid, zRef);
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	4a4a      	ldr	r2, [pc, #296]	; (8002fe8 <turn_left+0x1c4>)
 8002ebe:	494a      	ldr	r1, [pc, #296]	; (8002fe8 <turn_left+0x1c4>)
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	f7ff f9d1 	bl	8002268 <setPosition>
		waitReach(1);
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	f7ff fcd2 	bl	8002870 <waitReach>

		// Body movement and final Leg 1 movement
		setPosition(0, xRef, yMax, zMin);
 8002ecc:	4b45      	ldr	r3, [pc, #276]	; (8002fe4 <turn_left+0x1c0>)
 8002ece:	4a42      	ldr	r2, [pc, #264]	; (8002fd8 <turn_left+0x1b4>)
 8002ed0:	f04f 0100 	mov.w	r1, #0
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f7ff f9c7 	bl	8002268 <setPosition>
		setPosition(1, xRef, yMax, zMin);
 8002eda:	4b42      	ldr	r3, [pc, #264]	; (8002fe4 <turn_left+0x1c0>)
 8002edc:	4a3e      	ldr	r2, [pc, #248]	; (8002fd8 <turn_left+0x1b4>)
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f7ff f9c0 	bl	8002268 <setPosition>
		setPosition(2, xMid, yMid, zMin);
 8002ee8:	4b3e      	ldr	r3, [pc, #248]	; (8002fe4 <turn_left+0x1c0>)
 8002eea:	4a3f      	ldr	r2, [pc, #252]	; (8002fe8 <turn_left+0x1c4>)
 8002eec:	493e      	ldr	r1, [pc, #248]	; (8002fe8 <turn_left+0x1c4>)
 8002eee:	2002      	movs	r0, #2
 8002ef0:	f7ff f9ba 	bl	8002268 <setPosition>
		setPosition(3, xMid, yMid, zMin);
 8002ef4:	4b3b      	ldr	r3, [pc, #236]	; (8002fe4 <turn_left+0x1c0>)
 8002ef6:	4a3c      	ldr	r2, [pc, #240]	; (8002fe8 <turn_left+0x1c4>)
 8002ef8:	493b      	ldr	r1, [pc, #236]	; (8002fe8 <turn_left+0x1c4>)
 8002efa:	2003      	movs	r0, #3
 8002efc:	f7ff f9b4 	bl	8002268 <setPosition>
		waitAllReach();
 8002f00:	f7ff fd18 	bl	8002934 <waitAllReach>
		setPosition(1, xMid, yMid, zMin);
		setPosition(2, xRef, yMax, zMin);
		setPosition(3, xRef, yMax, zMin);
		waitAllReach();
	}
}
 8002f04:	e061      	b.n	8002fca <turn_left+0x1a6>
		setPosition(0, xRef, yMax, zRef);
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	4a33      	ldr	r2, [pc, #204]	; (8002fd8 <turn_left+0x1b4>)
 8002f0c:	f04f 0100 	mov.w	r1, #0
 8002f10:	2000      	movs	r0, #0
 8002f12:	f7ff f9a9 	bl	8002268 <setPosition>
		waitReach(0);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f7ff fcaa 	bl	8002870 <waitReach>
		setPosition(0, xmidMax, ymidMin, zRef);
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	4a2e      	ldr	r2, [pc, #184]	; (8002fdc <turn_left+0x1b8>)
 8002f22:	492f      	ldr	r1, [pc, #188]	; (8002fe0 <turn_left+0x1bc>)
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7ff f99f 	bl	8002268 <setPosition>
		waitReach(0);
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	f7ff fca0 	bl	8002870 <waitReach>
		setPosition(0, xMax, yRef, zMin);
 8002f30:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <turn_left+0x1c0>)
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	4928      	ldr	r1, [pc, #160]	; (8002fd8 <turn_left+0x1b4>)
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f7ff f995 	bl	8002268 <setPosition>
		setPosition(1, xmidMin, ymidMax, zMin);
 8002f3e:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <turn_left+0x1c0>)
 8002f40:	4a27      	ldr	r2, [pc, #156]	; (8002fe0 <turn_left+0x1bc>)
 8002f42:	4926      	ldr	r1, [pc, #152]	; (8002fdc <turn_left+0x1b8>)
 8002f44:	2001      	movs	r0, #1
 8002f46:	f7ff f98f 	bl	8002268 <setPosition>
		setPosition(2, xMid , yMid, zMin);
 8002f4a:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <turn_left+0x1c0>)
 8002f4c:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <turn_left+0x1c4>)
 8002f4e:	4926      	ldr	r1, [pc, #152]	; (8002fe8 <turn_left+0x1c4>)
 8002f50:	2002      	movs	r0, #2
 8002f52:	f7ff f989 	bl	8002268 <setPosition>
		setPosition(3, xMax, yRef, zMin);
 8002f56:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <turn_left+0x1c0>)
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	491e      	ldr	r1, [pc, #120]	; (8002fd8 <turn_left+0x1b4>)
 8002f5e:	2003      	movs	r0, #3
 8002f60:	f7ff f982 	bl	8002268 <setPosition>
		waitAllReach();
 8002f64:	f7ff fce6 	bl	8002934 <waitAllReach>
		setPosition(3, xMax, yRef, zRef);
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	4919      	ldr	r1, [pc, #100]	; (8002fd8 <turn_left+0x1b4>)
 8002f72:	2003      	movs	r0, #3
 8002f74:	f7ff f978 	bl	8002268 <setPosition>
		waitReach(3);
 8002f78:	2003      	movs	r0, #3
 8002f7a:	f7ff fc79 	bl	8002870 <waitReach>
		setPosition(3, xMid, yMid, zRef);
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	4a19      	ldr	r2, [pc, #100]	; (8002fe8 <turn_left+0x1c4>)
 8002f84:	4918      	ldr	r1, [pc, #96]	; (8002fe8 <turn_left+0x1c4>)
 8002f86:	2003      	movs	r0, #3
 8002f88:	f7ff f96e 	bl	8002268 <setPosition>
		waitReach(3);
 8002f8c:	2003      	movs	r0, #3
 8002f8e:	f7ff fc6f 	bl	8002870 <waitReach>
		setPosition(0, xMid, yMid, zMin);
 8002f92:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <turn_left+0x1c0>)
 8002f94:	4a14      	ldr	r2, [pc, #80]	; (8002fe8 <turn_left+0x1c4>)
 8002f96:	4914      	ldr	r1, [pc, #80]	; (8002fe8 <turn_left+0x1c4>)
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7ff f965 	bl	8002268 <setPosition>
		setPosition(1, xMid, yMid, zMin);
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <turn_left+0x1c0>)
 8002fa0:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <turn_left+0x1c4>)
 8002fa2:	4911      	ldr	r1, [pc, #68]	; (8002fe8 <turn_left+0x1c4>)
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	f7ff f95f 	bl	8002268 <setPosition>
		setPosition(2, xRef, yMax, zMin);
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <turn_left+0x1c0>)
 8002fac:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <turn_left+0x1b4>)
 8002fae:	f04f 0100 	mov.w	r1, #0
 8002fb2:	2002      	movs	r0, #2
 8002fb4:	f7ff f958 	bl	8002268 <setPosition>
		setPosition(3, xRef, yMax, zMin);
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <turn_left+0x1c0>)
 8002fba:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <turn_left+0x1b4>)
 8002fbc:	f04f 0100 	mov.w	r1, #0
 8002fc0:	2003      	movs	r0, #3
 8002fc2:	f7ff f951 	bl	8002268 <setPosition>
		waitAllReach();
 8002fc6:	f7ff fcb5 	bl	8002934 <waitAllReach>
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000322 	.word	0x20000322
 8002fd4:	20000324 	.word	0x20000324
 8002fd8:	42a50000 	.word	0x42a50000
 8002fdc:	42257ae1 	.word	0x42257ae1
 8002fe0:	428ebd71 	.word	0x428ebd71
 8002fe4:	c29b0000 	.word	0xc29b0000
 8002fe8:	426951ec 	.word	0x426951ec

08002fec <turn_right>:

void turn_right()
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
	speed = legSpeed;
 8002ff0:	4b6c      	ldr	r3, [pc, #432]	; (80031a4 <turn_right+0x1b8>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
	if (actualPos[2][1] == yMax)
 8002ff6:	4b6c      	ldr	r3, [pc, #432]	; (80031a8 <turn_right+0x1bc>)
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	496c      	ldr	r1, [pc, #432]	; (80031ac <turn_right+0x1c0>)
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fe f855 	bl	80010ac <__aeabi_fcmpeq>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d065      	beq.n	80030d4 <turn_right+0xe8>
	{
		//	Legs 3 & 0 move
		//	Leg 3 moves to the front
		setPosition(3, xRef, yMax, zRef);
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	4a67      	ldr	r2, [pc, #412]	; (80031ac <turn_right+0x1c0>)
 800300e:	f04f 0100 	mov.w	r1, #0
 8003012:	2003      	movs	r0, #3
 8003014:	f7ff f928 	bl	8002268 <setPosition>
		waitReach(3);
 8003018:	2003      	movs	r0, #3
 800301a:	f7ff fc29 	bl	8002870 <waitReach>
		setPosition(3, xmidMax, ymidMin, zRef);
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	4a63      	ldr	r2, [pc, #396]	; (80031b0 <turn_right+0x1c4>)
 8003024:	4963      	ldr	r1, [pc, #396]	; (80031b4 <turn_right+0x1c8>)
 8003026:	2003      	movs	r0, #3
 8003028:	f7ff f91e 	bl	8002268 <setPosition>
		waitReach(3);
 800302c:	2003      	movs	r0, #3
 800302e:	f7ff fc1f 	bl	8002870 <waitReach>

		// Body movement and final Leg 3 movement
		setPosition(0, xMax, yRef, zMin);
 8003032:	4b61      	ldr	r3, [pc, #388]	; (80031b8 <turn_right+0x1cc>)
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	495c      	ldr	r1, [pc, #368]	; (80031ac <turn_right+0x1c0>)
 800303a:	2000      	movs	r0, #0
 800303c:	f7ff f914 	bl	8002268 <setPosition>
		setPosition(1, xMid , yMid,zMin);
 8003040:	4b5d      	ldr	r3, [pc, #372]	; (80031b8 <turn_right+0x1cc>)
 8003042:	4a5e      	ldr	r2, [pc, #376]	; (80031bc <turn_right+0x1d0>)
 8003044:	495d      	ldr	r1, [pc, #372]	; (80031bc <turn_right+0x1d0>)
 8003046:	2001      	movs	r0, #1
 8003048:	f7ff f90e 	bl	8002268 <setPosition>
		setPosition(2, xmidMin, ymidMax, zMin);
 800304c:	4b5a      	ldr	r3, [pc, #360]	; (80031b8 <turn_right+0x1cc>)
 800304e:	4a59      	ldr	r2, [pc, #356]	; (80031b4 <turn_right+0x1c8>)
 8003050:	4957      	ldr	r1, [pc, #348]	; (80031b0 <turn_right+0x1c4>)
 8003052:	2002      	movs	r0, #2
 8003054:	f7ff f908 	bl	8002268 <setPosition>
		setPosition(3, xMax, yRef, zMin);
 8003058:	4b57      	ldr	r3, [pc, #348]	; (80031b8 <turn_right+0x1cc>)
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	4953      	ldr	r1, [pc, #332]	; (80031ac <turn_right+0x1c0>)
 8003060:	2003      	movs	r0, #3
 8003062:	f7ff f901 	bl	8002268 <setPosition>
		waitAllReach();
 8003066:	f7ff fc65 	bl	8002934 <waitAllReach>

		//	Leg 0 moves to reference
		setPosition(0, xMax, yRef, zRef);
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	494e      	ldr	r1, [pc, #312]	; (80031ac <turn_right+0x1c0>)
 8003074:	2000      	movs	r0, #0
 8003076:	f7ff f8f7 	bl	8002268 <setPosition>
		waitReach(0);
 800307a:	2000      	movs	r0, #0
 800307c:	f7ff fbf8 	bl	8002870 <waitReach>
		setPosition(0, xMid, yMid, zRef);
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	4a4d      	ldr	r2, [pc, #308]	; (80031bc <turn_right+0x1d0>)
 8003086:	494d      	ldr	r1, [pc, #308]	; (80031bc <turn_right+0x1d0>)
 8003088:	2000      	movs	r0, #0
 800308a:	f7ff f8ed 	bl	8002268 <setPosition>
		waitReach(0);
 800308e:	2000      	movs	r0, #0
 8003090:	f7ff fbee 	bl	8002870 <waitReach>
		setPosition(0, xRef, yMax, zMin);
 8003094:	4b48      	ldr	r3, [pc, #288]	; (80031b8 <turn_right+0x1cc>)
 8003096:	4a45      	ldr	r2, [pc, #276]	; (80031ac <turn_right+0x1c0>)
 8003098:	f04f 0100 	mov.w	r1, #0
 800309c:	2000      	movs	r0, #0
 800309e:	f7ff f8e3 	bl	8002268 <setPosition>
		waitReach(0);
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7ff fbe4 	bl	8002870 <waitReach>

		// Body movement and final Leg 0 movement
		setPosition(1, xRef, yMax, zMin);
 80030a8:	4b43      	ldr	r3, [pc, #268]	; (80031b8 <turn_right+0x1cc>)
 80030aa:	4a40      	ldr	r2, [pc, #256]	; (80031ac <turn_right+0x1c0>)
 80030ac:	f04f 0100 	mov.w	r1, #0
 80030b0:	2001      	movs	r0, #1
 80030b2:	f7ff f8d9 	bl	8002268 <setPosition>
		setPosition(2, xMid, yMid, zMin);
 80030b6:	4b40      	ldr	r3, [pc, #256]	; (80031b8 <turn_right+0x1cc>)
 80030b8:	4a40      	ldr	r2, [pc, #256]	; (80031bc <turn_right+0x1d0>)
 80030ba:	4940      	ldr	r1, [pc, #256]	; (80031bc <turn_right+0x1d0>)
 80030bc:	2002      	movs	r0, #2
 80030be:	f7ff f8d3 	bl	8002268 <setPosition>
		setPosition(3, xMid, yMid, zMin);
 80030c2:	4b3d      	ldr	r3, [pc, #244]	; (80031b8 <turn_right+0x1cc>)
 80030c4:	4a3d      	ldr	r2, [pc, #244]	; (80031bc <turn_right+0x1d0>)
 80030c6:	493d      	ldr	r1, [pc, #244]	; (80031bc <turn_right+0x1d0>)
 80030c8:	2003      	movs	r0, #3
 80030ca:	f7ff f8cd 	bl	8002268 <setPosition>
		waitAllReach();
 80030ce:	f7ff fc31 	bl	8002934 <waitAllReach>
		setPosition(1, xMid, yMid, zMin);
		setPosition(2, xRef, yMax, zMin);
		setPosition(3, xRef, yMax, zMin);
		waitAllReach();
	}
}
 80030d2:	e064      	b.n	800319e <turn_right+0x1b2>
		setPosition(1, xRef, yMax, zRef);
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	4a34      	ldr	r2, [pc, #208]	; (80031ac <turn_right+0x1c0>)
 80030da:	f04f 0100 	mov.w	r1, #0
 80030de:	2001      	movs	r0, #1
 80030e0:	f7ff f8c2 	bl	8002268 <setPosition>
		waitReach(1);
 80030e4:	2001      	movs	r0, #1
 80030e6:	f7ff fbc3 	bl	8002870 <waitReach>
		setPosition(1, xmidMax, ymidMin, zRef);
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	4a30      	ldr	r2, [pc, #192]	; (80031b0 <turn_right+0x1c4>)
 80030f0:	4930      	ldr	r1, [pc, #192]	; (80031b4 <turn_right+0x1c8>)
 80030f2:	2001      	movs	r0, #1
 80030f4:	f7ff f8b8 	bl	8002268 <setPosition>
		waitReach(1);
 80030f8:	2001      	movs	r0, #1
 80030fa:	f7ff fbb9 	bl	8002870 <waitReach>
		setPosition(1, xMax, yRef, zMin);
 80030fe:	4b2e      	ldr	r3, [pc, #184]	; (80031b8 <turn_right+0x1cc>)
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	4929      	ldr	r1, [pc, #164]	; (80031ac <turn_right+0x1c0>)
 8003106:	2001      	movs	r0, #1
 8003108:	f7ff f8ae 	bl	8002268 <setPosition>
		waitReach(1);
 800310c:	2001      	movs	r0, #1
 800310e:	f7ff fbaf 	bl	8002870 <waitReach>
		setPosition(0, xmidMin, ymidMax, zMin);
 8003112:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <turn_right+0x1cc>)
 8003114:	4a27      	ldr	r2, [pc, #156]	; (80031b4 <turn_right+0x1c8>)
 8003116:	4926      	ldr	r1, [pc, #152]	; (80031b0 <turn_right+0x1c4>)
 8003118:	2000      	movs	r0, #0
 800311a:	f7ff f8a5 	bl	8002268 <setPosition>
		setPosition(2, xMax, yRef, zMin);
 800311e:	4b26      	ldr	r3, [pc, #152]	; (80031b8 <turn_right+0x1cc>)
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	4921      	ldr	r1, [pc, #132]	; (80031ac <turn_right+0x1c0>)
 8003126:	2002      	movs	r0, #2
 8003128:	f7ff f89e 	bl	8002268 <setPosition>
		setPosition(3, xMid, yMid, zMin);
 800312c:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <turn_right+0x1cc>)
 800312e:	4a23      	ldr	r2, [pc, #140]	; (80031bc <turn_right+0x1d0>)
 8003130:	4922      	ldr	r1, [pc, #136]	; (80031bc <turn_right+0x1d0>)
 8003132:	2003      	movs	r0, #3
 8003134:	f7ff f898 	bl	8002268 <setPosition>
		waitAllReach();
 8003138:	f7ff fbfc 	bl	8002934 <waitAllReach>
		setPosition(2, xMax, yRef, zRef);
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	4919      	ldr	r1, [pc, #100]	; (80031ac <turn_right+0x1c0>)
 8003146:	2002      	movs	r0, #2
 8003148:	f7ff f88e 	bl	8002268 <setPosition>
		waitReach(2);
 800314c:	2002      	movs	r0, #2
 800314e:	f7ff fb8f 	bl	8002870 <waitReach>
		setPosition(2, xMid, yMid, zRef);
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	4a19      	ldr	r2, [pc, #100]	; (80031bc <turn_right+0x1d0>)
 8003158:	4918      	ldr	r1, [pc, #96]	; (80031bc <turn_right+0x1d0>)
 800315a:	2002      	movs	r0, #2
 800315c:	f7ff f884 	bl	8002268 <setPosition>
		waitReach(2);
 8003160:	2002      	movs	r0, #2
 8003162:	f7ff fb85 	bl	8002870 <waitReach>
		setPosition(0, xMid, yMid, zMin);
 8003166:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <turn_right+0x1cc>)
 8003168:	4a14      	ldr	r2, [pc, #80]	; (80031bc <turn_right+0x1d0>)
 800316a:	4914      	ldr	r1, [pc, #80]	; (80031bc <turn_right+0x1d0>)
 800316c:	2000      	movs	r0, #0
 800316e:	f7ff f87b 	bl	8002268 <setPosition>
		setPosition(1, xMid, yMid, zMin);
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <turn_right+0x1cc>)
 8003174:	4a11      	ldr	r2, [pc, #68]	; (80031bc <turn_right+0x1d0>)
 8003176:	4911      	ldr	r1, [pc, #68]	; (80031bc <turn_right+0x1d0>)
 8003178:	2001      	movs	r0, #1
 800317a:	f7ff f875 	bl	8002268 <setPosition>
		setPosition(2, xRef, yMax, zMin);
 800317e:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <turn_right+0x1cc>)
 8003180:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <turn_right+0x1c0>)
 8003182:	f04f 0100 	mov.w	r1, #0
 8003186:	2002      	movs	r0, #2
 8003188:	f7ff f86e 	bl	8002268 <setPosition>
		setPosition(3, xRef, yMax, zMin);
 800318c:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <turn_right+0x1cc>)
 800318e:	4a07      	ldr	r2, [pc, #28]	; (80031ac <turn_right+0x1c0>)
 8003190:	f04f 0100 	mov.w	r1, #0
 8003194:	2003      	movs	r0, #3
 8003196:	f7ff f867 	bl	8002268 <setPosition>
		waitAllReach();
 800319a:	f7ff fbcb 	bl	8002934 <waitAllReach>
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000322 	.word	0x20000322
 80031a8:	20000324 	.word	0x20000324
 80031ac:	42a50000 	.word	0x42a50000
 80031b0:	42257ae1 	.word	0x42257ae1
 80031b4:	428ebd71 	.word	0x428ebd71
 80031b8:	c29b0000 	.word	0xc29b0000
 80031bc:	426951ec 	.word	0x426951ec

080031c0 <sit>:

void sit()
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
	speed = bodySpeed;
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <sit+0x38>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	701a      	strb	r2, [r3, #0]
	int i;
	for (i = 0; i < LEG_COUNT; i++)
 80031cc:	2300      	movs	r3, #0
 80031ce:	607b      	str	r3, [r7, #4]
 80031d0:	e008      	b.n	80031e4 <sit+0x24>
	{
		setPosition(i, xMid, yMid, xMax);
 80031d2:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <sit+0x3c>)
 80031d4:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <sit+0x40>)
 80031d6:	490a      	ldr	r1, [pc, #40]	; (8003200 <sit+0x40>)
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff f845 	bl	8002268 <setPosition>
	for (i = 0; i < LEG_COUNT; i++)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3301      	adds	r3, #1
 80031e2:	607b      	str	r3, [r7, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	ddf3      	ble.n	80031d2 <sit+0x12>
	}
	waitAllReach();
 80031ea:	f7ff fba3 	bl	8002934 <waitAllReach>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000322 	.word	0x20000322
 80031fc:	42a50000 	.word	0x42a50000
 8003200:	426951ec 	.word	0x426951ec

08003204 <stand>:

void stand()
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
	speed = bodySpeed;
 800320a:	4b0c      	ldr	r3, [pc, #48]	; (800323c <stand+0x38>)
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
	int i;
	for (i = 0; i < LEG_COUNT; i++)
 8003210:	2300      	movs	r3, #0
 8003212:	607b      	str	r3, [r7, #4]
 8003214:	e008      	b.n	8003228 <stand+0x24>
	{
		setPosition(i, xMid, yMid, zMin);
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <stand+0x3c>)
 8003218:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <stand+0x40>)
 800321a:	490a      	ldr	r1, [pc, #40]	; (8003244 <stand+0x40>)
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff f823 	bl	8002268 <setPosition>
	for (i = 0; i < LEG_COUNT; i++)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3301      	adds	r3, #1
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b03      	cmp	r3, #3
 800322c:	ddf3      	ble.n	8003216 <stand+0x12>
	}
	waitAllReach();
 800322e:	f7ff fb81 	bl	8002934 <waitAllReach>
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000322 	.word	0x20000322
 8003240:	c29b0000 	.word	0xc29b0000
 8003244:	426951ec 	.word	0x426951ec

08003248 <right_walk>:

void right_walk(uint16_t *angles)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	speed = legSpeed;
 8003250:	4b03      	ldr	r3, [pc, #12]	; (8003260 <right_walk+0x18>)
 8003252:	2200      	movs	r2, #0
 8003254:	701a      	strb	r2, [r3, #0]
//	PCA9685_SetServoAngle(5, angles[5], 0);
//	HAL_Delay(200);
//
//	legControl(angles, 1, 'D', 30);
//	angles[] = angles
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	20000322 	.word	0x20000322

08003264 <left_walk>:

void left_walk(uint16_t *angles)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
	speed = legSpeed;
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <left_walk+0x18>)
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr
 800327c:	20000322 	.word	0x20000322

08003280 <stop>:

void stop()
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
	int i, j;
	for (i = 0; i < LEG_COUNT; i++)
 8003286:	2300      	movs	r3, #0
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	e01d      	b.n	80032c8 <stop+0x48>
	{
		for (j = 0; j < 3;  j++)
 800328c:	2300      	movs	r3, #0
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	e014      	b.n	80032bc <stop+0x3c>
		{
			expectedPos[i][j] = actualPos[i][j];
 8003292:	4912      	ldr	r1, [pc, #72]	; (80032dc <stop+0x5c>)
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80032a4:	480e      	ldr	r0, [pc, #56]	; (80032e0 <stop+0x60>)
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	4413      	add	r3, r2
 80032b2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		for (j = 0; j < 3;  j++)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	dde7      	ble.n	8003292 <stop+0x12>
	for (i = 0; i < LEG_COUNT; i++)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3301      	adds	r3, #1
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	ddde      	ble.n	800328c <stop+0xc>
		}
	}
	servoMovement();
 80032ce:	f7ff fa99 	bl	8002804 <servoMovement>
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000324 	.word	0x20000324
 80032e0:	200002a0 	.word	0x200002a0

080032e4 <servoControl>:

void servoControl(uint16_t *angles, uint8_t servo, uint16_t angle)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	70fb      	strb	r3, [r7, #3]
 80032f0:	4613      	mov	r3, r2
 80032f2:	803b      	strh	r3, [r7, #0]
	PCA9685_SetServoAngle(servo, angle, 0);
 80032f4:	8839      	ldrh	r1, [r7, #0]
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	2200      	movs	r2, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe fddc 	bl	8001eb8 <PCA9685_SetServoAngle>
	angles[servo] = angle;
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	883a      	ldrh	r2, [r7, #0]
 800330a:	801a      	strh	r2, [r3, #0]
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <legControl>:

void legControl(uint16_t *angles, uint8_t leg, char movement, uint16_t step)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	4608      	mov	r0, r1
 800331e:	4611      	mov	r1, r2
 8003320:	461a      	mov	r2, r3
 8003322:	4603      	mov	r3, r0
 8003324:	70fb      	strb	r3, [r7, #3]
 8003326:	460b      	mov	r3, r1
 8003328:	70bb      	strb	r3, [r7, #2]
 800332a:	4613      	mov	r3, r2
 800332c:	803b      	strh	r3, [r7, #0]
	//	Select the corresponding servos for each leg
	uint8_t bottomServo = (leg * 3) - 3;
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	461a      	mov	r2, r3
 8003332:	0052      	lsls	r2, r2, #1
 8003334:	4413      	add	r3, r2
 8003336:	b2db      	uxtb	r3, r3
 8003338:	3b03      	subs	r3, #3
 800333a:	73fb      	strb	r3, [r7, #15]
	uint8_t middleServo = (leg * 3) - 2;
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	461a      	mov	r2, r3
 8003340:	0052      	lsls	r2, r2, #1
 8003342:	4413      	add	r3, r2
 8003344:	b2db      	uxtb	r3, r3
 8003346:	3b02      	subs	r3, #2
 8003348:	73bb      	strb	r3, [r7, #14]
	uint8_t topServo = (leg * 3) - 1;
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	461a      	mov	r2, r3
 800334e:	0052      	lsls	r2, r2, #1
 8003350:	4413      	add	r3, r2
 8003352:	b2db      	uxtb	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	737b      	strb	r3, [r7, #13]
	switch(leg)
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	3b01      	subs	r3, #1
 800335c:	2b03      	cmp	r3, #3
 800335e:	f200 82b5 	bhi.w	80038cc <legControl+0x5b8>
 8003362:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <legControl+0x54>)
 8003364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003368:	08003379 	.word	0x08003379
 800336c:	08003625 	.word	0x08003625
 8003370:	08003379 	.word	0x08003379
 8003374:	08003625 	.word	0x08003625
	{
		case 1:
		case 3:
			switch(movement)
 8003378:	78bb      	ldrb	r3, [r7, #2]
 800337a:	3b44      	subs	r3, #68	; 0x44
 800337c:	2b11      	cmp	r3, #17
 800337e:	f200 814b 	bhi.w	8003618 <legControl+0x304>
 8003382:	a201      	add	r2, pc, #4	; (adr r2, 8003388 <legControl+0x74>)
 8003384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003388:	080034b5 	.word	0x080034b5
 800338c:	08003619 	.word	0x08003619
 8003390:	08003619 	.word	0x08003619
 8003394:	08003619 	.word	0x08003619
 8003398:	08003619 	.word	0x08003619
 800339c:	08003619 	.word	0x08003619
 80033a0:	08003619 	.word	0x08003619
 80033a4:	08003619 	.word	0x08003619
 80033a8:	080035db 	.word	0x080035db
 80033ac:	08003619 	.word	0x08003619
 80033b0:	08003619 	.word	0x08003619
 80033b4:	08003619 	.word	0x08003619
 80033b8:	08003619 	.word	0x08003619
 80033bc:	08003619 	.word	0x08003619
 80033c0:	0800359d 	.word	0x0800359d
 80033c4:	08003619 	.word	0x08003619
 80033c8:	08003619 	.word	0x08003619
 80033cc:	080033d1 	.word	0x080033d1
			{
				case 'U':
					if (angles[middleServo] < MAX_ANGLE && angles[topServo] < MAX_ANGLE)
 80033d0:	7bbb      	ldrb	r3, [r7, #14]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	4413      	add	r3, r2
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	2bb3      	cmp	r3, #179	; 0xb3
 80033dc:	d834      	bhi.n	8003448 <legControl+0x134>
 80033de:	7b7b      	ldrb	r3, [r7, #13]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	2bb3      	cmp	r3, #179	; 0xb3
 80033ea:	d82d      	bhi.n	8003448 <legControl+0x134>
					{
						angles[middleServo] += step;
 80033ec:	7bbb      	ldrb	r3, [r7, #14]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	4413      	add	r3, r2
 80033f4:	8819      	ldrh	r1, [r3, #0]
 80033f6:	7bbb      	ldrb	r3, [r7, #14]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4413      	add	r3, r2
 80033fe:	883a      	ldrh	r2, [r7, #0]
 8003400:	440a      	add	r2, r1
 8003402:	b292      	uxth	r2, r2
 8003404:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(middleServo, angles[middleServo], 0);
 8003406:	7bbb      	ldrb	r3, [r7, #14]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	4413      	add	r3, r2
 800340e:	8819      	ldrh	r1, [r3, #0]
 8003410:	7bbb      	ldrb	r3, [r7, #14]
 8003412:	2200      	movs	r2, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f7fe fd4f 	bl	8001eb8 <PCA9685_SetServoAngle>
						angles[topServo] -= 5;
 800341a:	7b7b      	ldrb	r3, [r7, #13]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	4413      	add	r3, r2
 8003422:	881a      	ldrh	r2, [r3, #0]
 8003424:	7b7b      	ldrb	r3, [r7, #13]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	440b      	add	r3, r1
 800342c:	3a05      	subs	r2, #5
 800342e:	b292      	uxth	r2, r2
 8003430:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(topServo, angles[topServo], 0);
 8003432:	7b7b      	ldrb	r3, [r7, #13]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	8819      	ldrh	r1, [r3, #0]
 800343c:	7b7b      	ldrb	r3, [r7, #13]
 800343e:	2200      	movs	r2, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe fd39 	bl	8001eb8 <PCA9685_SetServoAngle>
					{
						angles[topServo] -= 5;
						PCA9685_SetServoAngle(topServo, angles[topServo], 0);
					}

					break;
 8003446:	e0ec      	b.n	8003622 <legControl+0x30e>
					else if (angles[middleServo] < MAX_ANGLE)
 8003448:	7bbb      	ldrb	r3, [r7, #14]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	4413      	add	r3, r2
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	2bb3      	cmp	r3, #179	; 0xb3
 8003454:	d817      	bhi.n	8003486 <legControl+0x172>
						angles[middleServo] += step;
 8003456:	7bbb      	ldrb	r3, [r7, #14]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4413      	add	r3, r2
 800345e:	8819      	ldrh	r1, [r3, #0]
 8003460:	7bbb      	ldrb	r3, [r7, #14]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	4413      	add	r3, r2
 8003468:	883a      	ldrh	r2, [r7, #0]
 800346a:	440a      	add	r2, r1
 800346c:	b292      	uxth	r2, r2
 800346e:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(middleServo, angles[middleServo], 0);
 8003470:	7bbb      	ldrb	r3, [r7, #14]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	4413      	add	r3, r2
 8003478:	8819      	ldrh	r1, [r3, #0]
 800347a:	7bbb      	ldrb	r3, [r7, #14]
 800347c:	2200      	movs	r2, #0
 800347e:	4618      	mov	r0, r3
 8003480:	f7fe fd1a 	bl	8001eb8 <PCA9685_SetServoAngle>
					break;
 8003484:	e0cd      	b.n	8003622 <legControl+0x30e>
						angles[topServo] -= 5;
 8003486:	7b7b      	ldrb	r3, [r7, #13]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	881a      	ldrh	r2, [r3, #0]
 8003490:	7b7b      	ldrb	r3, [r7, #13]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	440b      	add	r3, r1
 8003498:	3a05      	subs	r2, #5
 800349a:	b292      	uxth	r2, r2
 800349c:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(topServo, angles[topServo], 0);
 800349e:	7b7b      	ldrb	r3, [r7, #13]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	8819      	ldrh	r1, [r3, #0]
 80034a8:	7b7b      	ldrb	r3, [r7, #13]
 80034aa:	2200      	movs	r2, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fe fd03 	bl	8001eb8 <PCA9685_SetServoAngle>
					break;
 80034b2:	e0b6      	b.n	8003622 <legControl+0x30e>
				case 'D':
					if (angles[middleServo] > MIN_ANGLE && angles[topServo] > MIN_ANGLE)
 80034b4:	7bbb      	ldrb	r3, [r7, #14]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4413      	add	r3, r2
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d036      	beq.n	8003530 <legControl+0x21c>
 80034c2:	7b7b      	ldrb	r3, [r7, #13]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d02f      	beq.n	8003530 <legControl+0x21c>
					{
						angles[middleServo] -= step;
 80034d0:	7bbb      	ldrb	r3, [r7, #14]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4413      	add	r3, r2
 80034d8:	8819      	ldrh	r1, [r3, #0]
 80034da:	7bbb      	ldrb	r3, [r7, #14]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	883a      	ldrh	r2, [r7, #0]
 80034e4:	1a8a      	subs	r2, r1, r2
 80034e6:	b292      	uxth	r2, r2
 80034e8:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(middleServo, angles[middleServo], 0);
 80034ea:	7bbb      	ldrb	r3, [r7, #14]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	8819      	ldrh	r1, [r3, #0]
 80034f4:	7bbb      	ldrb	r3, [r7, #14]
 80034f6:	2200      	movs	r2, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fe fcdd 	bl	8001eb8 <PCA9685_SetServoAngle>
						angles[topServo] -= 5;
 80034fe:	7b7b      	ldrb	r3, [r7, #13]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	881a      	ldrh	r2, [r3, #0]
 8003508:	7b7b      	ldrb	r3, [r7, #13]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	440b      	add	r3, r1
 8003510:	3a05      	subs	r2, #5
 8003512:	b292      	uxth	r2, r2
 8003514:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(topServo, angles[topServo] - 5, 0);
 8003516:	7b7b      	ldrb	r3, [r7, #13]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	4413      	add	r3, r2
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	3b05      	subs	r3, #5
 8003522:	b299      	uxth	r1, r3
 8003524:	7b7b      	ldrb	r3, [r7, #13]
 8003526:	2200      	movs	r2, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe fcc5 	bl	8001eb8 <PCA9685_SetServoAngle>
					{
						angles[topServo] += 5;
						PCA9685_SetServoAngle(topServo, angles[topServo], 0);
					}

					break;
 800352e:	e078      	b.n	8003622 <legControl+0x30e>
					else if (angles[middleServo] < MAX_ANGLE)
 8003530:	7bbb      	ldrb	r3, [r7, #14]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	4413      	add	r3, r2
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	2bb3      	cmp	r3, #179	; 0xb3
 800353c:	d817      	bhi.n	800356e <legControl+0x25a>
						angles[middleServo] -= step;
 800353e:	7bbb      	ldrb	r3, [r7, #14]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	8819      	ldrh	r1, [r3, #0]
 8003548:	7bbb      	ldrb	r3, [r7, #14]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	4413      	add	r3, r2
 8003550:	883a      	ldrh	r2, [r7, #0]
 8003552:	1a8a      	subs	r2, r1, r2
 8003554:	b292      	uxth	r2, r2
 8003556:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(middleServo, angles[middleServo], 0);
 8003558:	7bbb      	ldrb	r3, [r7, #14]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	4413      	add	r3, r2
 8003560:	8819      	ldrh	r1, [r3, #0]
 8003562:	7bbb      	ldrb	r3, [r7, #14]
 8003564:	2200      	movs	r2, #0
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe fca6 	bl	8001eb8 <PCA9685_SetServoAngle>
					break;
 800356c:	e059      	b.n	8003622 <legControl+0x30e>
						angles[topServo] += 5;
 800356e:	7b7b      	ldrb	r3, [r7, #13]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	881a      	ldrh	r2, [r3, #0]
 8003578:	7b7b      	ldrb	r3, [r7, #13]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	440b      	add	r3, r1
 8003580:	3205      	adds	r2, #5
 8003582:	b292      	uxth	r2, r2
 8003584:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(topServo, angles[topServo], 0);
 8003586:	7b7b      	ldrb	r3, [r7, #13]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	8819      	ldrh	r1, [r3, #0]
 8003590:	7b7b      	ldrb	r3, [r7, #13]
 8003592:	2200      	movs	r2, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe fc8f 	bl	8001eb8 <PCA9685_SetServoAngle>
					break;
 800359a:	e042      	b.n	8003622 <legControl+0x30e>
				case 'R':
					if (angles[bottomServo] > MIN_ANGLE)
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4413      	add	r3, r2
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d038      	beq.n	800361c <legControl+0x308>
					{
						angles[bottomServo] -= step;
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	8819      	ldrh	r1, [r3, #0]
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	4413      	add	r3, r2
 80035bc:	883a      	ldrh	r2, [r7, #0]
 80035be:	1a8a      	subs	r2, r1, r2
 80035c0:	b292      	uxth	r2, r2
 80035c2:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(bottomServo, angles[bottomServo], 0);
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	4413      	add	r3, r2
 80035cc:	8819      	ldrh	r1, [r3, #0]
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	2200      	movs	r2, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe fc70 	bl	8001eb8 <PCA9685_SetServoAngle>
					}

					break;
 80035d8:	e020      	b.n	800361c <legControl+0x308>
				case 'L':
					if (angles[bottomServo] < MAX_ANGLE)
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	2bb3      	cmp	r3, #179	; 0xb3
 80035e6:	d81b      	bhi.n	8003620 <legControl+0x30c>
					{
						angles[bottomServo] += step;
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4413      	add	r3, r2
 80035f0:	8819      	ldrh	r1, [r3, #0]
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4413      	add	r3, r2
 80035fa:	883a      	ldrh	r2, [r7, #0]
 80035fc:	440a      	add	r2, r1
 80035fe:	b292      	uxth	r2, r2
 8003600:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(bottomServo, angles[bottomServo], 0);
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	8819      	ldrh	r1, [r3, #0]
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	2200      	movs	r2, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f7fe fc51 	bl	8001eb8 <PCA9685_SetServoAngle>
					}

					break;
 8003616:	e003      	b.n	8003620 <legControl+0x30c>
				default:
					break;
 8003618:	bf00      	nop
 800361a:	e158      	b.n	80038ce <legControl+0x5ba>
					break;
 800361c:	bf00      	nop
 800361e:	e156      	b.n	80038ce <legControl+0x5ba>
					break;
 8003620:	bf00      	nop
			}
			break;
 8003622:	e154      	b.n	80038ce <legControl+0x5ba>
		case 2:
		case 4:
			switch(movement)
 8003624:	78bb      	ldrb	r3, [r7, #2]
 8003626:	3b44      	subs	r3, #68	; 0x44
 8003628:	2b11      	cmp	r3, #17
 800362a:	f200 8149 	bhi.w	80038c0 <legControl+0x5ac>
 800362e:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <legControl+0x320>)
 8003630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003634:	08003761 	.word	0x08003761
 8003638:	080038c1 	.word	0x080038c1
 800363c:	080038c1 	.word	0x080038c1
 8003640:	080038c1 	.word	0x080038c1
 8003644:	080038c1 	.word	0x080038c1
 8003648:	080038c1 	.word	0x080038c1
 800364c:	080038c1 	.word	0x080038c1
 8003650:	080038c1 	.word	0x080038c1
 8003654:	08003883 	.word	0x08003883
 8003658:	080038c1 	.word	0x080038c1
 800365c:	080038c1 	.word	0x080038c1
 8003660:	080038c1 	.word	0x080038c1
 8003664:	080038c1 	.word	0x080038c1
 8003668:	080038c1 	.word	0x080038c1
 800366c:	08003845 	.word	0x08003845
 8003670:	080038c1 	.word	0x080038c1
 8003674:	080038c1 	.word	0x080038c1
 8003678:	0800367d 	.word	0x0800367d
			{
				case 'U':
					if (angles[middleServo] > MIN_ANGLE && angles[topServo] > MIN_ANGLE)
 800367c:	7bbb      	ldrb	r3, [r7, #14]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	4413      	add	r3, r2
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d034      	beq.n	80036f4 <legControl+0x3e0>
 800368a:	7b7b      	ldrb	r3, [r7, #13]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d02d      	beq.n	80036f4 <legControl+0x3e0>
					{
						angles[middleServo] -= step;
 8003698:	7bbb      	ldrb	r3, [r7, #14]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	4413      	add	r3, r2
 80036a0:	8819      	ldrh	r1, [r3, #0]
 80036a2:	7bbb      	ldrb	r3, [r7, #14]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	4413      	add	r3, r2
 80036aa:	883a      	ldrh	r2, [r7, #0]
 80036ac:	1a8a      	subs	r2, r1, r2
 80036ae:	b292      	uxth	r2, r2
 80036b0:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(middleServo, angles[middleServo], 0);
 80036b2:	7bbb      	ldrb	r3, [r7, #14]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	8819      	ldrh	r1, [r3, #0]
 80036bc:	7bbb      	ldrb	r3, [r7, #14]
 80036be:	2200      	movs	r2, #0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe fbf9 	bl	8001eb8 <PCA9685_SetServoAngle>
						angles[topServo] += 5;
 80036c6:	7b7b      	ldrb	r3, [r7, #13]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	881a      	ldrh	r2, [r3, #0]
 80036d0:	7b7b      	ldrb	r3, [r7, #13]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	440b      	add	r3, r1
 80036d8:	3205      	adds	r2, #5
 80036da:	b292      	uxth	r2, r2
 80036dc:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(topServo, angles[topServo], 0);
 80036de:	7b7b      	ldrb	r3, [r7, #13]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	4413      	add	r3, r2
 80036e6:	8819      	ldrh	r1, [r3, #0]
 80036e8:	7b7b      	ldrb	r3, [r7, #13]
 80036ea:	2200      	movs	r2, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fe fbe3 	bl	8001eb8 <PCA9685_SetServoAngle>
					{
						angles[topServo] += 5;
						PCA9685_SetServoAngle(topServo, angles[topServo], 0);
					}

					break;
 80036f2:	e0ea      	b.n	80038ca <legControl+0x5b6>
					else if (angles[middleServo] > MAX_ANGLE)
 80036f4:	7bbb      	ldrb	r3, [r7, #14]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4413      	add	r3, r2
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	2bb4      	cmp	r3, #180	; 0xb4
 8003700:	d917      	bls.n	8003732 <legControl+0x41e>
						angles[middleServo] -= step;
 8003702:	7bbb      	ldrb	r3, [r7, #14]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	4413      	add	r3, r2
 800370a:	8819      	ldrh	r1, [r3, #0]
 800370c:	7bbb      	ldrb	r3, [r7, #14]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	4413      	add	r3, r2
 8003714:	883a      	ldrh	r2, [r7, #0]
 8003716:	1a8a      	subs	r2, r1, r2
 8003718:	b292      	uxth	r2, r2
 800371a:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(middleServo, angles[middleServo], 0);
 800371c:	7bbb      	ldrb	r3, [r7, #14]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	4413      	add	r3, r2
 8003724:	8819      	ldrh	r1, [r3, #0]
 8003726:	7bbb      	ldrb	r3, [r7, #14]
 8003728:	2200      	movs	r2, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe fbc4 	bl	8001eb8 <PCA9685_SetServoAngle>
					break;
 8003730:	e0cb      	b.n	80038ca <legControl+0x5b6>
						angles[topServo] += 5;
 8003732:	7b7b      	ldrb	r3, [r7, #13]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	4413      	add	r3, r2
 800373a:	881a      	ldrh	r2, [r3, #0]
 800373c:	7b7b      	ldrb	r3, [r7, #13]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	440b      	add	r3, r1
 8003744:	3205      	adds	r2, #5
 8003746:	b292      	uxth	r2, r2
 8003748:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(topServo, angles[topServo], 0);
 800374a:	7b7b      	ldrb	r3, [r7, #13]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	4413      	add	r3, r2
 8003752:	8819      	ldrh	r1, [r3, #0]
 8003754:	7b7b      	ldrb	r3, [r7, #13]
 8003756:	2200      	movs	r2, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe fbad 	bl	8001eb8 <PCA9685_SetServoAngle>
					break;
 800375e:	e0b4      	b.n	80038ca <legControl+0x5b6>
				case 'D':
					if (angles[middleServo] < MAX_ANGLE && angles[topServo] < MAX_ANGLE)
 8003760:	7bbb      	ldrb	r3, [r7, #14]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	4413      	add	r3, r2
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	2bb3      	cmp	r3, #179	; 0xb3
 800376c:	d834      	bhi.n	80037d8 <legControl+0x4c4>
 800376e:	7b7b      	ldrb	r3, [r7, #13]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	4413      	add	r3, r2
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	2bb3      	cmp	r3, #179	; 0xb3
 800377a:	d82d      	bhi.n	80037d8 <legControl+0x4c4>
					{
						angles[middleServo] += step;
 800377c:	7bbb      	ldrb	r3, [r7, #14]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	4413      	add	r3, r2
 8003784:	8819      	ldrh	r1, [r3, #0]
 8003786:	7bbb      	ldrb	r3, [r7, #14]
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	883a      	ldrh	r2, [r7, #0]
 8003790:	440a      	add	r2, r1
 8003792:	b292      	uxth	r2, r2
 8003794:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(middleServo, angles[middleServo], 0);
 8003796:	7bbb      	ldrb	r3, [r7, #14]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	4413      	add	r3, r2
 800379e:	8819      	ldrh	r1, [r3, #0]
 80037a0:	7bbb      	ldrb	r3, [r7, #14]
 80037a2:	2200      	movs	r2, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fe fb87 	bl	8001eb8 <PCA9685_SetServoAngle>
						angles[topServo] -= 5;
 80037aa:	7b7b      	ldrb	r3, [r7, #13]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	4413      	add	r3, r2
 80037b2:	881a      	ldrh	r2, [r3, #0]
 80037b4:	7b7b      	ldrb	r3, [r7, #13]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	440b      	add	r3, r1
 80037bc:	3a05      	subs	r2, #5
 80037be:	b292      	uxth	r2, r2
 80037c0:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(topServo, angles[topServo], 0);
 80037c2:	7b7b      	ldrb	r3, [r7, #13]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	4413      	add	r3, r2
 80037ca:	8819      	ldrh	r1, [r3, #0]
 80037cc:	7b7b      	ldrb	r3, [r7, #13]
 80037ce:	2200      	movs	r2, #0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe fb71 	bl	8001eb8 <PCA9685_SetServoAngle>
					{
						angles[topServo] -= 5;
						PCA9685_SetServoAngle(topServo, angles[topServo], 0);
					}

					break;
 80037d6:	e078      	b.n	80038ca <legControl+0x5b6>
					else if (angles[middleServo] < MAX_ANGLE)
 80037d8:	7bbb      	ldrb	r3, [r7, #14]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4413      	add	r3, r2
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	2bb3      	cmp	r3, #179	; 0xb3
 80037e4:	d817      	bhi.n	8003816 <legControl+0x502>
						angles[middleServo] += step;
 80037e6:	7bbb      	ldrb	r3, [r7, #14]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	8819      	ldrh	r1, [r3, #0]
 80037f0:	7bbb      	ldrb	r3, [r7, #14]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	4413      	add	r3, r2
 80037f8:	883a      	ldrh	r2, [r7, #0]
 80037fa:	440a      	add	r2, r1
 80037fc:	b292      	uxth	r2, r2
 80037fe:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(middleServo, angles[middleServo], 0);
 8003800:	7bbb      	ldrb	r3, [r7, #14]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4413      	add	r3, r2
 8003808:	8819      	ldrh	r1, [r3, #0]
 800380a:	7bbb      	ldrb	r3, [r7, #14]
 800380c:	2200      	movs	r2, #0
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe fb52 	bl	8001eb8 <PCA9685_SetServoAngle>
					break;
 8003814:	e059      	b.n	80038ca <legControl+0x5b6>
						angles[topServo] -= 5;
 8003816:	7b7b      	ldrb	r3, [r7, #13]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	881a      	ldrh	r2, [r3, #0]
 8003820:	7b7b      	ldrb	r3, [r7, #13]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	440b      	add	r3, r1
 8003828:	3a05      	subs	r2, #5
 800382a:	b292      	uxth	r2, r2
 800382c:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(topServo, angles[topServo], 0);
 800382e:	7b7b      	ldrb	r3, [r7, #13]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	8819      	ldrh	r1, [r3, #0]
 8003838:	7b7b      	ldrb	r3, [r7, #13]
 800383a:	2200      	movs	r2, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe fb3b 	bl	8001eb8 <PCA9685_SetServoAngle>
					break;
 8003842:	e042      	b.n	80038ca <legControl+0x5b6>
				case 'R':
					if (angles[bottomServo] > MIN_ANGLE)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	4413      	add	r3, r2
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d038      	beq.n	80038c4 <legControl+0x5b0>
					{
						angles[bottomServo] -= step;
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	8819      	ldrh	r1, [r3, #0]
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4413      	add	r3, r2
 8003864:	883a      	ldrh	r2, [r7, #0]
 8003866:	1a8a      	subs	r2, r1, r2
 8003868:	b292      	uxth	r2, r2
 800386a:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(bottomServo, angles[bottomServo], 0);
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	4413      	add	r3, r2
 8003874:	8819      	ldrh	r1, [r3, #0]
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	2200      	movs	r2, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe fb1c 	bl	8001eb8 <PCA9685_SetServoAngle>
					}

					break;
 8003880:	e020      	b.n	80038c4 <legControl+0x5b0>
				case 'L':
					if (angles[bottomServo] < MAX_ANGLE)
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	4413      	add	r3, r2
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	2bb3      	cmp	r3, #179	; 0xb3
 800388e:	d81b      	bhi.n	80038c8 <legControl+0x5b4>
					{
						angles[bottomServo] += step;
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	4413      	add	r3, r2
 8003898:	8819      	ldrh	r1, [r3, #0]
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	883a      	ldrh	r2, [r7, #0]
 80038a4:	440a      	add	r2, r1
 80038a6:	b292      	uxth	r2, r2
 80038a8:	801a      	strh	r2, [r3, #0]
						PCA9685_SetServoAngle(bottomServo, angles[bottomServo], 0);
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	8819      	ldrh	r1, [r3, #0]
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	2200      	movs	r2, #0
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fe fafd 	bl	8001eb8 <PCA9685_SetServoAngle>
					}

					break;
 80038be:	e003      	b.n	80038c8 <legControl+0x5b4>
				default:
					break;
 80038c0:	bf00      	nop
 80038c2:	e004      	b.n	80038ce <legControl+0x5ba>
					break;
 80038c4:	bf00      	nop
 80038c6:	e002      	b.n	80038ce <legControl+0x5ba>
					break;
 80038c8:	bf00      	nop
			}
			break;
 80038ca:	e000      	b.n	80038ce <legControl+0x5ba>
		default:
			break;
 80038cc:	bf00      	nop
	}
}
 80038ce:	bf00      	nop
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop

080038d8 <printPosition>:
{
	return angles[servo];
}

void printPosition()
{
 80038d8:	b5b0      	push	{r4, r5, r7, lr}
 80038da:	b0da      	sub	sp, #360	; 0x168
 80038dc:	af02      	add	r7, sp, #8
	int i, j;
	char USART_TxStream[300];
	char axes[4] = {'X', 'Y', 'Z', '\0'};
 80038de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038e2:	4a3a      	ldr	r2, [pc, #232]	; (80039cc <printPosition+0xf4>)
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	601a      	str	r2, [r3, #0]
	char temp[40];
	memset(&USART_TxStream[0], 0, sizeof(USART_TxStream));
 80038e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038f0:	2100      	movs	r1, #0
 80038f2:	4618      	mov	r0, r3
 80038f4:	f004 fcfd 	bl	80082f2 <memset>
	for (i = 0; i < LEG_COUNT; i++)
 80038f8:	2300      	movs	r3, #0
 80038fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80038fe:	e050      	b.n	80039a2 <printPosition+0xca>
	{
		memset(&temp[0], 0, sizeof(temp));
 8003900:	463b      	mov	r3, r7
 8003902:	2228      	movs	r2, #40	; 0x28
 8003904:	2100      	movs	r1, #0
 8003906:	4618      	mov	r0, r3
 8003908:	f004 fcf3 	bl	80082f2 <memset>
		sprintf(temp, "Leg %d:\n\r", i);
 800390c:	463b      	mov	r3, r7
 800390e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8003912:	492f      	ldr	r1, [pc, #188]	; (80039d0 <printPosition+0xf8>)
 8003914:	4618      	mov	r0, r3
 8003916:	f005 f943 	bl	8008ba0 <siprintf>
		strcat(USART_TxStream, temp);
 800391a:	463a      	mov	r2, r7
 800391c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003920:	4611      	mov	r1, r2
 8003922:	4618      	mov	r0, r3
 8003924:	f005 f95c 	bl	8008be0 <strcat>
		for (j = 0; j < 3; j++)
 8003928:	2300      	movs	r3, #0
 800392a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800392e:	e02f      	b.n	8003990 <printPosition+0xb8>
		{
			memset(&temp[0], 0, sizeof(temp));
 8003930:	463b      	mov	r3, r7
 8003932:	2228      	movs	r2, #40	; 0x28
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f004 fcdb 	bl	80082f2 <memset>
			sprintf(temp, "Position %c: %.2f\n\r", axes[j], actualPos[i][j]);
 800393c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003940:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003944:	4413      	add	r3, r2
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	461d      	mov	r5, r3
 800394a:	4922      	ldr	r1, [pc, #136]	; (80039d4 <printPosition+0xfc>)
 800394c:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8003950:	4613      	mov	r3, r2
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	4413      	add	r3, r2
 8003956:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800395a:	4413      	add	r3, r2
 800395c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003960:	4618      	mov	r0, r3
 8003962:	f7fc fd61 	bl	8000428 <__aeabi_f2d>
 8003966:	4603      	mov	r3, r0
 8003968:	460c      	mov	r4, r1
 800396a:	4638      	mov	r0, r7
 800396c:	e9cd 3400 	strd	r3, r4, [sp]
 8003970:	462a      	mov	r2, r5
 8003972:	4919      	ldr	r1, [pc, #100]	; (80039d8 <printPosition+0x100>)
 8003974:	f005 f914 	bl	8008ba0 <siprintf>
			strcat(USART_TxStream, temp);
 8003978:	463a      	mov	r2, r7
 800397a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f005 f92d 	bl	8008be0 <strcat>
		for (j = 0; j < 3; j++)
 8003986:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800398a:	3301      	adds	r3, #1
 800398c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003990:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003994:	2b02      	cmp	r3, #2
 8003996:	ddcb      	ble.n	8003930 <printPosition+0x58>
	for (i = 0; i < LEG_COUNT; i++)
 8003998:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800399c:	3301      	adds	r3, #1
 800399e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80039a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	ddaa      	ble.n	8003900 <printPosition+0x28>
		}
	}
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*) USART_TxStream, (uint16_t)(sizeof(USART_TxStream)-1));
 80039aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039ae:	f240 122b 	movw	r2, #299	; 0x12b
 80039b2:	4619      	mov	r1, r3
 80039b4:	4809      	ldr	r0, [pc, #36]	; (80039dc <printPosition+0x104>)
 80039b6:	f003 ffd5 	bl	8007964 <HAL_UART_Transmit_DMA>
	__HAL_UART_FLUSH_DRREGISTER(&huart1);
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <printPosition+0x104>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
}
 80039c0:	bf00      	nop
 80039c2:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bdb0      	pop	{r4, r5, r7, pc}
 80039ca:	bf00      	nop
 80039cc:	0800c820 	.word	0x0800c820
 80039d0:	0800c800 	.word	0x0800c800
 80039d4:	20000324 	.word	0x20000324
 80039d8:	0800c80c 	.word	0x0800c80c
 80039dc:	20000498 	.word	0x20000498

080039e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80039e6:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <HAL_MspInit+0x5c>)
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <HAL_MspInit+0x5c>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6193      	str	r3, [r2, #24]
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <HAL_MspInit+0x5c>)
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <HAL_MspInit+0x5c>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	4a0e      	ldr	r2, [pc, #56]	; (8003a3c <HAL_MspInit+0x5c>)
 8003a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a08:	61d3      	str	r3, [r2, #28]
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <HAL_MspInit+0x5c>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a12:	607b      	str	r3, [r7, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003a16:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <HAL_MspInit+0x60>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <HAL_MspInit+0x60>)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40010000 	.word	0x40010000

08003a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a48:	bf00      	nop
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr

08003a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a54:	e7fe      	b.n	8003a54 <HardFault_Handler+0x4>

08003a56 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a56:	b480      	push	{r7}
 8003a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a5a:	e7fe      	b.n	8003a5a <MemManage_Handler+0x4>

08003a5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a60:	e7fe      	b.n	8003a60 <BusFault_Handler+0x4>

08003a62 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a66:	e7fe      	b.n	8003a66 <UsageFault_Handler+0x4>

08003a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a6c:	bf00      	nop
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a84:	bf00      	nop
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr

08003a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a90:	f000 faf8 	bl	8004084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a94:	bf00      	nop
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003a9c:	4802      	ldr	r0, [pc, #8]	; (8003aa8 <DMA1_Channel4_IRQHandler+0x10>)
 8003a9e:	f000 fd6d 	bl	800457c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000410 	.word	0x20000410

08003aac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
//	UARTDMA_DMA_IRQHandler(&huartdma);
//	return;
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003ab0:	4802      	ldr	r0, [pc, #8]	; (8003abc <DMA1_Channel5_IRQHandler+0x10>)
 8003ab2:	f000 fd63 	bl	800457c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000454 	.word	0x20000454

08003ac0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ac4:	4802      	ldr	r0, [pc, #8]	; (8003ad0 <TIM2_IRQHandler+0x10>)
 8003ac6:	f003 f9d3 	bl	8006e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	200003c8 	.word	0x200003c8

08003ad4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <TIM3_IRQHandler+0x10>)
 8003ada:	f003 f9c9 	bl	8006e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000380 	.word	0x20000380

08003ae8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003aec:	4802      	ldr	r0, [pc, #8]	; (8003af8 <I2C1_ER_IRQHandler+0x10>)
 8003aee:	f001 fdaf 	bl	8005650 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	2000024c 	.word	0x2000024c

08003afc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
//	UARTDMA_UART_IRQHandler(&huartdma);
//	return;
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b00:	4807      	ldr	r0, [pc, #28]	; (8003b20 <USART1_IRQHandler+0x24>)
 8003b02:	f004 f81b 	bl	8007b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 8003b06:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <USART1_IRQHandler+0x24>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d102      	bne.n	8003b1a <USART1_IRQHandler+0x1e>
  {
	  HAL_UART_RxCpltCallback(&huart1);
 8003b14:	4802      	ldr	r0, [pc, #8]	; (8003b20 <USART1_IRQHandler+0x24>)
 8003b16:	f7fd fed3 	bl	80018c0 <HAL_UART_RxCpltCallback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000498 	.word	0x20000498

08003b24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003b28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b2c:	f000 ffe6 	bl	8004afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b30:	bf00      	nop
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b3c:	4a14      	ldr	r2, [pc, #80]	; (8003b90 <_sbrk+0x5c>)
 8003b3e:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <_sbrk+0x60>)
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b48:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <_sbrk+0x64>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d102      	bne.n	8003b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b50:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <_sbrk+0x64>)
 8003b52:	4a12      	ldr	r2, [pc, #72]	; (8003b9c <_sbrk+0x68>)
 8003b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b56:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <_sbrk+0x64>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d207      	bcs.n	8003b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b64:	f004 fb90 	bl	8008288 <__errno>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	230c      	movs	r3, #12
 8003b6c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b72:	e009      	b.n	8003b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b74:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <_sbrk+0x64>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b7a:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <_sbrk+0x64>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	4a05      	ldr	r2, [pc, #20]	; (8003b98 <_sbrk+0x64>)
 8003b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b86:	68fb      	ldr	r3, [r7, #12]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20005000 	.word	0x20005000
 8003b94:	00000400 	.word	0x00000400
 8003b98:	20000240 	.word	0x20000240
 8003b9c:	200004e0 	.word	0x200004e0

08003ba0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08e      	sub	sp, #56	; 0x38
 8003bb0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	605a      	str	r2, [r3, #4]
 8003bbc:	609a      	str	r2, [r3, #8]
 8003bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bc0:	f107 0320 	add.w	r3, r7, #32
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bca:	1d3b      	adds	r3, r7, #4
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	611a      	str	r2, [r3, #16]
 8003bd8:	615a      	str	r2, [r3, #20]
 8003bda:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8003bdc:	4b2c      	ldr	r3, [pc, #176]	; (8003c90 <MX_TIM2_Init+0xe4>)
 8003bde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003be2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8799;
 8003be4:	4b2a      	ldr	r3, [pc, #168]	; (8003c90 <MX_TIM2_Init+0xe4>)
 8003be6:	f242 225f 	movw	r2, #8799	; 0x225f
 8003bea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bec:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <MX_TIM2_Init+0xe4>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 8003bf2:	4b27      	ldr	r3, [pc, #156]	; (8003c90 <MX_TIM2_Init+0xe4>)
 8003bf4:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003bf8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bfa:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <MX_TIM2_Init+0xe4>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c00:	4b23      	ldr	r3, [pc, #140]	; (8003c90 <MX_TIM2_Init+0xe4>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c06:	4822      	ldr	r0, [pc, #136]	; (8003c90 <MX_TIM2_Init+0xe4>)
 8003c08:	f003 f838 	bl	8006c7c <HAL_TIM_Base_Init>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003c12:	f7fd ff91 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c20:	4619      	mov	r1, r3
 8003c22:	481b      	ldr	r0, [pc, #108]	; (8003c90 <MX_TIM2_Init+0xe4>)
 8003c24:	f003 fa84 	bl	8007130 <HAL_TIM_ConfigClockSource>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003c2e:	f7fd ff83 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003c32:	4817      	ldr	r0, [pc, #92]	; (8003c90 <MX_TIM2_Init+0xe4>)
 8003c34:	f003 f8c4 	bl	8006dc0 <HAL_TIM_OC_Init>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003c3e:	f7fd ff7b 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c42:	2300      	movs	r3, #0
 8003c44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c4a:	f107 0320 	add.w	r3, r7, #32
 8003c4e:	4619      	mov	r1, r3
 8003c50:	480f      	ldr	r0, [pc, #60]	; (8003c90 <MX_TIM2_Init+0xe4>)
 8003c52:	f003 fdc9 	bl	80077e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003c5c:	f7fd ff6c 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003c60:	2300      	movs	r3, #0
 8003c62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c70:	1d3b      	adds	r3, r7, #4
 8003c72:	2200      	movs	r2, #0
 8003c74:	4619      	mov	r1, r3
 8003c76:	4806      	ldr	r0, [pc, #24]	; (8003c90 <MX_TIM2_Init+0xe4>)
 8003c78:	f003 fa02 	bl	8007080 <HAL_TIM_OC_ConfigChannel>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003c82:	f7fd ff59 	bl	8001b38 <Error_Handler>
  }

}
 8003c86:	bf00      	nop
 8003c88:	3738      	adds	r7, #56	; 0x38
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	200003c8 	.word	0x200003c8

08003c94 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08e      	sub	sp, #56	; 0x38
 8003c98:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	605a      	str	r2, [r3, #4]
 8003ca4:	609a      	str	r2, [r3, #8]
 8003ca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ca8:	f107 0320 	add.w	r3, r7, #32
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cb2:	1d3b      	adds	r3, r7, #4
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	60da      	str	r2, [r3, #12]
 8003cbe:	611a      	str	r2, [r3, #16]
 8003cc0:	615a      	str	r2, [r3, #20]
 8003cc2:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003cc4:	4b2b      	ldr	r3, [pc, #172]	; (8003d74 <MX_TIM3_Init+0xe0>)
 8003cc6:	4a2c      	ldr	r2, [pc, #176]	; (8003d78 <MX_TIM3_Init+0xe4>)
 8003cc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 8003cca:	4b2a      	ldr	r3, [pc, #168]	; (8003d74 <MX_TIM3_Init+0xe0>)
 8003ccc:	f242 527f 	movw	r2, #9599	; 0x257f
 8003cd0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cd2:	4b28      	ldr	r3, [pc, #160]	; (8003d74 <MX_TIM3_Init+0xe0>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8003cd8:	4b26      	ldr	r3, [pc, #152]	; (8003d74 <MX_TIM3_Init+0xe0>)
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ce0:	4b24      	ldr	r3, [pc, #144]	; (8003d74 <MX_TIM3_Init+0xe0>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ce6:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <MX_TIM3_Init+0xe0>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003cec:	4821      	ldr	r0, [pc, #132]	; (8003d74 <MX_TIM3_Init+0xe0>)
 8003cee:	f002 ffc5 	bl	8006c7c <HAL_TIM_Base_Init>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003cf8:	f7fd ff1e 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003d02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d06:	4619      	mov	r1, r3
 8003d08:	481a      	ldr	r0, [pc, #104]	; (8003d74 <MX_TIM3_Init+0xe0>)
 8003d0a:	f003 fa11 	bl	8007130 <HAL_TIM_ConfigClockSource>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003d14:	f7fd ff10 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8003d18:	4816      	ldr	r0, [pc, #88]	; (8003d74 <MX_TIM3_Init+0xe0>)
 8003d1a:	f003 f851 	bl	8006dc0 <HAL_TIM_OC_Init>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003d24:	f7fd ff08 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d30:	f107 0320 	add.w	r3, r7, #32
 8003d34:	4619      	mov	r1, r3
 8003d36:	480f      	ldr	r0, [pc, #60]	; (8003d74 <MX_TIM3_Init+0xe0>)
 8003d38:	f003 fd56 	bl	80077e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003d42:	f7fd fef9 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d56:	1d3b      	adds	r3, r7, #4
 8003d58:	2200      	movs	r2, #0
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4805      	ldr	r0, [pc, #20]	; (8003d74 <MX_TIM3_Init+0xe0>)
 8003d5e:	f003 f98f 	bl	8007080 <HAL_TIM_OC_ConfigChannel>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003d68:	f7fd fee6 	bl	8001b38 <Error_Handler>
  }

}
 8003d6c:	bf00      	nop
 8003d6e:	3738      	adds	r7, #56	; 0x38
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20000380 	.word	0x20000380
 8003d78:	40000400 	.word	0x40000400

08003d7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8c:	d114      	bne.n	8003db8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d8e:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <HAL_TIM_Base_MspInit+0x78>)
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	4a18      	ldr	r2, [pc, #96]	; (8003df4 <HAL_TIM_Base_MspInit+0x78>)
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	61d3      	str	r3, [r2, #28]
 8003d9a:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <HAL_TIM_Base_MspInit+0x78>)
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003da6:	2200      	movs	r2, #0
 8003da8:	2100      	movs	r1, #0
 8003daa:	201c      	movs	r0, #28
 8003dac:	f000 fa7f 	bl	80042ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003db0:	201c      	movs	r0, #28
 8003db2:	f000 fa98 	bl	80042e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003db6:	e018      	b.n	8003dea <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a0e      	ldr	r2, [pc, #56]	; (8003df8 <HAL_TIM_Base_MspInit+0x7c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d113      	bne.n	8003dea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <HAL_TIM_Base_MspInit+0x78>)
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	4a0b      	ldr	r2, [pc, #44]	; (8003df4 <HAL_TIM_Base_MspInit+0x78>)
 8003dc8:	f043 0302 	orr.w	r3, r3, #2
 8003dcc:	61d3      	str	r3, [r2, #28]
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_TIM_Base_MspInit+0x78>)
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2100      	movs	r1, #0
 8003dde:	201d      	movs	r0, #29
 8003de0:	f000 fa65 	bl	80042ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003de4:	201d      	movs	r0, #29
 8003de6:	f000 fa7e 	bl	80042e6 <HAL_NVIC_EnableIRQ>
}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40000400 	.word	0x40000400

08003dfc <resetTimer>:
  }
}

/* USER CODE BEGIN 1 */
void resetTimer(TIM_HandleTypeDef* htim)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	htim->Instance->CNT = 0;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr
	...

08003e18 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003e1c:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e1e:	4a12      	ldr	r2, [pc, #72]	; (8003e68 <MX_USART1_UART_Init+0x50>)
 8003e20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003e22:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003e28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e2a:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e30:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e36:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e3c:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e3e:	220c      	movs	r2, #12
 8003e40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e42:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e4e:	4805      	ldr	r0, [pc, #20]	; (8003e64 <MX_USART1_UART_Init+0x4c>)
 8003e50:	f003 fd3a 	bl	80078c8 <HAL_UART_Init>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003e5a:	f7fd fe6d 	bl	8001b38 <Error_Handler>
  }

}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000498 	.word	0x20000498
 8003e68:	40013800 	.word	0x40013800

08003e6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e74:	f107 0310 	add.w	r3, r7, #16
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a42      	ldr	r2, [pc, #264]	; (8003f90 <HAL_UART_MspInit+0x124>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d17d      	bne.n	8003f88 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e8c:	4b41      	ldr	r3, [pc, #260]	; (8003f94 <HAL_UART_MspInit+0x128>)
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	4a40      	ldr	r2, [pc, #256]	; (8003f94 <HAL_UART_MspInit+0x128>)
 8003e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e96:	6193      	str	r3, [r2, #24]
 8003e98:	4b3e      	ldr	r3, [pc, #248]	; (8003f94 <HAL_UART_MspInit+0x128>)
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea4:	4b3b      	ldr	r3, [pc, #236]	; (8003f94 <HAL_UART_MspInit+0x128>)
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	4a3a      	ldr	r2, [pc, #232]	; (8003f94 <HAL_UART_MspInit+0x128>)
 8003eaa:	f043 0304 	orr.w	r3, r3, #4
 8003eae:	6193      	str	r3, [r2, #24]
 8003eb0:	4b38      	ldr	r3, [pc, #224]	; (8003f94 <HAL_UART_MspInit+0x128>)
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ec0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eca:	f107 0310 	add.w	r3, r7, #16
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4831      	ldr	r0, [pc, #196]	; (8003f98 <HAL_UART_MspInit+0x12c>)
 8003ed2:	f000 fc87 	bl	80047e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee4:	f107 0310 	add.w	r3, r7, #16
 8003ee8:	4619      	mov	r1, r3
 8003eea:	482b      	ldr	r0, [pc, #172]	; (8003f98 <HAL_UART_MspInit+0x12c>)
 8003eec:	f000 fc7a 	bl	80047e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003ef0:	4b2a      	ldr	r3, [pc, #168]	; (8003f9c <HAL_UART_MspInit+0x130>)
 8003ef2:	4a2b      	ldr	r2, [pc, #172]	; (8003fa0 <HAL_UART_MspInit+0x134>)
 8003ef4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ef6:	4b29      	ldr	r3, [pc, #164]	; (8003f9c <HAL_UART_MspInit+0x130>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003efc:	4b27      	ldr	r3, [pc, #156]	; (8003f9c <HAL_UART_MspInit+0x130>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f02:	4b26      	ldr	r3, [pc, #152]	; (8003f9c <HAL_UART_MspInit+0x130>)
 8003f04:	2280      	movs	r2, #128	; 0x80
 8003f06:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f08:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <HAL_UART_MspInit+0x130>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f0e:	4b23      	ldr	r3, [pc, #140]	; (8003f9c <HAL_UART_MspInit+0x130>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003f14:	4b21      	ldr	r3, [pc, #132]	; (8003f9c <HAL_UART_MspInit+0x130>)
 8003f16:	2220      	movs	r2, #32
 8003f18:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f1a:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <HAL_UART_MspInit+0x130>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003f20:	481e      	ldr	r0, [pc, #120]	; (8003f9c <HAL_UART_MspInit+0x130>)
 8003f22:	f000 f9fb 	bl	800431c <HAL_DMA_Init>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003f2c:	f7fd fe04 	bl	8001b38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a1a      	ldr	r2, [pc, #104]	; (8003f9c <HAL_UART_MspInit+0x130>)
 8003f34:	635a      	str	r2, [r3, #52]	; 0x34
 8003f36:	4a19      	ldr	r2, [pc, #100]	; (8003f9c <HAL_UART_MspInit+0x130>)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003f3c:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <HAL_UART_MspInit+0x138>)
 8003f3e:	4a1a      	ldr	r2, [pc, #104]	; (8003fa8 <HAL_UART_MspInit+0x13c>)
 8003f40:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f42:	4b18      	ldr	r3, [pc, #96]	; (8003fa4 <HAL_UART_MspInit+0x138>)
 8003f44:	2210      	movs	r2, #16
 8003f46:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f48:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <HAL_UART_MspInit+0x138>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f4e:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <HAL_UART_MspInit+0x138>)
 8003f50:	2280      	movs	r2, #128	; 0x80
 8003f52:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f54:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <HAL_UART_MspInit+0x138>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f5a:	4b12      	ldr	r3, [pc, #72]	; (8003fa4 <HAL_UART_MspInit+0x138>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003f60:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <HAL_UART_MspInit+0x138>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f66:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <HAL_UART_MspInit+0x138>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003f6c:	480d      	ldr	r0, [pc, #52]	; (8003fa4 <HAL_UART_MspInit+0x138>)
 8003f6e:	f000 f9d5 	bl	800431c <HAL_DMA_Init>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8003f78:	f7fd fdde 	bl	8001b38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a09      	ldr	r2, [pc, #36]	; (8003fa4 <HAL_UART_MspInit+0x138>)
 8003f80:	631a      	str	r2, [r3, #48]	; 0x30
 8003f82:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <HAL_UART_MspInit+0x138>)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003f88:	bf00      	nop
 8003f8a:	3720      	adds	r7, #32
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40013800 	.word	0x40013800
 8003f94:	40021000 	.word	0x40021000
 8003f98:	40010800 	.word	0x40010800
 8003f9c:	20000454 	.word	0x20000454
 8003fa0:	40020058 	.word	0x40020058
 8003fa4:	20000410 	.word	0x20000410
 8003fa8:	40020044 	.word	0x40020044

08003fac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003fac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003fae:	e003      	b.n	8003fb8 <LoopCopyDataInit>

08003fb0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003fb2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003fb4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003fb6:	3104      	adds	r1, #4

08003fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003fb8:	480a      	ldr	r0, [pc, #40]	; (8003fe4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003fba:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003fbc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003fbe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003fc0:	d3f6      	bcc.n	8003fb0 <CopyDataInit>
  ldr r2, =_sbss
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	; (8003fec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003fc4:	e002      	b.n	8003fcc <LoopFillZerobss>

08003fc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003fc6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003fc8:	f842 3b04 	str.w	r3, [r2], #4

08003fcc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003fcc:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003fce:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003fd0:	d3f9      	bcc.n	8003fc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003fd2:	f7ff fde5 	bl	8003ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fd6:	f004 f95d 	bl	8008294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003fda:	f7fd f9e1 	bl	80013a0 <main>
  bx lr
 8003fde:	4770      	bx	lr
  ldr r3, =_sidata
 8003fe0:	0800cce0 	.word	0x0800cce0
  ldr r0, =_sdata
 8003fe4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003fe8:	20000210 	.word	0x20000210
  ldr r2, =_sbss
 8003fec:	20000210 	.word	0x20000210
  ldr r3, = _ebss
 8003ff0:	200004e0 	.word	0x200004e0

08003ff4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ff4:	e7fe      	b.n	8003ff4 <ADC1_2_IRQHandler>
	...

08003ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ffc:	4b08      	ldr	r3, [pc, #32]	; (8004020 <HAL_Init+0x28>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a07      	ldr	r2, [pc, #28]	; (8004020 <HAL_Init+0x28>)
 8004002:	f043 0310 	orr.w	r3, r3, #16
 8004006:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004008:	2003      	movs	r0, #3
 800400a:	f000 f945 	bl	8004298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800400e:	2000      	movs	r0, #0
 8004010:	f000 f808 	bl	8004024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004014:	f7ff fce4 	bl	80039e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40022000 	.word	0x40022000

08004024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800402c:	4b12      	ldr	r3, [pc, #72]	; (8004078 <HAL_InitTick+0x54>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4b12      	ldr	r3, [pc, #72]	; (800407c <HAL_InitTick+0x58>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	4619      	mov	r1, r3
 8004036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800403a:	fbb3 f3f1 	udiv	r3, r3, r1
 800403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004042:	4618      	mov	r0, r3
 8004044:	f000 f95d 	bl	8004302 <HAL_SYSTICK_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e00e      	b.n	8004070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b0f      	cmp	r3, #15
 8004056:	d80a      	bhi.n	800406e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004058:	2200      	movs	r2, #0
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004060:	f000 f925 	bl	80042ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004064:	4a06      	ldr	r2, [pc, #24]	; (8004080 <HAL_InitTick+0x5c>)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	e000      	b.n	8004070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20000030 	.word	0x20000030
 800407c:	20000038 	.word	0x20000038
 8004080:	20000034 	.word	0x20000034

08004084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_IncTick+0x1c>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	461a      	mov	r2, r3
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_IncTick+0x20>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4413      	add	r3, r2
 8004094:	4a03      	ldr	r2, [pc, #12]	; (80040a4 <HAL_IncTick+0x20>)
 8004096:	6013      	str	r3, [r2, #0]
}
 8004098:	bf00      	nop
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr
 80040a0:	20000038 	.word	0x20000038
 80040a4:	200004d8 	.word	0x200004d8

080040a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  return uwTick;
 80040ac:	4b02      	ldr	r3, [pc, #8]	; (80040b8 <HAL_GetTick+0x10>)
 80040ae:	681b      	ldr	r3, [r3, #0]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	200004d8 	.word	0x200004d8

080040bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040c4:	f7ff fff0 	bl	80040a8 <HAL_GetTick>
 80040c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040d4:	d005      	beq.n	80040e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <HAL_Delay+0x40>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4413      	add	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040e2:	bf00      	nop
 80040e4:	f7ff ffe0 	bl	80040a8 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d8f7      	bhi.n	80040e4 <HAL_Delay+0x28>
  {
  }
}
 80040f4:	bf00      	nop
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000038 	.word	0x20000038

08004100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004110:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <__NVIC_SetPriorityGrouping+0x44>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800411c:	4013      	ands	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800412c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004132:	4a04      	ldr	r2, [pc, #16]	; (8004144 <__NVIC_SetPriorityGrouping+0x44>)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	60d3      	str	r3, [r2, #12]
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	e000ed00 	.word	0xe000ed00

08004148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <__NVIC_GetPriorityGrouping+0x18>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	0a1b      	lsrs	r3, r3, #8
 8004152:	f003 0307 	and.w	r3, r3, #7
}
 8004156:	4618      	mov	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	2b00      	cmp	r3, #0
 8004174:	db0b      	blt.n	800418e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	f003 021f 	and.w	r2, r3, #31
 800417c:	4906      	ldr	r1, [pc, #24]	; (8004198 <__NVIC_EnableIRQ+0x34>)
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	2001      	movs	r0, #1
 8004186:	fa00 f202 	lsl.w	r2, r0, r2
 800418a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr
 8004198:	e000e100 	.word	0xe000e100

0800419c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	6039      	str	r1, [r7, #0]
 80041a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	db0a      	blt.n	80041c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	490c      	ldr	r1, [pc, #48]	; (80041e8 <__NVIC_SetPriority+0x4c>)
 80041b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ba:	0112      	lsls	r2, r2, #4
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	440b      	add	r3, r1
 80041c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041c4:	e00a      	b.n	80041dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	4908      	ldr	r1, [pc, #32]	; (80041ec <__NVIC_SetPriority+0x50>)
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	3b04      	subs	r3, #4
 80041d4:	0112      	lsls	r2, r2, #4
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	440b      	add	r3, r1
 80041da:	761a      	strb	r2, [r3, #24]
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	e000e100 	.word	0xe000e100
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b089      	sub	sp, #36	; 0x24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f1c3 0307 	rsb	r3, r3, #7
 800420a:	2b04      	cmp	r3, #4
 800420c:	bf28      	it	cs
 800420e:	2304      	movcs	r3, #4
 8004210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	3304      	adds	r3, #4
 8004216:	2b06      	cmp	r3, #6
 8004218:	d902      	bls.n	8004220 <NVIC_EncodePriority+0x30>
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3b03      	subs	r3, #3
 800421e:	e000      	b.n	8004222 <NVIC_EncodePriority+0x32>
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43da      	mvns	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	401a      	ands	r2, r3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004238:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	fa01 f303 	lsl.w	r3, r1, r3
 8004242:	43d9      	mvns	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004248:	4313      	orrs	r3, r2
         );
}
 800424a:	4618      	mov	r0, r3
 800424c:	3724      	adds	r7, #36	; 0x24
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3b01      	subs	r3, #1
 8004260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004264:	d301      	bcc.n	800426a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004266:	2301      	movs	r3, #1
 8004268:	e00f      	b.n	800428a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800426a:	4a0a      	ldr	r2, [pc, #40]	; (8004294 <SysTick_Config+0x40>)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3b01      	subs	r3, #1
 8004270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004272:	210f      	movs	r1, #15
 8004274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004278:	f7ff ff90 	bl	800419c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <SysTick_Config+0x40>)
 800427e:	2200      	movs	r2, #0
 8004280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004282:	4b04      	ldr	r3, [pc, #16]	; (8004294 <SysTick_Config+0x40>)
 8004284:	2207      	movs	r2, #7
 8004286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	e000e010 	.word	0xe000e010

08004298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff ff2d 	bl	8004100 <__NVIC_SetPriorityGrouping>
}
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b086      	sub	sp, #24
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	4603      	mov	r3, r0
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
 80042ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042c0:	f7ff ff42 	bl	8004148 <__NVIC_GetPriorityGrouping>
 80042c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68b9      	ldr	r1, [r7, #8]
 80042ca:	6978      	ldr	r0, [r7, #20]
 80042cc:	f7ff ff90 	bl	80041f0 <NVIC_EncodePriority>
 80042d0:	4602      	mov	r2, r0
 80042d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff ff5f 	bl	800419c <__NVIC_SetPriority>
}
 80042de:	bf00      	nop
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	4603      	mov	r3, r0
 80042ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff ff35 	bl	8004164 <__NVIC_EnableIRQ>
}
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff ffa2 	bl	8004254 <SysTick_Config>
 8004310:	4603      	mov	r3, r0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e043      	b.n	80043ba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <HAL_DMA_Init+0xa8>)
 800433a:	4413      	add	r3, r2
 800433c:	4a22      	ldr	r2, [pc, #136]	; (80043c8 <HAL_DMA_Init+0xac>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	009a      	lsls	r2, r3, #2
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a1f      	ldr	r2, [pc, #124]	; (80043cc <HAL_DMA_Init+0xb0>)
 800434e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004366:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800436a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004374:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800438c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr
 80043c4:	bffdfff8 	.word	0xbffdfff8
 80043c8:	cccccccd 	.word	0xcccccccd
 80043cc:	40020000 	.word	0x40020000

080043d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_DMA_Start_IT+0x20>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e04a      	b.n	8004486 <HAL_DMA_Start_IT+0xb6>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d13a      	bne.n	8004478 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2202      	movs	r2, #2
 8004406:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0201 	bic.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f9ae 	bl	8004788 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	2b00      	cmp	r3, #0
 8004432:	d008      	beq.n	8004446 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 020e 	orr.w	r2, r2, #14
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	e00f      	b.n	8004466 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0204 	bic.w	r2, r2, #4
 8004454:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 020a 	orr.w	r2, r2, #10
 8004464:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	e005      	b.n	8004484 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004480:	2302      	movs	r3, #2
 8004482:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004484:	7dfb      	ldrb	r3, [r7, #23]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d005      	beq.n	80044b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2204      	movs	r2, #4
 80044aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
 80044b0:	e051      	b.n	8004556 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 020e 	bic.w	r2, r2, #14
 80044c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0201 	bic.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a22      	ldr	r2, [pc, #136]	; (8004560 <HAL_DMA_Abort_IT+0xd0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d029      	beq.n	8004530 <HAL_DMA_Abort_IT+0xa0>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a20      	ldr	r2, [pc, #128]	; (8004564 <HAL_DMA_Abort_IT+0xd4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d022      	beq.n	800452c <HAL_DMA_Abort_IT+0x9c>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1f      	ldr	r2, [pc, #124]	; (8004568 <HAL_DMA_Abort_IT+0xd8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d01a      	beq.n	8004526 <HAL_DMA_Abort_IT+0x96>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1d      	ldr	r2, [pc, #116]	; (800456c <HAL_DMA_Abort_IT+0xdc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d012      	beq.n	8004520 <HAL_DMA_Abort_IT+0x90>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <HAL_DMA_Abort_IT+0xe0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00a      	beq.n	800451a <HAL_DMA_Abort_IT+0x8a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1a      	ldr	r2, [pc, #104]	; (8004574 <HAL_DMA_Abort_IT+0xe4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d102      	bne.n	8004514 <HAL_DMA_Abort_IT+0x84>
 800450e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004512:	e00e      	b.n	8004532 <HAL_DMA_Abort_IT+0xa2>
 8004514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004518:	e00b      	b.n	8004532 <HAL_DMA_Abort_IT+0xa2>
 800451a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800451e:	e008      	b.n	8004532 <HAL_DMA_Abort_IT+0xa2>
 8004520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004524:	e005      	b.n	8004532 <HAL_DMA_Abort_IT+0xa2>
 8004526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800452a:	e002      	b.n	8004532 <HAL_DMA_Abort_IT+0xa2>
 800452c:	2310      	movs	r3, #16
 800452e:	e000      	b.n	8004532 <HAL_DMA_Abort_IT+0xa2>
 8004530:	2301      	movs	r3, #1
 8004532:	4a11      	ldr	r2, [pc, #68]	; (8004578 <HAL_DMA_Abort_IT+0xe8>)
 8004534:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	4798      	blx	r3
    } 
  }
  return status;
 8004556:	7bfb      	ldrb	r3, [r7, #15]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40020008 	.word	0x40020008
 8004564:	4002001c 	.word	0x4002001c
 8004568:	40020030 	.word	0x40020030
 800456c:	40020044 	.word	0x40020044
 8004570:	40020058 	.word	0x40020058
 8004574:	4002006c 	.word	0x4002006c
 8004578:	40020000 	.word	0x40020000

0800457c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	2204      	movs	r2, #4
 800459a:	409a      	lsls	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4013      	ands	r3, r2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d04f      	beq.n	8004644 <HAL_DMA_IRQHandler+0xc8>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d04a      	beq.n	8004644 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d107      	bne.n	80045cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0204 	bic.w	r2, r2, #4
 80045ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a66      	ldr	r2, [pc, #408]	; (800476c <HAL_DMA_IRQHandler+0x1f0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d029      	beq.n	800462a <HAL_DMA_IRQHandler+0xae>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a65      	ldr	r2, [pc, #404]	; (8004770 <HAL_DMA_IRQHandler+0x1f4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d022      	beq.n	8004626 <HAL_DMA_IRQHandler+0xaa>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a63      	ldr	r2, [pc, #396]	; (8004774 <HAL_DMA_IRQHandler+0x1f8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d01a      	beq.n	8004620 <HAL_DMA_IRQHandler+0xa4>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a62      	ldr	r2, [pc, #392]	; (8004778 <HAL_DMA_IRQHandler+0x1fc>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d012      	beq.n	800461a <HAL_DMA_IRQHandler+0x9e>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a60      	ldr	r2, [pc, #384]	; (800477c <HAL_DMA_IRQHandler+0x200>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00a      	beq.n	8004614 <HAL_DMA_IRQHandler+0x98>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a5f      	ldr	r2, [pc, #380]	; (8004780 <HAL_DMA_IRQHandler+0x204>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d102      	bne.n	800460e <HAL_DMA_IRQHandler+0x92>
 8004608:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800460c:	e00e      	b.n	800462c <HAL_DMA_IRQHandler+0xb0>
 800460e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004612:	e00b      	b.n	800462c <HAL_DMA_IRQHandler+0xb0>
 8004614:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004618:	e008      	b.n	800462c <HAL_DMA_IRQHandler+0xb0>
 800461a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800461e:	e005      	b.n	800462c <HAL_DMA_IRQHandler+0xb0>
 8004620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004624:	e002      	b.n	800462c <HAL_DMA_IRQHandler+0xb0>
 8004626:	2340      	movs	r3, #64	; 0x40
 8004628:	e000      	b.n	800462c <HAL_DMA_IRQHandler+0xb0>
 800462a:	2304      	movs	r3, #4
 800462c:	4a55      	ldr	r2, [pc, #340]	; (8004784 <HAL_DMA_IRQHandler+0x208>)
 800462e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 8094 	beq.w	8004762 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004642:	e08e      	b.n	8004762 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	2202      	movs	r2, #2
 800464a:	409a      	lsls	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4013      	ands	r3, r2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d056      	beq.n	8004702 <HAL_DMA_IRQHandler+0x186>
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d051      	beq.n	8004702 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 020a 	bic.w	r2, r2, #10
 800467a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a38      	ldr	r2, [pc, #224]	; (800476c <HAL_DMA_IRQHandler+0x1f0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d029      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x166>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a37      	ldr	r2, [pc, #220]	; (8004770 <HAL_DMA_IRQHandler+0x1f4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d022      	beq.n	80046de <HAL_DMA_IRQHandler+0x162>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a35      	ldr	r2, [pc, #212]	; (8004774 <HAL_DMA_IRQHandler+0x1f8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d01a      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x15c>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a34      	ldr	r2, [pc, #208]	; (8004778 <HAL_DMA_IRQHandler+0x1fc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d012      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x156>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a32      	ldr	r2, [pc, #200]	; (800477c <HAL_DMA_IRQHandler+0x200>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00a      	beq.n	80046cc <HAL_DMA_IRQHandler+0x150>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a31      	ldr	r2, [pc, #196]	; (8004780 <HAL_DMA_IRQHandler+0x204>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d102      	bne.n	80046c6 <HAL_DMA_IRQHandler+0x14a>
 80046c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80046c4:	e00e      	b.n	80046e4 <HAL_DMA_IRQHandler+0x168>
 80046c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046ca:	e00b      	b.n	80046e4 <HAL_DMA_IRQHandler+0x168>
 80046cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046d0:	e008      	b.n	80046e4 <HAL_DMA_IRQHandler+0x168>
 80046d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046d6:	e005      	b.n	80046e4 <HAL_DMA_IRQHandler+0x168>
 80046d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046dc:	e002      	b.n	80046e4 <HAL_DMA_IRQHandler+0x168>
 80046de:	2320      	movs	r3, #32
 80046e0:	e000      	b.n	80046e4 <HAL_DMA_IRQHandler+0x168>
 80046e2:	2302      	movs	r3, #2
 80046e4:	4a27      	ldr	r2, [pc, #156]	; (8004784 <HAL_DMA_IRQHandler+0x208>)
 80046e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d034      	beq.n	8004762 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004700:	e02f      	b.n	8004762 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	2208      	movs	r2, #8
 8004708:	409a      	lsls	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4013      	ands	r3, r2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d028      	beq.n	8004764 <HAL_DMA_IRQHandler+0x1e8>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d023      	beq.n	8004764 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 020e 	bic.w	r2, r2, #14
 800472a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004734:	2101      	movs	r1, #1
 8004736:	fa01 f202 	lsl.w	r2, r1, r2
 800473a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	2b00      	cmp	r3, #0
 8004758:	d004      	beq.n	8004764 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	4798      	blx	r3
    }
  }
  return;
 8004762:	bf00      	nop
 8004764:	bf00      	nop
}
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40020008 	.word	0x40020008
 8004770:	4002001c 	.word	0x4002001c
 8004774:	40020030 	.word	0x40020030
 8004778:	40020044 	.word	0x40020044
 800477c:	40020058 	.word	0x40020058
 8004780:	4002006c 	.word	0x4002006c
 8004784:	40020000 	.word	0x40020000

08004788 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479e:	2101      	movs	r1, #1
 80047a0:	fa01 f202 	lsl.w	r2, r1, r2
 80047a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b10      	cmp	r3, #16
 80047b4:	d108      	bne.n	80047c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80047c6:	e007      	b.n	80047d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	60da      	str	r2, [r3, #12]
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr
	...

080047e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b08b      	sub	sp, #44	; 0x2c
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047ee:	2300      	movs	r3, #0
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80047f2:	2300      	movs	r3, #0
 80047f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047f6:	e127      	b.n	8004a48 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80047f8:	2201      	movs	r2, #1
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	4013      	ands	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	429a      	cmp	r2, r3
 8004812:	f040 8116 	bne.w	8004a42 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b12      	cmp	r3, #18
 800481c:	d034      	beq.n	8004888 <HAL_GPIO_Init+0xa4>
 800481e:	2b12      	cmp	r3, #18
 8004820:	d80d      	bhi.n	800483e <HAL_GPIO_Init+0x5a>
 8004822:	2b02      	cmp	r3, #2
 8004824:	d02b      	beq.n	800487e <HAL_GPIO_Init+0x9a>
 8004826:	2b02      	cmp	r3, #2
 8004828:	d804      	bhi.n	8004834 <HAL_GPIO_Init+0x50>
 800482a:	2b00      	cmp	r3, #0
 800482c:	d031      	beq.n	8004892 <HAL_GPIO_Init+0xae>
 800482e:	2b01      	cmp	r3, #1
 8004830:	d01c      	beq.n	800486c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004832:	e048      	b.n	80048c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004834:	2b03      	cmp	r3, #3
 8004836:	d043      	beq.n	80048c0 <HAL_GPIO_Init+0xdc>
 8004838:	2b11      	cmp	r3, #17
 800483a:	d01b      	beq.n	8004874 <HAL_GPIO_Init+0x90>
          break;
 800483c:	e043      	b.n	80048c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800483e:	4a89      	ldr	r2, [pc, #548]	; (8004a64 <HAL_GPIO_Init+0x280>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d026      	beq.n	8004892 <HAL_GPIO_Init+0xae>
 8004844:	4a87      	ldr	r2, [pc, #540]	; (8004a64 <HAL_GPIO_Init+0x280>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d806      	bhi.n	8004858 <HAL_GPIO_Init+0x74>
 800484a:	4a87      	ldr	r2, [pc, #540]	; (8004a68 <HAL_GPIO_Init+0x284>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d020      	beq.n	8004892 <HAL_GPIO_Init+0xae>
 8004850:	4a86      	ldr	r2, [pc, #536]	; (8004a6c <HAL_GPIO_Init+0x288>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d01d      	beq.n	8004892 <HAL_GPIO_Init+0xae>
          break;
 8004856:	e036      	b.n	80048c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004858:	4a85      	ldr	r2, [pc, #532]	; (8004a70 <HAL_GPIO_Init+0x28c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d019      	beq.n	8004892 <HAL_GPIO_Init+0xae>
 800485e:	4a85      	ldr	r2, [pc, #532]	; (8004a74 <HAL_GPIO_Init+0x290>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d016      	beq.n	8004892 <HAL_GPIO_Init+0xae>
 8004864:	4a84      	ldr	r2, [pc, #528]	; (8004a78 <HAL_GPIO_Init+0x294>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <HAL_GPIO_Init+0xae>
          break;
 800486a:	e02c      	b.n	80048c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	623b      	str	r3, [r7, #32]
          break;
 8004872:	e028      	b.n	80048c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	3304      	adds	r3, #4
 800487a:	623b      	str	r3, [r7, #32]
          break;
 800487c:	e023      	b.n	80048c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	3308      	adds	r3, #8
 8004884:	623b      	str	r3, [r7, #32]
          break;
 8004886:	e01e      	b.n	80048c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	330c      	adds	r3, #12
 800488e:	623b      	str	r3, [r7, #32]
          break;
 8004890:	e019      	b.n	80048c6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d102      	bne.n	80048a0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800489a:	2304      	movs	r3, #4
 800489c:	623b      	str	r3, [r7, #32]
          break;
 800489e:	e012      	b.n	80048c6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d105      	bne.n	80048b4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048a8:	2308      	movs	r3, #8
 80048aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69fa      	ldr	r2, [r7, #28]
 80048b0:	611a      	str	r2, [r3, #16]
          break;
 80048b2:	e008      	b.n	80048c6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048b4:	2308      	movs	r3, #8
 80048b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	615a      	str	r2, [r3, #20]
          break;
 80048be:	e002      	b.n	80048c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80048c0:	2300      	movs	r3, #0
 80048c2:	623b      	str	r3, [r7, #32]
          break;
 80048c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2bff      	cmp	r3, #255	; 0xff
 80048ca:	d801      	bhi.n	80048d0 <HAL_GPIO_Init+0xec>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	e001      	b.n	80048d4 <HAL_GPIO_Init+0xf0>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3304      	adds	r3, #4
 80048d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2bff      	cmp	r3, #255	; 0xff
 80048da:	d802      	bhi.n	80048e2 <HAL_GPIO_Init+0xfe>
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	e002      	b.n	80048e8 <HAL_GPIO_Init+0x104>
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	3b08      	subs	r3, #8
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	210f      	movs	r1, #15
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	fa01 f303 	lsl.w	r3, r1, r3
 80048f6:	43db      	mvns	r3, r3
 80048f8:	401a      	ands	r2, r3
 80048fa:	6a39      	ldr	r1, [r7, #32]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004902:	431a      	orrs	r2, r3
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 8096 	beq.w	8004a42 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004916:	4b59      	ldr	r3, [pc, #356]	; (8004a7c <HAL_GPIO_Init+0x298>)
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	4a58      	ldr	r2, [pc, #352]	; (8004a7c <HAL_GPIO_Init+0x298>)
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	6193      	str	r3, [r2, #24]
 8004922:	4b56      	ldr	r3, [pc, #344]	; (8004a7c <HAL_GPIO_Init+0x298>)
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800492e:	4a54      	ldr	r2, [pc, #336]	; (8004a80 <HAL_GPIO_Init+0x29c>)
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	089b      	lsrs	r3, r3, #2
 8004934:	3302      	adds	r3, #2
 8004936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800493a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	220f      	movs	r2, #15
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43db      	mvns	r3, r3
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4013      	ands	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a4b      	ldr	r2, [pc, #300]	; (8004a84 <HAL_GPIO_Init+0x2a0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <HAL_GPIO_Init+0x19e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a4a      	ldr	r2, [pc, #296]	; (8004a88 <HAL_GPIO_Init+0x2a4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00d      	beq.n	800497e <HAL_GPIO_Init+0x19a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a49      	ldr	r2, [pc, #292]	; (8004a8c <HAL_GPIO_Init+0x2a8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d007      	beq.n	800497a <HAL_GPIO_Init+0x196>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a48      	ldr	r2, [pc, #288]	; (8004a90 <HAL_GPIO_Init+0x2ac>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d101      	bne.n	8004976 <HAL_GPIO_Init+0x192>
 8004972:	2303      	movs	r3, #3
 8004974:	e006      	b.n	8004984 <HAL_GPIO_Init+0x1a0>
 8004976:	2304      	movs	r3, #4
 8004978:	e004      	b.n	8004984 <HAL_GPIO_Init+0x1a0>
 800497a:	2302      	movs	r3, #2
 800497c:	e002      	b.n	8004984 <HAL_GPIO_Init+0x1a0>
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <HAL_GPIO_Init+0x1a0>
 8004982:	2300      	movs	r3, #0
 8004984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004986:	f002 0203 	and.w	r2, r2, #3
 800498a:	0092      	lsls	r2, r2, #2
 800498c:	4093      	lsls	r3, r2
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004994:	493a      	ldr	r1, [pc, #232]	; (8004a80 <HAL_GPIO_Init+0x29c>)
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	089b      	lsrs	r3, r3, #2
 800499a:	3302      	adds	r3, #2
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d006      	beq.n	80049bc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80049ae:	4b39      	ldr	r3, [pc, #228]	; (8004a94 <HAL_GPIO_Init+0x2b0>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4938      	ldr	r1, [pc, #224]	; (8004a94 <HAL_GPIO_Init+0x2b0>)
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]
 80049ba:	e006      	b.n	80049ca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80049bc:	4b35      	ldr	r3, [pc, #212]	; (8004a94 <HAL_GPIO_Init+0x2b0>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	43db      	mvns	r3, r3
 80049c4:	4933      	ldr	r1, [pc, #204]	; (8004a94 <HAL_GPIO_Init+0x2b0>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d006      	beq.n	80049e4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80049d6:	4b2f      	ldr	r3, [pc, #188]	; (8004a94 <HAL_GPIO_Init+0x2b0>)
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	492e      	ldr	r1, [pc, #184]	; (8004a94 <HAL_GPIO_Init+0x2b0>)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	4313      	orrs	r3, r2
 80049e0:	604b      	str	r3, [r1, #4]
 80049e2:	e006      	b.n	80049f2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80049e4:	4b2b      	ldr	r3, [pc, #172]	; (8004a94 <HAL_GPIO_Init+0x2b0>)
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	43db      	mvns	r3, r3
 80049ec:	4929      	ldr	r1, [pc, #164]	; (8004a94 <HAL_GPIO_Init+0x2b0>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d006      	beq.n	8004a0c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80049fe:	4b25      	ldr	r3, [pc, #148]	; (8004a94 <HAL_GPIO_Init+0x2b0>)
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	4924      	ldr	r1, [pc, #144]	; (8004a94 <HAL_GPIO_Init+0x2b0>)
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	608b      	str	r3, [r1, #8]
 8004a0a:	e006      	b.n	8004a1a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004a0c:	4b21      	ldr	r3, [pc, #132]	; (8004a94 <HAL_GPIO_Init+0x2b0>)
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	43db      	mvns	r3, r3
 8004a14:	491f      	ldr	r1, [pc, #124]	; (8004a94 <HAL_GPIO_Init+0x2b0>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d006      	beq.n	8004a34 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004a26:	4b1b      	ldr	r3, [pc, #108]	; (8004a94 <HAL_GPIO_Init+0x2b0>)
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	491a      	ldr	r1, [pc, #104]	; (8004a94 <HAL_GPIO_Init+0x2b0>)
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60cb      	str	r3, [r1, #12]
 8004a32:	e006      	b.n	8004a42 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004a34:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <HAL_GPIO_Init+0x2b0>)
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	4915      	ldr	r1, [pc, #84]	; (8004a94 <HAL_GPIO_Init+0x2b0>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	3301      	adds	r3, #1
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f47f aed0 	bne.w	80047f8 <HAL_GPIO_Init+0x14>
  }
}
 8004a58:	bf00      	nop
 8004a5a:	372c      	adds	r7, #44	; 0x2c
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	10210000 	.word	0x10210000
 8004a68:	10110000 	.word	0x10110000
 8004a6c:	10120000 	.word	0x10120000
 8004a70:	10310000 	.word	0x10310000
 8004a74:	10320000 	.word	0x10320000
 8004a78:	10220000 	.word	0x10220000
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	40010000 	.word	0x40010000
 8004a84:	40010800 	.word	0x40010800
 8004a88:	40010c00 	.word	0x40010c00
 8004a8c:	40011000 	.word	0x40011000
 8004a90:	40011400 	.word	0x40011400
 8004a94:	40010400 	.word	0x40010400

08004a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	807b      	strh	r3, [r7, #2]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004aa8:	787b      	ldrb	r3, [r7, #1]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aae:	887a      	ldrh	r2, [r7, #2]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004ab4:	e003      	b.n	8004abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ab6:	887b      	ldrh	r3, [r7, #2]
 8004ab8:	041a      	lsls	r2, r3, #16
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	611a      	str	r2, [r3, #16]
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ada:	887a      	ldrh	r2, [r7, #2]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	041a      	lsls	r2, r3, #16
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	43d9      	mvns	r1, r3
 8004ae6:	887b      	ldrh	r3, [r7, #2]
 8004ae8:	400b      	ands	r3, r1
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	611a      	str	r2, [r3, #16]
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr
	...

08004afc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b06:	4b08      	ldr	r3, [pc, #32]	; (8004b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b08:	695a      	ldr	r2, [r3, #20]
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d006      	beq.n	8004b20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b12:	4a05      	ldr	r2, [pc, #20]	; (8004b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b14:	88fb      	ldrh	r3, [r7, #6]
 8004b16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b18:	88fb      	ldrh	r3, [r7, #6]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fc fff4 	bl	8001b08 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40010400 	.word	0x40010400

08004b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e11f      	b.n	8004d7e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fc fbe6 	bl	8001324 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2224      	movs	r2, #36	; 0x24
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0201 	bic.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b90:	f002 f82e 	bl	8006bf0 <HAL_RCC_GetPCLK1Freq>
 8004b94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	4a7b      	ldr	r2, [pc, #492]	; (8004d88 <HAL_I2C_Init+0x25c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d807      	bhi.n	8004bb0 <HAL_I2C_Init+0x84>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4a7a      	ldr	r2, [pc, #488]	; (8004d8c <HAL_I2C_Init+0x260>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	bf94      	ite	ls
 8004ba8:	2301      	movls	r3, #1
 8004baa:	2300      	movhi	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e006      	b.n	8004bbe <HAL_I2C_Init+0x92>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4a77      	ldr	r2, [pc, #476]	; (8004d90 <HAL_I2C_Init+0x264>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	bf94      	ite	ls
 8004bb8:	2301      	movls	r3, #1
 8004bba:	2300      	movhi	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e0db      	b.n	8004d7e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4a72      	ldr	r2, [pc, #456]	; (8004d94 <HAL_I2C_Init+0x268>)
 8004bca:	fba2 2303 	umull	r2, r3, r2, r3
 8004bce:	0c9b      	lsrs	r3, r3, #18
 8004bd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	4a64      	ldr	r2, [pc, #400]	; (8004d88 <HAL_I2C_Init+0x25c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d802      	bhi.n	8004c00 <HAL_I2C_Init+0xd4>
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	e009      	b.n	8004c14 <HAL_I2C_Init+0xe8>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c06:	fb02 f303 	mul.w	r3, r2, r3
 8004c0a:	4a63      	ldr	r2, [pc, #396]	; (8004d98 <HAL_I2C_Init+0x26c>)
 8004c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c10:	099b      	lsrs	r3, r3, #6
 8004c12:	3301      	adds	r3, #1
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6812      	ldr	r2, [r2, #0]
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	4956      	ldr	r1, [pc, #344]	; (8004d88 <HAL_I2C_Init+0x25c>)
 8004c30:	428b      	cmp	r3, r1
 8004c32:	d80d      	bhi.n	8004c50 <HAL_I2C_Init+0x124>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	1e59      	subs	r1, r3, #1
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c42:	3301      	adds	r3, #1
 8004c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	bf38      	it	cc
 8004c4c:	2304      	movcc	r3, #4
 8004c4e:	e04f      	b.n	8004cf0 <HAL_I2C_Init+0x1c4>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d111      	bne.n	8004c7c <HAL_I2C_Init+0x150>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	1e58      	subs	r0, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6859      	ldr	r1, [r3, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	440b      	add	r3, r1
 8004c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bf0c      	ite	eq
 8004c74:	2301      	moveq	r3, #1
 8004c76:	2300      	movne	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	e012      	b.n	8004ca2 <HAL_I2C_Init+0x176>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	1e58      	subs	r0, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6859      	ldr	r1, [r3, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	0099      	lsls	r1, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c92:	3301      	adds	r3, #1
 8004c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bf0c      	ite	eq
 8004c9c:	2301      	moveq	r3, #1
 8004c9e:	2300      	movne	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_I2C_Init+0x17e>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e022      	b.n	8004cf0 <HAL_I2C_Init+0x1c4>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10e      	bne.n	8004cd0 <HAL_I2C_Init+0x1a4>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1e58      	subs	r0, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6859      	ldr	r1, [r3, #4]
 8004cba:	460b      	mov	r3, r1
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	440b      	add	r3, r1
 8004cc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cce:	e00f      	b.n	8004cf0 <HAL_I2C_Init+0x1c4>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	1e58      	subs	r0, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6859      	ldr	r1, [r3, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	0099      	lsls	r1, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	6809      	ldr	r1, [r1, #0]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69da      	ldr	r2, [r3, #28]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	6911      	ldr	r1, [r2, #16]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68d2      	ldr	r2, [r2, #12]
 8004d2a:	4311      	orrs	r1, r2
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6812      	ldr	r2, [r2, #0]
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	000186a0 	.word	0x000186a0
 8004d8c:	001e847f 	.word	0x001e847f
 8004d90:	003d08ff 	.word	0x003d08ff
 8004d94:	431bde83 	.word	0x431bde83
 8004d98:	10624dd3 	.word	0x10624dd3

08004d9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af02      	add	r7, sp, #8
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	607a      	str	r2, [r7, #4]
 8004da6:	461a      	mov	r2, r3
 8004da8:	460b      	mov	r3, r1
 8004daa:	817b      	strh	r3, [r7, #10]
 8004dac:	4613      	mov	r3, r2
 8004dae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004db0:	f7ff f97a 	bl	80040a8 <HAL_GetTick>
 8004db4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	f040 80e0 	bne.w	8004f84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	2319      	movs	r3, #25
 8004dca:	2201      	movs	r2, #1
 8004dcc:	4970      	ldr	r1, [pc, #448]	; (8004f90 <HAL_I2C_Master_Transmit+0x1f4>)
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f001 f95c 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e0d3      	b.n	8004f86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d101      	bne.n	8004dec <HAL_I2C_Master_Transmit+0x50>
 8004de8:	2302      	movs	r3, #2
 8004dea:	e0cc      	b.n	8004f86 <HAL_I2C_Master_Transmit+0x1ea>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d007      	beq.n	8004e12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0201 	orr.w	r2, r2, #1
 8004e10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2221      	movs	r2, #33	; 0x21
 8004e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2210      	movs	r2, #16
 8004e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	893a      	ldrh	r2, [r7, #8]
 8004e42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4a50      	ldr	r2, [pc, #320]	; (8004f94 <HAL_I2C_Master_Transmit+0x1f8>)
 8004e52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e54:	8979      	ldrh	r1, [r7, #10]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	6a3a      	ldr	r2, [r7, #32]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fe6e 	bl	8005b3c <I2C_MasterRequestWrite>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e08d      	b.n	8004f86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	613b      	str	r3, [r7, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e80:	e066      	b.n	8004f50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	6a39      	ldr	r1, [r7, #32]
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f001 f9d6 	bl	8006238 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00d      	beq.n	8004eae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d107      	bne.n	8004eaa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e06b      	b.n	8004f86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	781a      	ldrb	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d11b      	bne.n	8004f24 <HAL_I2C_Master_Transmit+0x188>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d017      	beq.n	8004f24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	781a      	ldrb	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	6a39      	ldr	r1, [r7, #32]
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f001 f9c6 	bl	80062ba <I2C_WaitOnBTFFlagUntilTimeout>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00d      	beq.n	8004f50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d107      	bne.n	8004f4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e01a      	b.n	8004f86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d194      	bne.n	8004e82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	e000      	b.n	8004f86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f84:	2302      	movs	r3, #2
  }
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	00100002 	.word	0x00100002
 8004f94:	ffff0000 	.word	0xffff0000

08004f98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	817b      	strh	r3, [r7, #10]
 8004faa:	460b      	mov	r3, r1
 8004fac:	813b      	strh	r3, [r7, #8]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fb2:	f7ff f879 	bl	80040a8 <HAL_GetTick>
 8004fb6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	f040 80d9 	bne.w	8005178 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	2319      	movs	r3, #25
 8004fcc:	2201      	movs	r2, #1
 8004fce:	496d      	ldr	r1, [pc, #436]	; (8005184 <HAL_I2C_Mem_Write+0x1ec>)
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f001 f85b 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e0cc      	b.n	800517a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_I2C_Mem_Write+0x56>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e0c5      	b.n	800517a <HAL_I2C_Mem_Write+0x1e2>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b01      	cmp	r3, #1
 8005002:	d007      	beq.n	8005014 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005022:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2221      	movs	r2, #33	; 0x21
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2240      	movs	r2, #64	; 0x40
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a3a      	ldr	r2, [r7, #32]
 800503e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005044:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4a4d      	ldr	r2, [pc, #308]	; (8005188 <HAL_I2C_Mem_Write+0x1f0>)
 8005054:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005056:	88f8      	ldrh	r0, [r7, #6]
 8005058:	893a      	ldrh	r2, [r7, #8]
 800505a:	8979      	ldrh	r1, [r7, #10]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	9301      	str	r3, [sp, #4]
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	4603      	mov	r3, r0
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 fdea 	bl	8005c40 <I2C_RequestMemoryWrite>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d052      	beq.n	8005118 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e081      	b.n	800517a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f001 f8dc 	bl	8006238 <I2C_WaitOnTXEFlagUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00d      	beq.n	80050a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	2b04      	cmp	r3, #4
 800508c:	d107      	bne.n	800509e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800509c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e06b      	b.n	800517a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	781a      	ldrb	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b04      	cmp	r3, #4
 80050de:	d11b      	bne.n	8005118 <HAL_I2C_Mem_Write+0x180>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d017      	beq.n	8005118 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	781a      	ldrb	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1aa      	bne.n	8005076 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f001 f8c8 	bl	80062ba <I2C_WaitOnBTFFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00d      	beq.n	800514c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	2b04      	cmp	r3, #4
 8005136:	d107      	bne.n	8005148 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005146:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e016      	b.n	800517a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	e000      	b.n	800517a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005178:	2302      	movs	r3, #2
  }
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	00100002 	.word	0x00100002
 8005188:	ffff0000 	.word	0xffff0000

0800518c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08c      	sub	sp, #48	; 0x30
 8005190:	af02      	add	r7, sp, #8
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	4608      	mov	r0, r1
 8005196:	4611      	mov	r1, r2
 8005198:	461a      	mov	r2, r3
 800519a:	4603      	mov	r3, r0
 800519c:	817b      	strh	r3, [r7, #10]
 800519e:	460b      	mov	r3, r1
 80051a0:	813b      	strh	r3, [r7, #8]
 80051a2:	4613      	mov	r3, r2
 80051a4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051aa:	f7fe ff7d 	bl	80040a8 <HAL_GetTick>
 80051ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	f040 823d 	bne.w	8005638 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	2319      	movs	r3, #25
 80051c4:	2201      	movs	r2, #1
 80051c6:	4981      	ldr	r1, [pc, #516]	; (80053cc <HAL_I2C_Mem_Read+0x240>)
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 ff5f 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80051d4:	2302      	movs	r3, #2
 80051d6:	e230      	b.n	800563a <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_I2C_Mem_Read+0x5a>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e229      	b.n	800563a <HAL_I2C_Mem_Read+0x4ae>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d007      	beq.n	800520c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0201 	orr.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800521a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2222      	movs	r2, #34	; 0x22
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2240      	movs	r2, #64	; 0x40
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005236:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800523c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4a61      	ldr	r2, [pc, #388]	; (80053d0 <HAL_I2C_Mem_Read+0x244>)
 800524c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800524e:	88f8      	ldrh	r0, [r7, #6]
 8005250:	893a      	ldrh	r2, [r7, #8]
 8005252:	8979      	ldrh	r1, [r7, #10]
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	9301      	str	r3, [sp, #4]
 8005258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	4603      	mov	r3, r0
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 fd84 	bl	8005d6c <I2C_RequestMemoryRead>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e1e5      	b.n	800563a <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005272:	2b00      	cmp	r3, #0
 8005274:	d113      	bne.n	800529e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005276:	2300      	movs	r3, #0
 8005278:	61fb      	str	r3, [r7, #28]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	61fb      	str	r3, [r7, #28]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	61fb      	str	r3, [r7, #28]
 800528a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	e1b9      	b.n	8005612 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d11d      	bne.n	80052e2 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052b6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b8:	2300      	movs	r3, #0
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	61bb      	str	r3, [r7, #24]
 80052cc:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80052de:	b662      	cpsie	i
 80052e0:	e197      	b.n	8005612 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d11d      	bne.n	8005326 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80052fa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005320:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005322:	b662      	cpsie	i
 8005324:	e175      	b.n	8005612 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005334:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005336:	2300      	movs	r3, #0
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800534c:	e161      	b.n	8005612 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005352:	2b03      	cmp	r3, #3
 8005354:	f200 811a 	bhi.w	800558c <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535c:	2b01      	cmp	r3, #1
 800535e:	d123      	bne.n	80053a8 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005362:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 ffe9 	bl	800633c <I2C_WaitOnRXNEFlagUntilTimeout>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e162      	b.n	800563a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053a6:	e134      	b.n	8005612 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d150      	bne.n	8005452 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	2200      	movs	r2, #0
 80053b8:	4906      	ldr	r1, [pc, #24]	; (80053d4 <HAL_I2C_Mem_Read+0x248>)
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 fe66 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d008      	beq.n	80053d8 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e137      	b.n	800563a <HAL_I2C_Mem_Read+0x4ae>
 80053ca:	bf00      	nop
 80053cc:	00100002 	.word	0x00100002
 80053d0:	ffff0000 	.word	0xffff0000
 80053d4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80053d8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005412:	b29b      	uxth	r3, r3
 8005414:	3b01      	subs	r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800541c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005450:	e0df      	b.n	8005612 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	2200      	movs	r2, #0
 800545a:	497a      	ldr	r1, [pc, #488]	; (8005644 <HAL_I2C_Mem_Read+0x4b8>)
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 fe15 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e0e6      	b.n	800563a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800547a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800547c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549a:	3b01      	subs	r3, #1
 800549c:	b29a      	uxth	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80054b0:	4b65      	ldr	r3, [pc, #404]	; (8005648 <HAL_I2C_Mem_Read+0x4bc>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	08db      	lsrs	r3, r3, #3
 80054b6:	4a65      	ldr	r2, [pc, #404]	; (800564c <HAL_I2C_Mem_Read+0x4c0>)
 80054b8:	fba2 2303 	umull	r2, r3, r2, r3
 80054bc:	0a1a      	lsrs	r2, r3, #8
 80054be:	4613      	mov	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	00da      	lsls	r2, r3, #3
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d117      	bne.n	8005506 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f0:	f043 0220 	orr.w	r2, r3, #32
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80054f8:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e099      	b.n	800563a <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b04      	cmp	r3, #4
 8005512:	d1da      	bne.n	80054ca <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005556:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	3b01      	subs	r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	855a      	strh	r2, [r3, #42]	; 0x2a
 800558a:	e042      	b.n	8005612 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800558c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 fed3 	bl	800633c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e04c      	b.n	800563a <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d118      	bne.n	8005612 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	3b01      	subs	r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005616:	2b00      	cmp	r3, #0
 8005618:	f47f ae99 	bne.w	800534e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	e000      	b.n	800563a <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8005638:	2302      	movs	r3, #2
  }
}
 800563a:	4618      	mov	r0, r3
 800563c:	3728      	adds	r7, #40	; 0x28
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	00010004 	.word	0x00010004
 8005648:	20000030 	.word	0x20000030
 800564c:	14f8b589 	.word	0x14f8b589

08005650 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08a      	sub	sp, #40	; 0x28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005668:	2300      	movs	r3, #0
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005672:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	0a1b      	lsrs	r3, r3, #8
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d016      	beq.n	80056ae <HAL_I2C_ER_IRQHandler+0x5e>
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	0a1b      	lsrs	r3, r3, #8
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d010      	beq.n	80056ae <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	f043 0301 	orr.w	r3, r3, #1
 8005692:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800569c:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056ac:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	0a5b      	lsrs	r3, r3, #9
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00e      	beq.n	80056d8 <HAL_I2C_ER_IRQHandler+0x88>
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	0a1b      	lsrs	r3, r3, #8
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d008      	beq.n	80056d8 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	f043 0302 	orr.w	r3, r3, #2
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80056d6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	0a9b      	lsrs	r3, r3, #10
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d03f      	beq.n	8005764 <HAL_I2C_ER_IRQHandler+0x114>
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	0a1b      	lsrs	r3, r3, #8
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d039      	beq.n	8005764 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80056f0:	7efb      	ldrb	r3, [r7, #27]
 80056f2:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005702:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800570a:	7ebb      	ldrb	r3, [r7, #26]
 800570c:	2b20      	cmp	r3, #32
 800570e:	d112      	bne.n	8005736 <HAL_I2C_ER_IRQHandler+0xe6>
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10f      	bne.n	8005736 <HAL_I2C_ER_IRQHandler+0xe6>
 8005716:	7cfb      	ldrb	r3, [r7, #19]
 8005718:	2b21      	cmp	r3, #33	; 0x21
 800571a:	d008      	beq.n	800572e <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800571c:	7cfb      	ldrb	r3, [r7, #19]
 800571e:	2b29      	cmp	r3, #41	; 0x29
 8005720:	d005      	beq.n	800572e <HAL_I2C_ER_IRQHandler+0xde>
 8005722:	7cfb      	ldrb	r3, [r7, #19]
 8005724:	2b28      	cmp	r3, #40	; 0x28
 8005726:	d106      	bne.n	8005736 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b21      	cmp	r3, #33	; 0x21
 800572c:	d103      	bne.n	8005736 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f862 	bl	80057f8 <I2C_Slave_AF>
 8005734:	e016      	b.n	8005764 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800573e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	f043 0304 	orr.w	r3, r3, #4
 8005746:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005748:	7efb      	ldrb	r3, [r7, #27]
 800574a:	2b10      	cmp	r3, #16
 800574c:	d002      	beq.n	8005754 <HAL_I2C_ER_IRQHandler+0x104>
 800574e:	7efb      	ldrb	r3, [r7, #27]
 8005750:	2b40      	cmp	r3, #64	; 0x40
 8005752:	d107      	bne.n	8005764 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005762:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	0adb      	lsrs	r3, r3, #11
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00e      	beq.n	800578e <HAL_I2C_ER_IRQHandler+0x13e>
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	0a1b      	lsrs	r3, r3, #8
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d008      	beq.n	800578e <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	f043 0308 	orr.w	r3, r3, #8
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800578c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	2b00      	cmp	r3, #0
 8005792:	d008      	beq.n	80057a6 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	431a      	orrs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f899 	bl	80058d8 <I2C_ITError>
  }
}
 80057a6:	bf00      	nop
 80057a8:	3728      	adds	r7, #40	; 0x28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr

080057c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr

080057d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr

080057e4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr
	...

080057f8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005806:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b08      	cmp	r3, #8
 8005812:	d002      	beq.n	800581a <I2C_Slave_AF+0x22>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b20      	cmp	r3, #32
 8005818:	d129      	bne.n	800586e <I2C_Slave_AF+0x76>
 800581a:	7bfb      	ldrb	r3, [r7, #15]
 800581c:	2b28      	cmp	r3, #40	; 0x28
 800581e:	d126      	bne.n	800586e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a2c      	ldr	r2, [pc, #176]	; (80058d4 <I2C_Slave_AF+0xdc>)
 8005824:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005834:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800583e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff ffaa 	bl	80057c0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800586c:	e02e      	b.n	80058cc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	2b21      	cmp	r3, #33	; 0x21
 8005872:	d126      	bne.n	80058c2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a17      	ldr	r2, [pc, #92]	; (80058d4 <I2C_Slave_AF+0xdc>)
 8005878:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2221      	movs	r2, #33	; 0x21
 800587e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800589e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058a8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff ff77 	bl	80057ae <HAL_I2C_SlaveTxCpltCallback>
}
 80058c0:	e004      	b.n	80058cc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058ca:	615a      	str	r2, [r3, #20]
}
 80058cc:	bf00      	nop
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	ffff0000 	.word	0xffff0000

080058d8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058f0:	7bbb      	ldrb	r3, [r7, #14]
 80058f2:	2b10      	cmp	r3, #16
 80058f4:	d002      	beq.n	80058fc <I2C_ITError+0x24>
 80058f6:	7bbb      	ldrb	r3, [r7, #14]
 80058f8:	2b40      	cmp	r3, #64	; 0x40
 80058fa:	d10a      	bne.n	8005912 <I2C_ITError+0x3a>
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
 80058fe:	2b22      	cmp	r3, #34	; 0x22
 8005900:	d107      	bne.n	8005912 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005910:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005912:	7bfb      	ldrb	r3, [r7, #15]
 8005914:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005918:	2b28      	cmp	r3, #40	; 0x28
 800591a:	d107      	bne.n	800592c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2228      	movs	r2, #40	; 0x28
 8005926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800592a:	e015      	b.n	8005958 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800593a:	d00a      	beq.n	8005952 <I2C_ITError+0x7a>
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	2b60      	cmp	r3, #96	; 0x60
 8005940:	d007      	beq.n	8005952 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005966:	d161      	bne.n	8005a2c <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005976:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005980:	2b01      	cmp	r3, #1
 8005982:	d020      	beq.n	80059c6 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005988:	4a6a      	ldr	r2, [pc, #424]	; (8005b34 <I2C_ITError+0x25c>)
 800598a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	4618      	mov	r0, r3
 8005992:	f7fe fd7d 	bl	8004490 <HAL_DMA_Abort_IT>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 8089 	beq.w	8005ab0 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0201 	bic.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059c0:	4610      	mov	r0, r2
 80059c2:	4798      	blx	r3
 80059c4:	e074      	b.n	8005ab0 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	4a5a      	ldr	r2, [pc, #360]	; (8005b34 <I2C_ITError+0x25c>)
 80059cc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe fd5c 	bl	8004490 <HAL_DMA_Abort_IT>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d068      	beq.n	8005ab0 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b40      	cmp	r3, #64	; 0x40
 80059ea:	d10b      	bne.n	8005a04 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691a      	ldr	r2, [r3, #16]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0201 	bic.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a26:	4610      	mov	r0, r2
 8005a28:	4798      	blx	r3
 8005a2a:	e041      	b.n	8005ab0 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b60      	cmp	r3, #96	; 0x60
 8005a36:	d125      	bne.n	8005a84 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a50:	2b40      	cmp	r3, #64	; 0x40
 8005a52:	d10b      	bne.n	8005a6c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0201 	bic.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff feb1 	bl	80057e4 <HAL_I2C_AbortCpltCallback>
 8005a82:	e015      	b.n	8005ab0 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8e:	2b40      	cmp	r3, #64	; 0x40
 8005a90:	d10b      	bne.n	8005aaa <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff fe91 	bl	80057d2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10e      	bne.n	8005ade <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d109      	bne.n	8005ade <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d104      	bne.n	8005ade <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005aec:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d113      	bne.n	8005b2a <I2C_ITError+0x252>
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	2b28      	cmp	r3, #40	; 0x28
 8005b06:	d110      	bne.n	8005b2a <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a0b      	ldr	r2, [pc, #44]	; (8005b38 <I2C_ITError+0x260>)
 8005b0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff fe4b 	bl	80057c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b2a:	bf00      	nop
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	08005f3d 	.word	0x08005f3d
 8005b38:	ffff0000 	.word	0xffff0000

08005b3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b088      	sub	sp, #32
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	607a      	str	r2, [r7, #4]
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d006      	beq.n	8005b66 <I2C_MasterRequestWrite+0x2a>
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d003      	beq.n	8005b66 <I2C_MasterRequestWrite+0x2a>
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b64:	d108      	bne.n	8005b78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	e00b      	b.n	8005b90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7c:	2b12      	cmp	r3, #18
 8005b7e:	d107      	bne.n	8005b90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 fa75 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00d      	beq.n	8005bc4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb6:	d103      	bne.n	8005bc0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e035      	b.n	8005c30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bcc:	d108      	bne.n	8005be0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bce:	897b      	ldrh	r3, [r7, #10]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bdc:	611a      	str	r2, [r3, #16]
 8005bde:	e01b      	b.n	8005c18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005be0:	897b      	ldrh	r3, [r7, #10]
 8005be2:	11db      	asrs	r3, r3, #7
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	f003 0306 	and.w	r3, r3, #6
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f063 030f 	orn	r3, r3, #15
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	490e      	ldr	r1, [pc, #56]	; (8005c38 <I2C_MasterRequestWrite+0xfc>)
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 fa9b 	bl	800613a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e010      	b.n	8005c30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c0e:	897b      	ldrh	r3, [r7, #10]
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	4907      	ldr	r1, [pc, #28]	; (8005c3c <I2C_MasterRequestWrite+0x100>)
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 fa8b 	bl	800613a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	00010008 	.word	0x00010008
 8005c3c:	00010002 	.word	0x00010002

08005c40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	4608      	mov	r0, r1
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	817b      	strh	r3, [r7, #10]
 8005c52:	460b      	mov	r3, r1
 8005c54:	813b      	strh	r3, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 fa08 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00d      	beq.n	8005c9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c90:	d103      	bne.n	8005c9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e05f      	b.n	8005d5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c9e:	897b      	ldrh	r3, [r7, #10]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	6a3a      	ldr	r2, [r7, #32]
 8005cb2:	492d      	ldr	r1, [pc, #180]	; (8005d68 <I2C_RequestMemoryWrite+0x128>)
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fa40 	bl	800613a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e04c      	b.n	8005d5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cdc:	6a39      	ldr	r1, [r7, #32]
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 faaa 	bl	8006238 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00d      	beq.n	8005d06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d107      	bne.n	8005d02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e02b      	b.n	8005d5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d06:	88fb      	ldrh	r3, [r7, #6]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d105      	bne.n	8005d18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d0c:	893b      	ldrh	r3, [r7, #8]
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	611a      	str	r2, [r3, #16]
 8005d16:	e021      	b.n	8005d5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d18:	893b      	ldrh	r3, [r7, #8]
 8005d1a:	0a1b      	lsrs	r3, r3, #8
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d28:	6a39      	ldr	r1, [r7, #32]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 fa84 	bl	8006238 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00d      	beq.n	8005d52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d107      	bne.n	8005d4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e005      	b.n	8005d5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d52:	893b      	ldrh	r3, [r7, #8]
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	00010002 	.word	0x00010002

08005d6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	4608      	mov	r0, r1
 8005d76:	4611      	mov	r1, r2
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	817b      	strh	r3, [r7, #10]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	813b      	strh	r3, [r7, #8]
 8005d82:	4613      	mov	r3, r2
 8005d84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005da4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 f96a 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00d      	beq.n	8005dda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dcc:	d103      	bne.n	8005dd6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e0aa      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dda:	897b      	ldrh	r3, [r7, #10]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005de8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	6a3a      	ldr	r2, [r7, #32]
 8005dee:	4952      	ldr	r1, [pc, #328]	; (8005f38 <I2C_RequestMemoryRead+0x1cc>)
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f9a2 	bl	800613a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e097      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e18:	6a39      	ldr	r1, [r7, #32]
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fa0c 	bl	8006238 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00d      	beq.n	8005e42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d107      	bne.n	8005e3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e076      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e42:	88fb      	ldrh	r3, [r7, #6]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d105      	bne.n	8005e54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e48:	893b      	ldrh	r3, [r7, #8]
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	611a      	str	r2, [r3, #16]
 8005e52:	e021      	b.n	8005e98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e54:	893b      	ldrh	r3, [r7, #8]
 8005e56:	0a1b      	lsrs	r3, r3, #8
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e64:	6a39      	ldr	r1, [r7, #32]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f9e6 	bl	8006238 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00d      	beq.n	8005e8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d107      	bne.n	8005e8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e050      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e8e:	893b      	ldrh	r3, [r7, #8]
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9a:	6a39      	ldr	r1, [r7, #32]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f9cb 	bl	8006238 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00d      	beq.n	8005ec4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d107      	bne.n	8005ec0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ebe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e035      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ed2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 f8d3 	bl	800608c <I2C_WaitOnFlagUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00d      	beq.n	8005f08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efa:	d103      	bne.n	8005f04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e013      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f08:	897b      	ldrh	r3, [r7, #10]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	6a3a      	ldr	r2, [r7, #32]
 8005f1c:	4906      	ldr	r1, [pc, #24]	; (8005f38 <I2C_RequestMemoryRead+0x1cc>)
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 f90b 	bl	800613a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	00010002 	.word	0x00010002

08005f3c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f54:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f56:	4b4b      	ldr	r3, [pc, #300]	; (8006084 <I2C_DMAAbort+0x148>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	08db      	lsrs	r3, r3, #3
 8005f5c:	4a4a      	ldr	r2, [pc, #296]	; (8006088 <I2C_DMAAbort+0x14c>)
 8005f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f62:	0a1a      	lsrs	r2, r3, #8
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	00da      	lsls	r2, r3, #3
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	f043 0220 	orr.w	r2, r3, #32
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005f82:	e00a      	b.n	8005f9a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f98:	d0ea      	beq.n	8005f70 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fdc:	2200      	movs	r2, #0
 8005fde:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	2200      	movs	r2, #0
 8005fee:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0201 	bic.w	r2, r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b60      	cmp	r3, #96	; 0x60
 800600a:	d10e      	bne.n	800602a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2200      	movs	r2, #0
 8006020:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006022:	6978      	ldr	r0, [r7, #20]
 8006024:	f7ff fbde 	bl	80057e4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006028:	e027      	b.n	800607a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800602a:	7cfb      	ldrb	r3, [r7, #19]
 800602c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006030:	2b28      	cmp	r3, #40	; 0x28
 8006032:	d117      	bne.n	8006064 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006052:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2200      	movs	r2, #0
 8006058:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2228      	movs	r2, #40	; 0x28
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006062:	e007      	b.n	8006074 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2220      	movs	r2, #32
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006074:	6978      	ldr	r0, [r7, #20]
 8006076:	f7ff fbac 	bl	80057d2 <HAL_I2C_ErrorCallback>
}
 800607a:	bf00      	nop
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000030 	.word	0x20000030
 8006088:	14f8b589 	.word	0x14f8b589

0800608c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	603b      	str	r3, [r7, #0]
 8006098:	4613      	mov	r3, r2
 800609a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800609c:	e025      	b.n	80060ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060a4:	d021      	beq.n	80060ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a6:	f7fd ffff 	bl	80040a8 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d302      	bcc.n	80060bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d116      	bne.n	80060ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	f043 0220 	orr.w	r2, r3, #32
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e023      	b.n	8006132 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	0c1b      	lsrs	r3, r3, #16
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d10d      	bne.n	8006110 <I2C_WaitOnFlagUntilTimeout+0x84>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	43da      	mvns	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4013      	ands	r3, r2
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	bf0c      	ite	eq
 8006106:	2301      	moveq	r3, #1
 8006108:	2300      	movne	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	461a      	mov	r2, r3
 800610e:	e00c      	b.n	800612a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	43da      	mvns	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4013      	ands	r3, r2
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	bf0c      	ite	eq
 8006122:	2301      	moveq	r3, #1
 8006124:	2300      	movne	r3, #0
 8006126:	b2db      	uxtb	r3, r3
 8006128:	461a      	mov	r2, r3
 800612a:	79fb      	ldrb	r3, [r7, #7]
 800612c:	429a      	cmp	r2, r3
 800612e:	d0b6      	beq.n	800609e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b084      	sub	sp, #16
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]
 8006146:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006148:	e051      	b.n	80061ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006158:	d123      	bne.n	80061a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006168:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006172:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	f043 0204 	orr.w	r2, r3, #4
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e046      	b.n	8006230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061a8:	d021      	beq.n	80061ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061aa:	f7fd ff7d 	bl	80040a8 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d302      	bcc.n	80061c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d116      	bne.n	80061ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f043 0220 	orr.w	r2, r3, #32
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e020      	b.n	8006230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	0c1b      	lsrs	r3, r3, #16
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d10c      	bne.n	8006212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	43da      	mvns	r2, r3
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	4013      	ands	r3, r2
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	bf14      	ite	ne
 800620a:	2301      	movne	r3, #1
 800620c:	2300      	moveq	r3, #0
 800620e:	b2db      	uxtb	r3, r3
 8006210:	e00b      	b.n	800622a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	43da      	mvns	r2, r3
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4013      	ands	r3, r2
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	bf14      	ite	ne
 8006224:	2301      	movne	r3, #1
 8006226:	2300      	moveq	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d18d      	bne.n	800614a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006244:	e02d      	b.n	80062a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 f8ce 	bl	80063e8 <I2C_IsAcknowledgeFailed>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e02d      	b.n	80062b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800625c:	d021      	beq.n	80062a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800625e:	f7fd ff23 	bl	80040a8 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	429a      	cmp	r2, r3
 800626c:	d302      	bcc.n	8006274 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d116      	bne.n	80062a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2220      	movs	r2, #32
 800627e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	f043 0220 	orr.w	r2, r3, #32
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e007      	b.n	80062b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ac:	2b80      	cmp	r3, #128	; 0x80
 80062ae:	d1ca      	bne.n	8006246 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b084      	sub	sp, #16
 80062be:	af00      	add	r7, sp, #0
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062c6:	e02d      	b.n	8006324 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 f88d 	bl	80063e8 <I2C_IsAcknowledgeFailed>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e02d      	b.n	8006334 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062de:	d021      	beq.n	8006324 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e0:	f7fd fee2 	bl	80040a8 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d302      	bcc.n	80062f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d116      	bne.n	8006324 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2220      	movs	r2, #32
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006310:	f043 0220 	orr.w	r2, r3, #32
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e007      	b.n	8006334 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	f003 0304 	and.w	r3, r3, #4
 800632e:	2b04      	cmp	r3, #4
 8006330:	d1ca      	bne.n	80062c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006348:	e042      	b.n	80063d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b10      	cmp	r3, #16
 8006356:	d119      	bne.n	800638c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f06f 0210 	mvn.w	r2, #16
 8006360:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e029      	b.n	80063e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800638c:	f7fd fe8c 	bl	80040a8 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	429a      	cmp	r2, r3
 800639a:	d302      	bcc.n	80063a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d116      	bne.n	80063d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063bc:	f043 0220 	orr.w	r2, r3, #32
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e007      	b.n	80063e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063da:	2b40      	cmp	r3, #64	; 0x40
 80063dc:	d1b5      	bne.n	800634a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063fe:	d11b      	bne.n	8006438 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006408:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	f043 0204 	orr.w	r2, r3, #4
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e000      	b.n	800643a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	bc80      	pop	{r7}
 8006442:	4770      	bx	lr

08006444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e26c      	b.n	8006930 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 8087 	beq.w	8006572 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006464:	4b92      	ldr	r3, [pc, #584]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f003 030c 	and.w	r3, r3, #12
 800646c:	2b04      	cmp	r3, #4
 800646e:	d00c      	beq.n	800648a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006470:	4b8f      	ldr	r3, [pc, #572]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f003 030c 	and.w	r3, r3, #12
 8006478:	2b08      	cmp	r3, #8
 800647a:	d112      	bne.n	80064a2 <HAL_RCC_OscConfig+0x5e>
 800647c:	4b8c      	ldr	r3, [pc, #560]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006488:	d10b      	bne.n	80064a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800648a:	4b89      	ldr	r3, [pc, #548]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d06c      	beq.n	8006570 <HAL_RCC_OscConfig+0x12c>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d168      	bne.n	8006570 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e246      	b.n	8006930 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064aa:	d106      	bne.n	80064ba <HAL_RCC_OscConfig+0x76>
 80064ac:	4b80      	ldr	r3, [pc, #512]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a7f      	ldr	r2, [pc, #508]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 80064b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	e02e      	b.n	8006518 <HAL_RCC_OscConfig+0xd4>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10c      	bne.n	80064dc <HAL_RCC_OscConfig+0x98>
 80064c2:	4b7b      	ldr	r3, [pc, #492]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a7a      	ldr	r2, [pc, #488]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 80064c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	4b78      	ldr	r3, [pc, #480]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a77      	ldr	r2, [pc, #476]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 80064d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	e01d      	b.n	8006518 <HAL_RCC_OscConfig+0xd4>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064e4:	d10c      	bne.n	8006500 <HAL_RCC_OscConfig+0xbc>
 80064e6:	4b72      	ldr	r3, [pc, #456]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a71      	ldr	r2, [pc, #452]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 80064ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	4b6f      	ldr	r3, [pc, #444]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a6e      	ldr	r2, [pc, #440]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 80064f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	e00b      	b.n	8006518 <HAL_RCC_OscConfig+0xd4>
 8006500:	4b6b      	ldr	r3, [pc, #428]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a6a      	ldr	r2, [pc, #424]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 8006506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	4b68      	ldr	r3, [pc, #416]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a67      	ldr	r2, [pc, #412]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 8006512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006516:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d013      	beq.n	8006548 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006520:	f7fd fdc2 	bl	80040a8 <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006528:	f7fd fdbe 	bl	80040a8 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b64      	cmp	r3, #100	; 0x64
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e1fa      	b.n	8006930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800653a:	4b5d      	ldr	r3, [pc, #372]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0f0      	beq.n	8006528 <HAL_RCC_OscConfig+0xe4>
 8006546:	e014      	b.n	8006572 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006548:	f7fd fdae 	bl	80040a8 <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006550:	f7fd fdaa 	bl	80040a8 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b64      	cmp	r3, #100	; 0x64
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e1e6      	b.n	8006930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006562:	4b53      	ldr	r3, [pc, #332]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f0      	bne.n	8006550 <HAL_RCC_OscConfig+0x10c>
 800656e:	e000      	b.n	8006572 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d063      	beq.n	8006646 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800657e:	4b4c      	ldr	r3, [pc, #304]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f003 030c 	and.w	r3, r3, #12
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00b      	beq.n	80065a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800658a:	4b49      	ldr	r3, [pc, #292]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f003 030c 	and.w	r3, r3, #12
 8006592:	2b08      	cmp	r3, #8
 8006594:	d11c      	bne.n	80065d0 <HAL_RCC_OscConfig+0x18c>
 8006596:	4b46      	ldr	r3, [pc, #280]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d116      	bne.n	80065d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065a2:	4b43      	ldr	r3, [pc, #268]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <HAL_RCC_OscConfig+0x176>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d001      	beq.n	80065ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e1ba      	b.n	8006930 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ba:	4b3d      	ldr	r3, [pc, #244]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	4939      	ldr	r1, [pc, #228]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ce:	e03a      	b.n	8006646 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d020      	beq.n	800661a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065d8:	4b36      	ldr	r3, [pc, #216]	; (80066b4 <HAL_RCC_OscConfig+0x270>)
 80065da:	2201      	movs	r2, #1
 80065dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065de:	f7fd fd63 	bl	80040a8 <HAL_GetTick>
 80065e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065e4:	e008      	b.n	80065f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065e6:	f7fd fd5f 	bl	80040a8 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d901      	bls.n	80065f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e19b      	b.n	8006930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065f8:	4b2d      	ldr	r3, [pc, #180]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d0f0      	beq.n	80065e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006604:	4b2a      	ldr	r3, [pc, #168]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	00db      	lsls	r3, r3, #3
 8006612:	4927      	ldr	r1, [pc, #156]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 8006614:	4313      	orrs	r3, r2
 8006616:	600b      	str	r3, [r1, #0]
 8006618:	e015      	b.n	8006646 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800661a:	4b26      	ldr	r3, [pc, #152]	; (80066b4 <HAL_RCC_OscConfig+0x270>)
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006620:	f7fd fd42 	bl	80040a8 <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006628:	f7fd fd3e 	bl	80040a8 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e17a      	b.n	8006930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800663a:	4b1d      	ldr	r3, [pc, #116]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1f0      	bne.n	8006628 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d03a      	beq.n	80066c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d019      	beq.n	800668e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800665a:	4b17      	ldr	r3, [pc, #92]	; (80066b8 <HAL_RCC_OscConfig+0x274>)
 800665c:	2201      	movs	r2, #1
 800665e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006660:	f7fd fd22 	bl	80040a8 <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006668:	f7fd fd1e 	bl	80040a8 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e15a      	b.n	8006930 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800667a:	4b0d      	ldr	r3, [pc, #52]	; (80066b0 <HAL_RCC_OscConfig+0x26c>)
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0f0      	beq.n	8006668 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006686:	2001      	movs	r0, #1
 8006688:	f000 fada 	bl	8006c40 <RCC_Delay>
 800668c:	e01c      	b.n	80066c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800668e:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <HAL_RCC_OscConfig+0x274>)
 8006690:	2200      	movs	r2, #0
 8006692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006694:	f7fd fd08 	bl	80040a8 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800669a:	e00f      	b.n	80066bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800669c:	f7fd fd04 	bl	80040a8 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d908      	bls.n	80066bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e140      	b.n	8006930 <HAL_RCC_OscConfig+0x4ec>
 80066ae:	bf00      	nop
 80066b0:	40021000 	.word	0x40021000
 80066b4:	42420000 	.word	0x42420000
 80066b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066bc:	4b9e      	ldr	r3, [pc, #632]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e9      	bne.n	800669c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 80a6 	beq.w	8006822 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066d6:	2300      	movs	r3, #0
 80066d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066da:	4b97      	ldr	r3, [pc, #604]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10d      	bne.n	8006702 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066e6:	4b94      	ldr	r3, [pc, #592]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	4a93      	ldr	r2, [pc, #588]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 80066ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f0:	61d3      	str	r3, [r2, #28]
 80066f2:	4b91      	ldr	r3, [pc, #580]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066fa:	60bb      	str	r3, [r7, #8]
 80066fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066fe:	2301      	movs	r3, #1
 8006700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006702:	4b8e      	ldr	r3, [pc, #568]	; (800693c <HAL_RCC_OscConfig+0x4f8>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800670a:	2b00      	cmp	r3, #0
 800670c:	d118      	bne.n	8006740 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800670e:	4b8b      	ldr	r3, [pc, #556]	; (800693c <HAL_RCC_OscConfig+0x4f8>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a8a      	ldr	r2, [pc, #552]	; (800693c <HAL_RCC_OscConfig+0x4f8>)
 8006714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800671a:	f7fd fcc5 	bl	80040a8 <HAL_GetTick>
 800671e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006720:	e008      	b.n	8006734 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006722:	f7fd fcc1 	bl	80040a8 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b64      	cmp	r3, #100	; 0x64
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e0fd      	b.n	8006930 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006734:	4b81      	ldr	r3, [pc, #516]	; (800693c <HAL_RCC_OscConfig+0x4f8>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f0      	beq.n	8006722 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d106      	bne.n	8006756 <HAL_RCC_OscConfig+0x312>
 8006748:	4b7b      	ldr	r3, [pc, #492]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	4a7a      	ldr	r2, [pc, #488]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 800674e:	f043 0301 	orr.w	r3, r3, #1
 8006752:	6213      	str	r3, [r2, #32]
 8006754:	e02d      	b.n	80067b2 <HAL_RCC_OscConfig+0x36e>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10c      	bne.n	8006778 <HAL_RCC_OscConfig+0x334>
 800675e:	4b76      	ldr	r3, [pc, #472]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	4a75      	ldr	r2, [pc, #468]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 8006764:	f023 0301 	bic.w	r3, r3, #1
 8006768:	6213      	str	r3, [r2, #32]
 800676a:	4b73      	ldr	r3, [pc, #460]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	4a72      	ldr	r2, [pc, #456]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 8006770:	f023 0304 	bic.w	r3, r3, #4
 8006774:	6213      	str	r3, [r2, #32]
 8006776:	e01c      	b.n	80067b2 <HAL_RCC_OscConfig+0x36e>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	2b05      	cmp	r3, #5
 800677e:	d10c      	bne.n	800679a <HAL_RCC_OscConfig+0x356>
 8006780:	4b6d      	ldr	r3, [pc, #436]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	4a6c      	ldr	r2, [pc, #432]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 8006786:	f043 0304 	orr.w	r3, r3, #4
 800678a:	6213      	str	r3, [r2, #32]
 800678c:	4b6a      	ldr	r3, [pc, #424]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	4a69      	ldr	r2, [pc, #420]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 8006792:	f043 0301 	orr.w	r3, r3, #1
 8006796:	6213      	str	r3, [r2, #32]
 8006798:	e00b      	b.n	80067b2 <HAL_RCC_OscConfig+0x36e>
 800679a:	4b67      	ldr	r3, [pc, #412]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	4a66      	ldr	r2, [pc, #408]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	6213      	str	r3, [r2, #32]
 80067a6:	4b64      	ldr	r3, [pc, #400]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	4a63      	ldr	r2, [pc, #396]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 80067ac:	f023 0304 	bic.w	r3, r3, #4
 80067b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d015      	beq.n	80067e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067ba:	f7fd fc75 	bl	80040a8 <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c0:	e00a      	b.n	80067d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067c2:	f7fd fc71 	bl	80040a8 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e0ab      	b.n	8006930 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067d8:	4b57      	ldr	r3, [pc, #348]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0ee      	beq.n	80067c2 <HAL_RCC_OscConfig+0x37e>
 80067e4:	e014      	b.n	8006810 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067e6:	f7fd fc5f 	bl	80040a8 <HAL_GetTick>
 80067ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067ec:	e00a      	b.n	8006804 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ee:	f7fd fc5b 	bl	80040a8 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e095      	b.n	8006930 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006804:	4b4c      	ldr	r3, [pc, #304]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1ee      	bne.n	80067ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006810:	7dfb      	ldrb	r3, [r7, #23]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d105      	bne.n	8006822 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006816:	4b48      	ldr	r3, [pc, #288]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	4a47      	ldr	r2, [pc, #284]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 800681c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006820:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 8081 	beq.w	800692e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800682c:	4b42      	ldr	r3, [pc, #264]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f003 030c 	and.w	r3, r3, #12
 8006834:	2b08      	cmp	r3, #8
 8006836:	d061      	beq.n	80068fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	2b02      	cmp	r3, #2
 800683e:	d146      	bne.n	80068ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006840:	4b3f      	ldr	r3, [pc, #252]	; (8006940 <HAL_RCC_OscConfig+0x4fc>)
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006846:	f7fd fc2f 	bl	80040a8 <HAL_GetTick>
 800684a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800684c:	e008      	b.n	8006860 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800684e:	f7fd fc2b 	bl	80040a8 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d901      	bls.n	8006860 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e067      	b.n	8006930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006860:	4b35      	ldr	r3, [pc, #212]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1f0      	bne.n	800684e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006874:	d108      	bne.n	8006888 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006876:	4b30      	ldr	r3, [pc, #192]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	492d      	ldr	r1, [pc, #180]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 8006884:	4313      	orrs	r3, r2
 8006886:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006888:	4b2b      	ldr	r3, [pc, #172]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a19      	ldr	r1, [r3, #32]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	430b      	orrs	r3, r1
 800689a:	4927      	ldr	r1, [pc, #156]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 800689c:	4313      	orrs	r3, r2
 800689e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068a0:	4b27      	ldr	r3, [pc, #156]	; (8006940 <HAL_RCC_OscConfig+0x4fc>)
 80068a2:	2201      	movs	r2, #1
 80068a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a6:	f7fd fbff 	bl	80040a8 <HAL_GetTick>
 80068aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068ac:	e008      	b.n	80068c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ae:	f7fd fbfb 	bl	80040a8 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e037      	b.n	8006930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068c0:	4b1d      	ldr	r3, [pc, #116]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d0f0      	beq.n	80068ae <HAL_RCC_OscConfig+0x46a>
 80068cc:	e02f      	b.n	800692e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068ce:	4b1c      	ldr	r3, [pc, #112]	; (8006940 <HAL_RCC_OscConfig+0x4fc>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d4:	f7fd fbe8 	bl	80040a8 <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068dc:	f7fd fbe4 	bl	80040a8 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e020      	b.n	8006930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068ee:	4b12      	ldr	r3, [pc, #72]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1f0      	bne.n	80068dc <HAL_RCC_OscConfig+0x498>
 80068fa:	e018      	b.n	800692e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d101      	bne.n	8006908 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e013      	b.n	8006930 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006908:	4b0b      	ldr	r3, [pc, #44]	; (8006938 <HAL_RCC_OscConfig+0x4f4>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	429a      	cmp	r2, r3
 800691a:	d106      	bne.n	800692a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006926:	429a      	cmp	r2, r3
 8006928:	d001      	beq.n	800692e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	40021000 	.word	0x40021000
 800693c:	40007000 	.word	0x40007000
 8006940:	42420060 	.word	0x42420060

08006944 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e0d0      	b.n	8006afa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006958:	4b6a      	ldr	r3, [pc, #424]	; (8006b04 <HAL_RCC_ClockConfig+0x1c0>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d910      	bls.n	8006988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006966:	4b67      	ldr	r3, [pc, #412]	; (8006b04 <HAL_RCC_ClockConfig+0x1c0>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f023 0207 	bic.w	r2, r3, #7
 800696e:	4965      	ldr	r1, [pc, #404]	; (8006b04 <HAL_RCC_ClockConfig+0x1c0>)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	4313      	orrs	r3, r2
 8006974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006976:	4b63      	ldr	r3, [pc, #396]	; (8006b04 <HAL_RCC_ClockConfig+0x1c0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d001      	beq.n	8006988 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e0b8      	b.n	8006afa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d020      	beq.n	80069d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	2b00      	cmp	r3, #0
 800699e:	d005      	beq.n	80069ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069a0:	4b59      	ldr	r3, [pc, #356]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	4a58      	ldr	r2, [pc, #352]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 80069a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80069aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0308 	and.w	r3, r3, #8
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d005      	beq.n	80069c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069b8:	4b53      	ldr	r3, [pc, #332]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	4a52      	ldr	r2, [pc, #328]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 80069be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80069c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069c4:	4b50      	ldr	r3, [pc, #320]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	494d      	ldr	r1, [pc, #308]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d040      	beq.n	8006a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d107      	bne.n	80069fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ea:	4b47      	ldr	r3, [pc, #284]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d115      	bne.n	8006a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e07f      	b.n	8006afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d107      	bne.n	8006a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a02:	4b41      	ldr	r3, [pc, #260]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d109      	bne.n	8006a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e073      	b.n	8006afa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a12:	4b3d      	ldr	r3, [pc, #244]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e06b      	b.n	8006afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a22:	4b39      	ldr	r3, [pc, #228]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f023 0203 	bic.w	r2, r3, #3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	4936      	ldr	r1, [pc, #216]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a34:	f7fd fb38 	bl	80040a8 <HAL_GetTick>
 8006a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a3a:	e00a      	b.n	8006a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a3c:	f7fd fb34 	bl	80040a8 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e053      	b.n	8006afa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a52:	4b2d      	ldr	r3, [pc, #180]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f003 020c 	and.w	r2, r3, #12
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d1eb      	bne.n	8006a3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a64:	4b27      	ldr	r3, [pc, #156]	; (8006b04 <HAL_RCC_ClockConfig+0x1c0>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d210      	bcs.n	8006a94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a72:	4b24      	ldr	r3, [pc, #144]	; (8006b04 <HAL_RCC_ClockConfig+0x1c0>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f023 0207 	bic.w	r2, r3, #7
 8006a7a:	4922      	ldr	r1, [pc, #136]	; (8006b04 <HAL_RCC_ClockConfig+0x1c0>)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a82:	4b20      	ldr	r3, [pc, #128]	; (8006b04 <HAL_RCC_ClockConfig+0x1c0>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d001      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e032      	b.n	8006afa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d008      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006aa0:	4b19      	ldr	r3, [pc, #100]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	4916      	ldr	r1, [pc, #88]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d009      	beq.n	8006ad2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006abe:	4b12      	ldr	r3, [pc, #72]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	490e      	ldr	r1, [pc, #56]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ad2:	f000 f821 	bl	8006b18 <HAL_RCC_GetSysClockFreq>
 8006ad6:	4601      	mov	r1, r0
 8006ad8:	4b0b      	ldr	r3, [pc, #44]	; (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	091b      	lsrs	r3, r3, #4
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	4a0a      	ldr	r2, [pc, #40]	; (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 8006ae4:	5cd3      	ldrb	r3, [r2, r3]
 8006ae6:	fa21 f303 	lsr.w	r3, r1, r3
 8006aea:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <HAL_RCC_ClockConfig+0x1cc>)
 8006aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006aee:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <HAL_RCC_ClockConfig+0x1d0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fd fa96 	bl	8004024 <HAL_InitTick>

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	40022000 	.word	0x40022000
 8006b08:	40021000 	.word	0x40021000
 8006b0c:	0800c838 	.word	0x0800c838
 8006b10:	20000030 	.word	0x20000030
 8006b14:	20000034 	.word	0x20000034

08006b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b18:	b490      	push	{r4, r7}
 8006b1a:	b08a      	sub	sp, #40	; 0x28
 8006b1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006b1e:	4b2a      	ldr	r3, [pc, #168]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006b20:	1d3c      	adds	r4, r7, #4
 8006b22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006b28:	4b28      	ldr	r3, [pc, #160]	; (8006bcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61fb      	str	r3, [r7, #28]
 8006b32:	2300      	movs	r3, #0
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	2300      	movs	r3, #0
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006b42:	4b23      	ldr	r3, [pc, #140]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	f003 030c 	and.w	r3, r3, #12
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d002      	beq.n	8006b58 <HAL_RCC_GetSysClockFreq+0x40>
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d003      	beq.n	8006b5e <HAL_RCC_GetSysClockFreq+0x46>
 8006b56:	e02d      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b58:	4b1e      	ldr	r3, [pc, #120]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b5a:	623b      	str	r3, [r7, #32]
      break;
 8006b5c:	e02d      	b.n	8006bba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	0c9b      	lsrs	r3, r3, #18
 8006b62:	f003 030f 	and.w	r3, r3, #15
 8006b66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006b70:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d013      	beq.n	8006ba4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b7c:	4b14      	ldr	r3, [pc, #80]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	0c5b      	lsrs	r3, r3, #17
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006b90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	4a0f      	ldr	r2, [pc, #60]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b96:	fb02 f203 	mul.w	r2, r2, r3
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba2:	e004      	b.n	8006bae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	4a0c      	ldr	r2, [pc, #48]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ba8:	fb02 f303 	mul.w	r3, r2, r3
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	623b      	str	r3, [r7, #32]
      break;
 8006bb2:	e002      	b.n	8006bba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006bb4:	4b07      	ldr	r3, [pc, #28]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006bb6:	623b      	str	r3, [r7, #32]
      break;
 8006bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bba:	6a3b      	ldr	r3, [r7, #32]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3728      	adds	r7, #40	; 0x28
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bc90      	pop	{r4, r7}
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	0800c824 	.word	0x0800c824
 8006bcc:	0800c834 	.word	0x0800c834
 8006bd0:	40021000 	.word	0x40021000
 8006bd4:	007a1200 	.word	0x007a1200
 8006bd8:	003d0900 	.word	0x003d0900

08006bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006be0:	4b02      	ldr	r3, [pc, #8]	; (8006bec <HAL_RCC_GetHCLKFreq+0x10>)
 8006be2:	681b      	ldr	r3, [r3, #0]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bc80      	pop	{r7}
 8006bea:	4770      	bx	lr
 8006bec:	20000030 	.word	0x20000030

08006bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006bf4:	f7ff fff2 	bl	8006bdc <HAL_RCC_GetHCLKFreq>
 8006bf8:	4601      	mov	r1, r0
 8006bfa:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	0a1b      	lsrs	r3, r3, #8
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	4a03      	ldr	r2, [pc, #12]	; (8006c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c06:	5cd3      	ldrb	r3, [r2, r3]
 8006c08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40021000 	.word	0x40021000
 8006c14:	0800c848 	.word	0x0800c848

08006c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c1c:	f7ff ffde 	bl	8006bdc <HAL_RCC_GetHCLKFreq>
 8006c20:	4601      	mov	r1, r0
 8006c22:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	0adb      	lsrs	r3, r3, #11
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	4a03      	ldr	r2, [pc, #12]	; (8006c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c2e:	5cd3      	ldrb	r3, [r2, r3]
 8006c30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40021000 	.word	0x40021000
 8006c3c:	0800c848 	.word	0x0800c848

08006c40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006c48:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <RCC_Delay+0x34>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a0a      	ldr	r2, [pc, #40]	; (8006c78 <RCC_Delay+0x38>)
 8006c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c52:	0a5b      	lsrs	r3, r3, #9
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	fb02 f303 	mul.w	r3, r2, r3
 8006c5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006c5c:	bf00      	nop
  }
  while (Delay --);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	1e5a      	subs	r2, r3, #1
 8006c62:	60fa      	str	r2, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1f9      	bne.n	8006c5c <RCC_Delay+0x1c>
}
 8006c68:	bf00      	nop
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	20000030 	.word	0x20000030
 8006c78:	10624dd3 	.word	0x10624dd3

08006c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e041      	b.n	8006d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fd f86a 	bl	8003d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	f000 fb14 	bl	80072e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d001      	beq.n	8006d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e03a      	b.n	8006daa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a18      	ldr	r2, [pc, #96]	; (8006db4 <HAL_TIM_Base_Start_IT+0x98>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00e      	beq.n	8006d74 <HAL_TIM_Base_Start_IT+0x58>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d5e:	d009      	beq.n	8006d74 <HAL_TIM_Base_Start_IT+0x58>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a14      	ldr	r2, [pc, #80]	; (8006db8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d004      	beq.n	8006d74 <HAL_TIM_Base_Start_IT+0x58>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a13      	ldr	r2, [pc, #76]	; (8006dbc <HAL_TIM_Base_Start_IT+0xa0>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d111      	bne.n	8006d98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b06      	cmp	r3, #6
 8006d84:	d010      	beq.n	8006da8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0201 	orr.w	r2, r2, #1
 8006d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d96:	e007      	b.n	8006da8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f042 0201 	orr.w	r2, r2, #1
 8006da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr
 8006db4:	40012c00 	.word	0x40012c00
 8006db8:	40000400 	.word	0x40000400
 8006dbc:	40000800 	.word	0x40000800

08006dc0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e041      	b.n	8006e56 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d106      	bne.n	8006dec <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f839 	bl	8006e5e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4610      	mov	r0, r2
 8006e00:	f000 fa72 	bl	80072e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006e66:	bf00      	nop
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bc80      	pop	{r7}
 8006e6e:	4770      	bx	lr

08006e70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0302 	and.w	r3, r3, #2
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d122      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d11b      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f06f 0202 	mvn.w	r2, #2
 8006e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f9fc 	bl	80072b0 <HAL_TIM_IC_CaptureCallback>
 8006eb8:	e005      	b.n	8006ec6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f9ef 	bl	800729e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f9fe 	bl	80072c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f003 0304 	and.w	r3, r3, #4
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d122      	bne.n	8006f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d11b      	bne.n	8006f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0204 	mvn.w	r2, #4
 8006ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f9d2 	bl	80072b0 <HAL_TIM_IC_CaptureCallback>
 8006f0c:	e005      	b.n	8006f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f9c5 	bl	800729e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f9d4 	bl	80072c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b08      	cmp	r3, #8
 8006f2c:	d122      	bne.n	8006f74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f003 0308 	and.w	r3, r3, #8
 8006f38:	2b08      	cmp	r3, #8
 8006f3a:	d11b      	bne.n	8006f74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f06f 0208 	mvn.w	r2, #8
 8006f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2204      	movs	r2, #4
 8006f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	f003 0303 	and.w	r3, r3, #3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f9a8 	bl	80072b0 <HAL_TIM_IC_CaptureCallback>
 8006f60:	e005      	b.n	8006f6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f99b 	bl	800729e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f9aa 	bl	80072c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f003 0310 	and.w	r3, r3, #16
 8006f7e:	2b10      	cmp	r3, #16
 8006f80:	d122      	bne.n	8006fc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f003 0310 	and.w	r3, r3, #16
 8006f8c:	2b10      	cmp	r3, #16
 8006f8e:	d11b      	bne.n	8006fc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f06f 0210 	mvn.w	r2, #16
 8006f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2208      	movs	r2, #8
 8006f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f97e 	bl	80072b0 <HAL_TIM_IC_CaptureCallback>
 8006fb4:	e005      	b.n	8006fc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f971 	bl	800729e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f980 	bl	80072c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d10e      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d107      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f06f 0201 	mvn.w	r2, #1
 8006fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7fa fd48 	bl	8001a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ffe:	2b80      	cmp	r3, #128	; 0x80
 8007000:	d10e      	bne.n	8007020 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700c:	2b80      	cmp	r3, #128	; 0x80
 800700e:	d107      	bne.n	8007020 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fc4b 	bl	80078b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702a:	2b40      	cmp	r3, #64	; 0x40
 800702c:	d10e      	bne.n	800704c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007038:	2b40      	cmp	r3, #64	; 0x40
 800703a:	d107      	bne.n	800704c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f944 	bl	80072d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	f003 0320 	and.w	r3, r3, #32
 8007056:	2b20      	cmp	r3, #32
 8007058:	d10e      	bne.n	8007078 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	f003 0320 	and.w	r3, r3, #32
 8007064:	2b20      	cmp	r3, #32
 8007066:	d107      	bne.n	8007078 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f06f 0220 	mvn.w	r2, #32
 8007070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fc16 	bl	80078a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007078:	bf00      	nop
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007092:	2b01      	cmp	r3, #1
 8007094:	d101      	bne.n	800709a <HAL_TIM_OC_ConfigChannel+0x1a>
 8007096:	2302      	movs	r3, #2
 8007098:	e046      	b.n	8007128 <HAL_TIM_OC_ConfigChannel+0xa8>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b0c      	cmp	r3, #12
 80070a6:	d839      	bhi.n	800711c <HAL_TIM_OC_ConfigChannel+0x9c>
 80070a8:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <HAL_TIM_OC_ConfigChannel+0x30>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	080070e5 	.word	0x080070e5
 80070b4:	0800711d 	.word	0x0800711d
 80070b8:	0800711d 	.word	0x0800711d
 80070bc:	0800711d 	.word	0x0800711d
 80070c0:	080070f3 	.word	0x080070f3
 80070c4:	0800711d 	.word	0x0800711d
 80070c8:	0800711d 	.word	0x0800711d
 80070cc:	0800711d 	.word	0x0800711d
 80070d0:	08007101 	.word	0x08007101
 80070d4:	0800711d 	.word	0x0800711d
 80070d8:	0800711d 	.word	0x0800711d
 80070dc:	0800711d 	.word	0x0800711d
 80070e0:	0800710f 	.word	0x0800710f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68b9      	ldr	r1, [r7, #8]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f95e 	bl	80073ac <TIM_OC1_SetConfig>
      break;
 80070f0:	e015      	b.n	800711e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68b9      	ldr	r1, [r7, #8]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 f9bd 	bl	8007478 <TIM_OC2_SetConfig>
      break;
 80070fe:	e00e      	b.n	800711e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68b9      	ldr	r1, [r7, #8]
 8007106:	4618      	mov	r0, r3
 8007108:	f000 fa20 	bl	800754c <TIM_OC3_SetConfig>
      break;
 800710c:	e007      	b.n	800711e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	4618      	mov	r0, r3
 8007116:	f000 fa83 	bl	8007620 <TIM_OC4_SetConfig>
      break;
 800711a:	e000      	b.n	800711e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800711c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007140:	2b01      	cmp	r3, #1
 8007142:	d101      	bne.n	8007148 <HAL_TIM_ConfigClockSource+0x18>
 8007144:	2302      	movs	r3, #2
 8007146:	e0a6      	b.n	8007296 <HAL_TIM_ConfigClockSource+0x166>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007166:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800716e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b40      	cmp	r3, #64	; 0x40
 800717e:	d067      	beq.n	8007250 <HAL_TIM_ConfigClockSource+0x120>
 8007180:	2b40      	cmp	r3, #64	; 0x40
 8007182:	d80b      	bhi.n	800719c <HAL_TIM_ConfigClockSource+0x6c>
 8007184:	2b10      	cmp	r3, #16
 8007186:	d073      	beq.n	8007270 <HAL_TIM_ConfigClockSource+0x140>
 8007188:	2b10      	cmp	r3, #16
 800718a:	d802      	bhi.n	8007192 <HAL_TIM_ConfigClockSource+0x62>
 800718c:	2b00      	cmp	r3, #0
 800718e:	d06f      	beq.n	8007270 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007190:	e078      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007192:	2b20      	cmp	r3, #32
 8007194:	d06c      	beq.n	8007270 <HAL_TIM_ConfigClockSource+0x140>
 8007196:	2b30      	cmp	r3, #48	; 0x30
 8007198:	d06a      	beq.n	8007270 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800719a:	e073      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800719c:	2b70      	cmp	r3, #112	; 0x70
 800719e:	d00d      	beq.n	80071bc <HAL_TIM_ConfigClockSource+0x8c>
 80071a0:	2b70      	cmp	r3, #112	; 0x70
 80071a2:	d804      	bhi.n	80071ae <HAL_TIM_ConfigClockSource+0x7e>
 80071a4:	2b50      	cmp	r3, #80	; 0x50
 80071a6:	d033      	beq.n	8007210 <HAL_TIM_ConfigClockSource+0xe0>
 80071a8:	2b60      	cmp	r3, #96	; 0x60
 80071aa:	d041      	beq.n	8007230 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80071ac:	e06a      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80071ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b2:	d066      	beq.n	8007282 <HAL_TIM_ConfigClockSource+0x152>
 80071b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071b8:	d017      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0xba>
      break;
 80071ba:	e063      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6818      	ldr	r0, [r3, #0]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	6899      	ldr	r1, [r3, #8]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f000 faed 	bl	80077aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	609a      	str	r2, [r3, #8]
      break;
 80071e8:	e04c      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6818      	ldr	r0, [r3, #0]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	6899      	ldr	r1, [r3, #8]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f000 fad6 	bl	80077aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800720c:	609a      	str	r2, [r3, #8]
      break;
 800720e:	e039      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6818      	ldr	r0, [r3, #0]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	6859      	ldr	r1, [r3, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	461a      	mov	r2, r3
 800721e:	f000 fa4d 	bl	80076bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2150      	movs	r1, #80	; 0x50
 8007228:	4618      	mov	r0, r3
 800722a:	f000 faa4 	bl	8007776 <TIM_ITRx_SetConfig>
      break;
 800722e:	e029      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6818      	ldr	r0, [r3, #0]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	6859      	ldr	r1, [r3, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	461a      	mov	r2, r3
 800723e:	f000 fa6b 	bl	8007718 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2160      	movs	r1, #96	; 0x60
 8007248:	4618      	mov	r0, r3
 800724a:	f000 fa94 	bl	8007776 <TIM_ITRx_SetConfig>
      break;
 800724e:	e019      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6818      	ldr	r0, [r3, #0]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	6859      	ldr	r1, [r3, #4]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	461a      	mov	r2, r3
 800725e:	f000 fa2d 	bl	80076bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2140      	movs	r1, #64	; 0x40
 8007268:	4618      	mov	r0, r3
 800726a:	f000 fa84 	bl	8007776 <TIM_ITRx_SetConfig>
      break;
 800726e:	e009      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4619      	mov	r1, r3
 800727a:	4610      	mov	r0, r2
 800727c:	f000 fa7b 	bl	8007776 <TIM_ITRx_SetConfig>
        break;
 8007280:	e000      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007282:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bc80      	pop	{r7}
 80072ae:	4770      	bx	lr

080072b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc80      	pop	{r7}
 80072c0:	4770      	bx	lr

080072c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b083      	sub	sp, #12
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072ca:	bf00      	nop
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bc80      	pop	{r7}
 80072d2:	4770      	bx	lr

080072d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bc80      	pop	{r7}
 80072e4:	4770      	bx	lr
	...

080072e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a29      	ldr	r2, [pc, #164]	; (80073a0 <TIM_Base_SetConfig+0xb8>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00b      	beq.n	8007318 <TIM_Base_SetConfig+0x30>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007306:	d007      	beq.n	8007318 <TIM_Base_SetConfig+0x30>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a26      	ldr	r2, [pc, #152]	; (80073a4 <TIM_Base_SetConfig+0xbc>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d003      	beq.n	8007318 <TIM_Base_SetConfig+0x30>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a25      	ldr	r2, [pc, #148]	; (80073a8 <TIM_Base_SetConfig+0xc0>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d108      	bne.n	800732a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a1c      	ldr	r2, [pc, #112]	; (80073a0 <TIM_Base_SetConfig+0xb8>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00b      	beq.n	800734a <TIM_Base_SetConfig+0x62>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007338:	d007      	beq.n	800734a <TIM_Base_SetConfig+0x62>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a19      	ldr	r2, [pc, #100]	; (80073a4 <TIM_Base_SetConfig+0xbc>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d003      	beq.n	800734a <TIM_Base_SetConfig+0x62>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a18      	ldr	r2, [pc, #96]	; (80073a8 <TIM_Base_SetConfig+0xc0>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d108      	bne.n	800735c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a07      	ldr	r2, [pc, #28]	; (80073a0 <TIM_Base_SetConfig+0xb8>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d103      	bne.n	8007390 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	691a      	ldr	r2, [r3, #16]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	615a      	str	r2, [r3, #20]
}
 8007396:	bf00      	nop
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	bc80      	pop	{r7}
 800739e:	4770      	bx	lr
 80073a0:	40012c00 	.word	0x40012c00
 80073a4:	40000400 	.word	0x40000400
 80073a8:	40000800 	.word	0x40000800

080073ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	f023 0201 	bic.w	r2, r3, #1
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f023 0303 	bic.w	r3, r3, #3
 80073e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f023 0302 	bic.w	r3, r3, #2
 80073f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a1c      	ldr	r2, [pc, #112]	; (8007474 <TIM_OC1_SetConfig+0xc8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d10c      	bne.n	8007422 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f023 0308 	bic.w	r3, r3, #8
 800740e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f023 0304 	bic.w	r3, r3, #4
 8007420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a13      	ldr	r2, [pc, #76]	; (8007474 <TIM_OC1_SetConfig+0xc8>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d111      	bne.n	800744e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	4313      	orrs	r3, r2
 8007442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	4313      	orrs	r3, r2
 800744c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	621a      	str	r2, [r3, #32]
}
 8007468:	bf00      	nop
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	bc80      	pop	{r7}
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	40012c00 	.word	0x40012c00

08007478 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	f023 0210 	bic.w	r2, r3, #16
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	021b      	lsls	r3, r3, #8
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f023 0320 	bic.w	r3, r3, #32
 80074c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	011b      	lsls	r3, r3, #4
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a1d      	ldr	r2, [pc, #116]	; (8007548 <TIM_OC2_SetConfig+0xd0>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d10d      	bne.n	80074f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	011b      	lsls	r3, r3, #4
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a14      	ldr	r2, [pc, #80]	; (8007548 <TIM_OC2_SetConfig+0xd0>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d113      	bne.n	8007524 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007502:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800750a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	4313      	orrs	r3, r2
 8007516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	4313      	orrs	r3, r2
 8007522:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	621a      	str	r2, [r3, #32]
}
 800753e:	bf00      	nop
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	bc80      	pop	{r7}
 8007546:	4770      	bx	lr
 8007548:	40012c00 	.word	0x40012c00

0800754c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f023 0303 	bic.w	r3, r3, #3
 8007582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	021b      	lsls	r3, r3, #8
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	4313      	orrs	r3, r2
 80075a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a1d      	ldr	r2, [pc, #116]	; (800761c <TIM_OC3_SetConfig+0xd0>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d10d      	bne.n	80075c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	021b      	lsls	r3, r3, #8
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a14      	ldr	r2, [pc, #80]	; (800761c <TIM_OC3_SetConfig+0xd0>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d113      	bne.n	80075f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	011b      	lsls	r3, r3, #4
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	621a      	str	r2, [r3, #32]
}
 8007610:	bf00      	nop
 8007612:	371c      	adds	r7, #28
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	40012c00 	.word	0x40012c00

08007620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007620:	b480      	push	{r7}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800764e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	4313      	orrs	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800766a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	031b      	lsls	r3, r3, #12
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	4313      	orrs	r3, r2
 8007676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a0f      	ldr	r2, [pc, #60]	; (80076b8 <TIM_OC4_SetConfig+0x98>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d109      	bne.n	8007694 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007686:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	019b      	lsls	r3, r3, #6
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	4313      	orrs	r3, r2
 8007692:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	621a      	str	r2, [r3, #32]
}
 80076ae:	bf00      	nop
 80076b0:	371c      	adds	r7, #28
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bc80      	pop	{r7}
 80076b6:	4770      	bx	lr
 80076b8:	40012c00 	.word	0x40012c00

080076bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6a1b      	ldr	r3, [r3, #32]
 80076cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	f023 0201 	bic.w	r2, r3, #1
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f023 030a 	bic.w	r3, r3, #10
 80076f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	4313      	orrs	r3, r2
 8007700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	621a      	str	r2, [r3, #32]
}
 800770e:	bf00      	nop
 8007710:	371c      	adds	r7, #28
 8007712:	46bd      	mov	sp, r7
 8007714:	bc80      	pop	{r7}
 8007716:	4770      	bx	lr

08007718 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007718:	b480      	push	{r7}
 800771a:	b087      	sub	sp, #28
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a1b      	ldr	r3, [r3, #32]
 8007728:	f023 0210 	bic.w	r2, r3, #16
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007742:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	031b      	lsls	r3, r3, #12
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	4313      	orrs	r3, r2
 800774c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007754:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	4313      	orrs	r3, r2
 800775e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	621a      	str	r2, [r3, #32]
}
 800776c:	bf00      	nop
 800776e:	371c      	adds	r7, #28
 8007770:	46bd      	mov	sp, r7
 8007772:	bc80      	pop	{r7}
 8007774:	4770      	bx	lr

08007776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007776:	b480      	push	{r7}
 8007778:	b085      	sub	sp, #20
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4313      	orrs	r3, r2
 8007794:	f043 0307 	orr.w	r3, r3, #7
 8007798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	609a      	str	r2, [r3, #8]
}
 80077a0:	bf00      	nop
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bc80      	pop	{r7}
 80077a8:	4770      	bx	lr

080077aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b087      	sub	sp, #28
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	607a      	str	r2, [r7, #4]
 80077b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	021a      	lsls	r2, r3, #8
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	431a      	orrs	r2, r3
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	609a      	str	r2, [r3, #8]
}
 80077de:	bf00      	nop
 80077e0:	371c      	adds	r7, #28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bc80      	pop	{r7}
 80077e6:	4770      	bx	lr

080077e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d101      	bne.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077fc:	2302      	movs	r3, #2
 80077fe:	e046      	b.n	800788e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a16      	ldr	r2, [pc, #88]	; (8007898 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d00e      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800784c:	d009      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a12      	ldr	r2, [pc, #72]	; (800789c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d004      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a10      	ldr	r2, [pc, #64]	; (80078a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d10c      	bne.n	800787c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	4313      	orrs	r3, r2
 8007872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	bc80      	pop	{r7}
 8007896:	4770      	bx	lr
 8007898:	40012c00 	.word	0x40012c00
 800789c:	40000400 	.word	0x40000400
 80078a0:	40000800 	.word	0x40000800

080078a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bc80      	pop	{r7}
 80078b4:	4770      	bx	lr

080078b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b083      	sub	sp, #12
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bc80      	pop	{r7}
 80078c6:	4770      	bx	lr

080078c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e03f      	b.n	800795a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d106      	bne.n	80078f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7fc fabc 	bl	8003e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2224      	movs	r2, #36	; 0x24
 80078f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800790a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fc29 	bl	8008164 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	691a      	ldr	r2, [r3, #16]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	695a      	ldr	r2, [r3, #20]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68da      	ldr	r2, [r3, #12]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2220      	movs	r2, #32
 800794c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2220      	movs	r2, #32
 8007954:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
	...

08007964 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	4613      	mov	r3, r2
 8007970:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b20      	cmp	r3, #32
 800797c:	d153      	bne.n	8007a26 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <HAL_UART_Transmit_DMA+0x26>
 8007984:	88fb      	ldrh	r3, [r7, #6]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e04c      	b.n	8007a28 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007994:	2b01      	cmp	r3, #1
 8007996:	d101      	bne.n	800799c <HAL_UART_Transmit_DMA+0x38>
 8007998:	2302      	movs	r3, #2
 800799a:	e045      	b.n	8007a28 <HAL_UART_Transmit_DMA+0xc4>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	88fa      	ldrh	r2, [r7, #6]
 80079ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	88fa      	ldrh	r2, [r7, #6]
 80079b4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2221      	movs	r2, #33	; 0x21
 80079c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c8:	4a19      	ldr	r2, [pc, #100]	; (8007a30 <HAL_UART_Transmit_DMA+0xcc>)
 80079ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d0:	4a18      	ldr	r2, [pc, #96]	; (8007a34 <HAL_UART_Transmit_DMA+0xd0>)
 80079d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d8:	4a17      	ldr	r2, [pc, #92]	; (8007a38 <HAL_UART_Transmit_DMA+0xd4>)
 80079da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e0:	2200      	movs	r2, #0
 80079e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80079e4:	f107 0308 	add.w	r3, r7, #8
 80079e8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	6819      	ldr	r1, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3304      	adds	r3, #4
 80079f8:	461a      	mov	r2, r3
 80079fa:	88fb      	ldrh	r3, [r7, #6]
 80079fc:	f7fc fce8 	bl	80043d0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a08:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	695a      	ldr	r2, [r3, #20]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a20:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	e000      	b.n	8007a28 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007a26:	2302      	movs	r3, #2
  }
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	08007d85 	.word	0x08007d85
 8007a34:	08007dd7 	.word	0x08007dd7
 8007a38:	08007e77 	.word	0x08007e77

08007a3c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4613      	mov	r3, r2
 8007a48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b20      	cmp	r3, #32
 8007a54:	d166      	bne.n	8007b24 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d002      	beq.n	8007a62 <HAL_UART_Receive_DMA+0x26>
 8007a5c:	88fb      	ldrh	r3, [r7, #6]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e05f      	b.n	8007b26 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d101      	bne.n	8007a74 <HAL_UART_Receive_DMA+0x38>
 8007a70:	2302      	movs	r3, #2
 8007a72:	e058      	b.n	8007b26 <HAL_UART_Receive_DMA+0xea>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	88fa      	ldrh	r2, [r7, #6]
 8007a86:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2222      	movs	r2, #34	; 0x22
 8007a92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a9a:	4a25      	ldr	r2, [pc, #148]	; (8007b30 <HAL_UART_Receive_DMA+0xf4>)
 8007a9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa2:	4a24      	ldr	r2, [pc, #144]	; (8007b34 <HAL_UART_Receive_DMA+0xf8>)
 8007aa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aaa:	4a23      	ldr	r2, [pc, #140]	; (8007b38 <HAL_UART_Receive_DMA+0xfc>)
 8007aac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8007ab6:	f107 0308 	add.w	r3, r7, #8
 8007aba:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	88fb      	ldrh	r3, [r7, #6]
 8007ace:	f7fc fc7f 	bl	80043d0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	613b      	str	r3, [r7, #16]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	613b      	str	r3, [r7, #16]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	613b      	str	r3, [r7, #16]
 8007ae6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007afe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	695a      	ldr	r2, [r3, #20]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f042 0201 	orr.w	r2, r2, #1
 8007b0e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	695a      	ldr	r2, [r3, #20]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b1e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	e000      	b.n	8007b26 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007b24:	2302      	movs	r3, #2
  }
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	08007df3 	.word	0x08007df3
 8007b34:	08007e5b 	.word	0x08007e5b
 8007b38:	08007e77 	.word	0x08007e77

08007b3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	f003 030f 	and.w	r3, r3, #15
 8007b6a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10d      	bne.n	8007b8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	f003 0320 	and.w	r3, r3, #32
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d008      	beq.n	8007b8e <HAL_UART_IRQHandler+0x52>
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	f003 0320 	and.w	r3, r3, #32
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fa6c 	bl	8008064 <UART_Receive_IT>
      return;
 8007b8c:	e0d1      	b.n	8007d32 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 80b0 	beq.w	8007cf6 <HAL_UART_IRQHandler+0x1ba>
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d105      	bne.n	8007bac <HAL_UART_IRQHandler+0x70>
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 80a5 	beq.w	8007cf6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00a      	beq.n	8007bcc <HAL_UART_IRQHandler+0x90>
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d005      	beq.n	8007bcc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc4:	f043 0201 	orr.w	r2, r3, #1
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f003 0304 	and.w	r3, r3, #4
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <HAL_UART_IRQHandler+0xb0>
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d005      	beq.n	8007bec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be4:	f043 0202 	orr.w	r2, r3, #2
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00a      	beq.n	8007c0c <HAL_UART_IRQHandler+0xd0>
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d005      	beq.n	8007c0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c04:	f043 0204 	orr.w	r2, r3, #4
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	f003 0308 	and.w	r3, r3, #8
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00f      	beq.n	8007c36 <HAL_UART_IRQHandler+0xfa>
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d104      	bne.n	8007c2a <HAL_UART_IRQHandler+0xee>
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d005      	beq.n	8007c36 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2e:	f043 0208 	orr.w	r2, r3, #8
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d078      	beq.n	8007d30 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	f003 0320 	and.w	r3, r3, #32
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d007      	beq.n	8007c58 <HAL_UART_IRQHandler+0x11c>
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	f003 0320 	and.w	r3, r3, #32
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa06 	bl	8008064 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	bf14      	ite	ne
 8007c66:	2301      	movne	r3, #1
 8007c68:	2300      	moveq	r3, #0
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c72:	f003 0308 	and.w	r3, r3, #8
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d102      	bne.n	8007c80 <HAL_UART_IRQHandler+0x144>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d031      	beq.n	8007ce4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f957 	bl	8007f34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d023      	beq.n	8007cdc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	695a      	ldr	r2, [r3, #20]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ca2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d013      	beq.n	8007cd4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb0:	4a21      	ldr	r2, [pc, #132]	; (8007d38 <HAL_UART_IRQHandler+0x1fc>)
 8007cb2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fc fbe9 	bl	8004490 <HAL_DMA_Abort_IT>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d016      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007cce:	4610      	mov	r0, r2
 8007cd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd2:	e00e      	b.n	8007cf2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f84c 	bl	8007d72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cda:	e00a      	b.n	8007cf2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f848 	bl	8007d72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce2:	e006      	b.n	8007cf2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f844 	bl	8007d72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007cf0:	e01e      	b.n	8007d30 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cf2:	bf00      	nop
    return;
 8007cf4:	e01c      	b.n	8007d30 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d008      	beq.n	8007d12 <HAL_UART_IRQHandler+0x1d6>
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f943 	bl	8007f96 <UART_Transmit_IT>
    return;
 8007d10:	e00f      	b.n	8007d32 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00a      	beq.n	8007d32 <HAL_UART_IRQHandler+0x1f6>
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d005      	beq.n	8007d32 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f984 	bl	8008034 <UART_EndTransmit_IT>
    return;
 8007d2c:	bf00      	nop
 8007d2e:	e000      	b.n	8007d32 <HAL_UART_IRQHandler+0x1f6>
    return;
 8007d30:	bf00      	nop
  }
}
 8007d32:	3720      	adds	r7, #32
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	08007f6f 	.word	0x08007f6f

08007d3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bc80      	pop	{r7}
 8007d4c:	4770      	bx	lr

08007d4e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b083      	sub	sp, #12
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bc80      	pop	{r7}
 8007d5e:	4770      	bx	lr

08007d60 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bc80      	pop	{r7}
 8007d70:	4770      	bx	lr

08007d72 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bc80      	pop	{r7}
 8007d82:	4770      	bx	lr

08007d84 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0320 	and.w	r3, r3, #32
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d113      	bne.n	8007dc8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	695a      	ldr	r2, [r3, #20]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007db4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68da      	ldr	r2, [r3, #12]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dc4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007dc6:	e002      	b.n	8007dce <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f7ff ffb7 	bl	8007d3c <HAL_UART_TxCpltCallback>
}
 8007dce:	bf00      	nop
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f7ff ffb2 	bl	8007d4e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dea:	bf00      	nop
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0320 	and.w	r3, r3, #32
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d11e      	bne.n	8007e4c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e22:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695a      	ldr	r2, [r3, #20]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 0201 	bic.w	r2, r2, #1
 8007e32:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	695a      	ldr	r2, [r3, #20]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e42:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f7f9 fd37 	bl	80018c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e52:	bf00      	nop
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f7ff ff79 	bl	8007d60 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e6e:	bf00      	nop
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e86:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	695b      	ldr	r3, [r3, #20]
 8007e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	bf14      	ite	ne
 8007e96:	2301      	movne	r3, #1
 8007e98:	2300      	moveq	r3, #0
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b21      	cmp	r3, #33	; 0x21
 8007ea8:	d108      	bne.n	8007ebc <UART_DMAError+0x46>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d005      	beq.n	8007ebc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007eb6:	68b8      	ldr	r0, [r7, #8]
 8007eb8:	f000 f827 	bl	8007f0a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bf14      	ite	ne
 8007eca:	2301      	movne	r3, #1
 8007ecc:	2300      	moveq	r3, #0
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b22      	cmp	r3, #34	; 0x22
 8007edc:	d108      	bne.n	8007ef0 <UART_DMAError+0x7a>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d005      	beq.n	8007ef0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007eea:	68b8      	ldr	r0, [r7, #8]
 8007eec:	f000 f822 	bl	8007f34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef4:	f043 0210 	orr.w	r2, r3, #16
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007efc:	68b8      	ldr	r0, [r7, #8]
 8007efe:	f7ff ff38 	bl	8007d72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f02:	bf00      	nop
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007f20:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2220      	movs	r2, #32
 8007f26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007f2a:	bf00      	nop
 8007f2c:	370c      	adds	r7, #12
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bc80      	pop	{r7}
 8007f32:	4770      	bx	lr

08007f34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68da      	ldr	r2, [r3, #12]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f4a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	695a      	ldr	r2, [r3, #20]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 0201 	bic.w	r2, r2, #1
 8007f5a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bc80      	pop	{r7}
 8007f6c:	4770      	bx	lr

08007f6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f7ff fef2 	bl	8007d72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f8e:	bf00      	nop
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b085      	sub	sp, #20
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b21      	cmp	r3, #33	; 0x21
 8007fa8:	d13e      	bne.n	8008028 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb2:	d114      	bne.n	8007fde <UART_Transmit_IT+0x48>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d110      	bne.n	8007fde <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	1c9a      	adds	r2, r3, #2
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	621a      	str	r2, [r3, #32]
 8007fdc:	e008      	b.n	8007ff0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	1c59      	adds	r1, r3, #1
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	6211      	str	r1, [r2, #32]
 8007fe8:	781a      	ldrb	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10f      	bne.n	8008024 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008012:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68da      	ldr	r2, [r3, #12]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008022:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	e000      	b.n	800802a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008028:	2302      	movs	r3, #2
  }
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	bc80      	pop	{r7}
 8008032:	4770      	bx	lr

08008034 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800804a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2220      	movs	r2, #32
 8008050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7ff fe71 	bl	8007d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b22      	cmp	r3, #34	; 0x22
 8008076:	d170      	bne.n	800815a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008080:	d117      	bne.n	80080b2 <UART_Receive_IT+0x4e>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d113      	bne.n	80080b2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008092:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	b29b      	uxth	r3, r3
 800809c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080aa:	1c9a      	adds	r2, r3, #2
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	629a      	str	r2, [r3, #40]	; 0x28
 80080b0:	e026      	b.n	8008100 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80080b8:	2300      	movs	r3, #0
 80080ba:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c4:	d007      	beq.n	80080d6 <UART_Receive_IT+0x72>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10a      	bne.n	80080e4 <UART_Receive_IT+0x80>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d106      	bne.n	80080e4 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	701a      	strb	r2, [r3, #0]
 80080e2:	e008      	b.n	80080f6 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fa:	1c5a      	adds	r2, r3, #1
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008104:	b29b      	uxth	r3, r3
 8008106:	3b01      	subs	r3, #1
 8008108:	b29b      	uxth	r3, r3
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	4619      	mov	r1, r3
 800810e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008110:	2b00      	cmp	r3, #0
 8008112:	d120      	bne.n	8008156 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68da      	ldr	r2, [r3, #12]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 0220 	bic.w	r2, r2, #32
 8008122:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008132:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	695a      	ldr	r2, [r3, #20]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0201 	bic.w	r2, r2, #1
 8008142:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2220      	movs	r2, #32
 8008148:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7f9 fbb7 	bl	80018c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	e002      	b.n	800815c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	e000      	b.n	800815c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800815a:	2302      	movs	r3, #2
  }
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68da      	ldr	r2, [r3, #12]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	689a      	ldr	r2, [r3, #8]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	431a      	orrs	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	4313      	orrs	r3, r2
 8008192:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800819e:	f023 030c 	bic.w	r3, r3, #12
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	6812      	ldr	r2, [r2, #0]
 80081a6:	68b9      	ldr	r1, [r7, #8]
 80081a8:	430b      	orrs	r3, r1
 80081aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	699a      	ldr	r2, [r3, #24]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a2c      	ldr	r2, [pc, #176]	; (8008278 <UART_SetConfig+0x114>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d103      	bne.n	80081d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80081cc:	f7fe fd24 	bl	8006c18 <HAL_RCC_GetPCLK2Freq>
 80081d0:	60f8      	str	r0, [r7, #12]
 80081d2:	e002      	b.n	80081da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80081d4:	f7fe fd0c 	bl	8006bf0 <HAL_RCC_GetPCLK1Freq>
 80081d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	4613      	mov	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	009a      	lsls	r2, r3, #2
 80081e4:	441a      	add	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f0:	4a22      	ldr	r2, [pc, #136]	; (800827c <UART_SetConfig+0x118>)
 80081f2:	fba2 2303 	umull	r2, r3, r2, r3
 80081f6:	095b      	lsrs	r3, r3, #5
 80081f8:	0119      	lsls	r1, r3, #4
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	4613      	mov	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	009a      	lsls	r2, r3, #2
 8008204:	441a      	add	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008210:	4b1a      	ldr	r3, [pc, #104]	; (800827c <UART_SetConfig+0x118>)
 8008212:	fba3 0302 	umull	r0, r3, r3, r2
 8008216:	095b      	lsrs	r3, r3, #5
 8008218:	2064      	movs	r0, #100	; 0x64
 800821a:	fb00 f303 	mul.w	r3, r0, r3
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	011b      	lsls	r3, r3, #4
 8008222:	3332      	adds	r3, #50	; 0x32
 8008224:	4a15      	ldr	r2, [pc, #84]	; (800827c <UART_SetConfig+0x118>)
 8008226:	fba2 2303 	umull	r2, r3, r2, r3
 800822a:	095b      	lsrs	r3, r3, #5
 800822c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008230:	4419      	add	r1, r3
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	4613      	mov	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	009a      	lsls	r2, r3, #2
 800823c:	441a      	add	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	fbb2 f2f3 	udiv	r2, r2, r3
 8008248:	4b0c      	ldr	r3, [pc, #48]	; (800827c <UART_SetConfig+0x118>)
 800824a:	fba3 0302 	umull	r0, r3, r3, r2
 800824e:	095b      	lsrs	r3, r3, #5
 8008250:	2064      	movs	r0, #100	; 0x64
 8008252:	fb00 f303 	mul.w	r3, r0, r3
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	011b      	lsls	r3, r3, #4
 800825a:	3332      	adds	r3, #50	; 0x32
 800825c:	4a07      	ldr	r2, [pc, #28]	; (800827c <UART_SetConfig+0x118>)
 800825e:	fba2 2303 	umull	r2, r3, r2, r3
 8008262:	095b      	lsrs	r3, r3, #5
 8008264:	f003 020f 	and.w	r2, r3, #15
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	440a      	add	r2, r1
 800826e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008270:	bf00      	nop
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	40013800 	.word	0x40013800
 800827c:	51eb851f 	.word	0x51eb851f

08008280 <atoi>:
 8008280:	220a      	movs	r2, #10
 8008282:	2100      	movs	r1, #0
 8008284:	f000 bd36 	b.w	8008cf4 <strtol>

08008288 <__errno>:
 8008288:	4b01      	ldr	r3, [pc, #4]	; (8008290 <__errno+0x8>)
 800828a:	6818      	ldr	r0, [r3, #0]
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	2000003c 	.word	0x2000003c

08008294 <__libc_init_array>:
 8008294:	b570      	push	{r4, r5, r6, lr}
 8008296:	2500      	movs	r5, #0
 8008298:	4e0c      	ldr	r6, [pc, #48]	; (80082cc <__libc_init_array+0x38>)
 800829a:	4c0d      	ldr	r4, [pc, #52]	; (80082d0 <__libc_init_array+0x3c>)
 800829c:	1ba4      	subs	r4, r4, r6
 800829e:	10a4      	asrs	r4, r4, #2
 80082a0:	42a5      	cmp	r5, r4
 80082a2:	d109      	bne.n	80082b8 <__libc_init_array+0x24>
 80082a4:	f004 f99c 	bl	800c5e0 <_init>
 80082a8:	2500      	movs	r5, #0
 80082aa:	4e0a      	ldr	r6, [pc, #40]	; (80082d4 <__libc_init_array+0x40>)
 80082ac:	4c0a      	ldr	r4, [pc, #40]	; (80082d8 <__libc_init_array+0x44>)
 80082ae:	1ba4      	subs	r4, r4, r6
 80082b0:	10a4      	asrs	r4, r4, #2
 80082b2:	42a5      	cmp	r5, r4
 80082b4:	d105      	bne.n	80082c2 <__libc_init_array+0x2e>
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80082bc:	4798      	blx	r3
 80082be:	3501      	adds	r5, #1
 80082c0:	e7ee      	b.n	80082a0 <__libc_init_array+0xc>
 80082c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80082c6:	4798      	blx	r3
 80082c8:	3501      	adds	r5, #1
 80082ca:	e7f2      	b.n	80082b2 <__libc_init_array+0x1e>
 80082cc:	0800ccd8 	.word	0x0800ccd8
 80082d0:	0800ccd8 	.word	0x0800ccd8
 80082d4:	0800ccd8 	.word	0x0800ccd8
 80082d8:	0800ccdc 	.word	0x0800ccdc

080082dc <memcpy>:
 80082dc:	b510      	push	{r4, lr}
 80082de:	1e43      	subs	r3, r0, #1
 80082e0:	440a      	add	r2, r1
 80082e2:	4291      	cmp	r1, r2
 80082e4:	d100      	bne.n	80082e8 <memcpy+0xc>
 80082e6:	bd10      	pop	{r4, pc}
 80082e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082f0:	e7f7      	b.n	80082e2 <memcpy+0x6>

080082f2 <memset>:
 80082f2:	4603      	mov	r3, r0
 80082f4:	4402      	add	r2, r0
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d100      	bne.n	80082fc <memset+0xa>
 80082fa:	4770      	bx	lr
 80082fc:	f803 1b01 	strb.w	r1, [r3], #1
 8008300:	e7f9      	b.n	80082f6 <memset+0x4>

08008302 <__cvt>:
 8008302:	2b00      	cmp	r3, #0
 8008304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008308:	461e      	mov	r6, r3
 800830a:	bfbb      	ittet	lt
 800830c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008310:	461e      	movlt	r6, r3
 8008312:	2300      	movge	r3, #0
 8008314:	232d      	movlt	r3, #45	; 0x2d
 8008316:	b088      	sub	sp, #32
 8008318:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800831a:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800831e:	f027 0720 	bic.w	r7, r7, #32
 8008322:	2f46      	cmp	r7, #70	; 0x46
 8008324:	4614      	mov	r4, r2
 8008326:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008328:	700b      	strb	r3, [r1, #0]
 800832a:	d004      	beq.n	8008336 <__cvt+0x34>
 800832c:	2f45      	cmp	r7, #69	; 0x45
 800832e:	d100      	bne.n	8008332 <__cvt+0x30>
 8008330:	3501      	adds	r5, #1
 8008332:	2302      	movs	r3, #2
 8008334:	e000      	b.n	8008338 <__cvt+0x36>
 8008336:	2303      	movs	r3, #3
 8008338:	aa07      	add	r2, sp, #28
 800833a:	9204      	str	r2, [sp, #16]
 800833c:	aa06      	add	r2, sp, #24
 800833e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008342:	e9cd 3500 	strd	r3, r5, [sp]
 8008346:	4622      	mov	r2, r4
 8008348:	4633      	mov	r3, r6
 800834a:	f000 fd79 	bl	8008e40 <_dtoa_r>
 800834e:	2f47      	cmp	r7, #71	; 0x47
 8008350:	4680      	mov	r8, r0
 8008352:	d102      	bne.n	800835a <__cvt+0x58>
 8008354:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008356:	07db      	lsls	r3, r3, #31
 8008358:	d526      	bpl.n	80083a8 <__cvt+0xa6>
 800835a:	2f46      	cmp	r7, #70	; 0x46
 800835c:	eb08 0905 	add.w	r9, r8, r5
 8008360:	d111      	bne.n	8008386 <__cvt+0x84>
 8008362:	f898 3000 	ldrb.w	r3, [r8]
 8008366:	2b30      	cmp	r3, #48	; 0x30
 8008368:	d10a      	bne.n	8008380 <__cvt+0x7e>
 800836a:	2200      	movs	r2, #0
 800836c:	2300      	movs	r3, #0
 800836e:	4620      	mov	r0, r4
 8008370:	4631      	mov	r1, r6
 8008372:	f7f8 fb19 	bl	80009a8 <__aeabi_dcmpeq>
 8008376:	b918      	cbnz	r0, 8008380 <__cvt+0x7e>
 8008378:	f1c5 0501 	rsb	r5, r5, #1
 800837c:	f8ca 5000 	str.w	r5, [sl]
 8008380:	f8da 3000 	ldr.w	r3, [sl]
 8008384:	4499      	add	r9, r3
 8008386:	2200      	movs	r2, #0
 8008388:	2300      	movs	r3, #0
 800838a:	4620      	mov	r0, r4
 800838c:	4631      	mov	r1, r6
 800838e:	f7f8 fb0b 	bl	80009a8 <__aeabi_dcmpeq>
 8008392:	b938      	cbnz	r0, 80083a4 <__cvt+0xa2>
 8008394:	2230      	movs	r2, #48	; 0x30
 8008396:	9b07      	ldr	r3, [sp, #28]
 8008398:	454b      	cmp	r3, r9
 800839a:	d205      	bcs.n	80083a8 <__cvt+0xa6>
 800839c:	1c59      	adds	r1, r3, #1
 800839e:	9107      	str	r1, [sp, #28]
 80083a0:	701a      	strb	r2, [r3, #0]
 80083a2:	e7f8      	b.n	8008396 <__cvt+0x94>
 80083a4:	f8cd 901c 	str.w	r9, [sp, #28]
 80083a8:	4640      	mov	r0, r8
 80083aa:	9b07      	ldr	r3, [sp, #28]
 80083ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80083ae:	eba3 0308 	sub.w	r3, r3, r8
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	b008      	add	sp, #32
 80083b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080083ba <__exponent>:
 80083ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083bc:	2900      	cmp	r1, #0
 80083be:	bfb4      	ite	lt
 80083c0:	232d      	movlt	r3, #45	; 0x2d
 80083c2:	232b      	movge	r3, #43	; 0x2b
 80083c4:	4604      	mov	r4, r0
 80083c6:	bfb8      	it	lt
 80083c8:	4249      	neglt	r1, r1
 80083ca:	2909      	cmp	r1, #9
 80083cc:	f804 2b02 	strb.w	r2, [r4], #2
 80083d0:	7043      	strb	r3, [r0, #1]
 80083d2:	dd21      	ble.n	8008418 <__exponent+0x5e>
 80083d4:	f10d 0307 	add.w	r3, sp, #7
 80083d8:	461f      	mov	r7, r3
 80083da:	260a      	movs	r6, #10
 80083dc:	fb91 f5f6 	sdiv	r5, r1, r6
 80083e0:	fb06 1115 	mls	r1, r6, r5, r1
 80083e4:	2d09      	cmp	r5, #9
 80083e6:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80083ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80083ee:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80083f2:	4629      	mov	r1, r5
 80083f4:	dc09      	bgt.n	800840a <__exponent+0x50>
 80083f6:	3130      	adds	r1, #48	; 0x30
 80083f8:	3b02      	subs	r3, #2
 80083fa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80083fe:	42bb      	cmp	r3, r7
 8008400:	4622      	mov	r2, r4
 8008402:	d304      	bcc.n	800840e <__exponent+0x54>
 8008404:	1a10      	subs	r0, r2, r0
 8008406:	b003      	add	sp, #12
 8008408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800840a:	4613      	mov	r3, r2
 800840c:	e7e6      	b.n	80083dc <__exponent+0x22>
 800840e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008412:	f804 2b01 	strb.w	r2, [r4], #1
 8008416:	e7f2      	b.n	80083fe <__exponent+0x44>
 8008418:	2330      	movs	r3, #48	; 0x30
 800841a:	4419      	add	r1, r3
 800841c:	7083      	strb	r3, [r0, #2]
 800841e:	1d02      	adds	r2, r0, #4
 8008420:	70c1      	strb	r1, [r0, #3]
 8008422:	e7ef      	b.n	8008404 <__exponent+0x4a>

08008424 <_printf_float>:
 8008424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008428:	b091      	sub	sp, #68	; 0x44
 800842a:	460c      	mov	r4, r1
 800842c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800842e:	4693      	mov	fp, r2
 8008430:	461e      	mov	r6, r3
 8008432:	4605      	mov	r5, r0
 8008434:	f001 fabc 	bl	80099b0 <_localeconv_r>
 8008438:	6803      	ldr	r3, [r0, #0]
 800843a:	4618      	mov	r0, r3
 800843c:	9309      	str	r3, [sp, #36]	; 0x24
 800843e:	f7f7 fe87 	bl	8000150 <strlen>
 8008442:	2300      	movs	r3, #0
 8008444:	930e      	str	r3, [sp, #56]	; 0x38
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	900a      	str	r0, [sp, #40]	; 0x28
 800844a:	3307      	adds	r3, #7
 800844c:	f023 0307 	bic.w	r3, r3, #7
 8008450:	f103 0208 	add.w	r2, r3, #8
 8008454:	f894 8018 	ldrb.w	r8, [r4, #24]
 8008458:	f8d4 a000 	ldr.w	sl, [r4]
 800845c:	603a      	str	r2, [r7, #0]
 800845e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008462:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008466:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800846a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800846e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008474:	4ba6      	ldr	r3, [pc, #664]	; (8008710 <_printf_float+0x2ec>)
 8008476:	4638      	mov	r0, r7
 8008478:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800847a:	f7f8 fac7 	bl	8000a0c <__aeabi_dcmpun>
 800847e:	bb68      	cbnz	r0, 80084dc <_printf_float+0xb8>
 8008480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008484:	4ba2      	ldr	r3, [pc, #648]	; (8008710 <_printf_float+0x2ec>)
 8008486:	4638      	mov	r0, r7
 8008488:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800848a:	f7f8 faa1 	bl	80009d0 <__aeabi_dcmple>
 800848e:	bb28      	cbnz	r0, 80084dc <_printf_float+0xb8>
 8008490:	2200      	movs	r2, #0
 8008492:	2300      	movs	r3, #0
 8008494:	4638      	mov	r0, r7
 8008496:	4649      	mov	r1, r9
 8008498:	f7f8 fa90 	bl	80009bc <__aeabi_dcmplt>
 800849c:	b110      	cbz	r0, 80084a4 <_printf_float+0x80>
 800849e:	232d      	movs	r3, #45	; 0x2d
 80084a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084a4:	4f9b      	ldr	r7, [pc, #620]	; (8008714 <_printf_float+0x2f0>)
 80084a6:	4b9c      	ldr	r3, [pc, #624]	; (8008718 <_printf_float+0x2f4>)
 80084a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80084ac:	bf98      	it	ls
 80084ae:	461f      	movls	r7, r3
 80084b0:	2303      	movs	r3, #3
 80084b2:	f04f 0900 	mov.w	r9, #0
 80084b6:	6123      	str	r3, [r4, #16]
 80084b8:	f02a 0304 	bic.w	r3, sl, #4
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	9600      	str	r6, [sp, #0]
 80084c0:	465b      	mov	r3, fp
 80084c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80084c4:	4621      	mov	r1, r4
 80084c6:	4628      	mov	r0, r5
 80084c8:	f000 f9e2 	bl	8008890 <_printf_common>
 80084cc:	3001      	adds	r0, #1
 80084ce:	f040 8090 	bne.w	80085f2 <_printf_float+0x1ce>
 80084d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084d6:	b011      	add	sp, #68	; 0x44
 80084d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084dc:	463a      	mov	r2, r7
 80084de:	464b      	mov	r3, r9
 80084e0:	4638      	mov	r0, r7
 80084e2:	4649      	mov	r1, r9
 80084e4:	f7f8 fa92 	bl	8000a0c <__aeabi_dcmpun>
 80084e8:	b110      	cbz	r0, 80084f0 <_printf_float+0xcc>
 80084ea:	4f8c      	ldr	r7, [pc, #560]	; (800871c <_printf_float+0x2f8>)
 80084ec:	4b8c      	ldr	r3, [pc, #560]	; (8008720 <_printf_float+0x2fc>)
 80084ee:	e7db      	b.n	80084a8 <_printf_float+0x84>
 80084f0:	6863      	ldr	r3, [r4, #4]
 80084f2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80084f6:	1c59      	adds	r1, r3, #1
 80084f8:	a80d      	add	r0, sp, #52	; 0x34
 80084fa:	a90e      	add	r1, sp, #56	; 0x38
 80084fc:	d140      	bne.n	8008580 <_printf_float+0x15c>
 80084fe:	2306      	movs	r3, #6
 8008500:	6063      	str	r3, [r4, #4]
 8008502:	f04f 0c00 	mov.w	ip, #0
 8008506:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800850a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800850e:	6863      	ldr	r3, [r4, #4]
 8008510:	6022      	str	r2, [r4, #0]
 8008512:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	463a      	mov	r2, r7
 800851a:	464b      	mov	r3, r9
 800851c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008520:	4628      	mov	r0, r5
 8008522:	f7ff feee 	bl	8008302 <__cvt>
 8008526:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800852a:	2b47      	cmp	r3, #71	; 0x47
 800852c:	4607      	mov	r7, r0
 800852e:	d109      	bne.n	8008544 <_printf_float+0x120>
 8008530:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008532:	1cd8      	adds	r0, r3, #3
 8008534:	db02      	blt.n	800853c <_printf_float+0x118>
 8008536:	6862      	ldr	r2, [r4, #4]
 8008538:	4293      	cmp	r3, r2
 800853a:	dd47      	ble.n	80085cc <_printf_float+0x1a8>
 800853c:	f1a8 0802 	sub.w	r8, r8, #2
 8008540:	fa5f f888 	uxtb.w	r8, r8
 8008544:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008548:	990d      	ldr	r1, [sp, #52]	; 0x34
 800854a:	d824      	bhi.n	8008596 <_printf_float+0x172>
 800854c:	3901      	subs	r1, #1
 800854e:	4642      	mov	r2, r8
 8008550:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008554:	910d      	str	r1, [sp, #52]	; 0x34
 8008556:	f7ff ff30 	bl	80083ba <__exponent>
 800855a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800855c:	4681      	mov	r9, r0
 800855e:	1813      	adds	r3, r2, r0
 8008560:	2a01      	cmp	r2, #1
 8008562:	6123      	str	r3, [r4, #16]
 8008564:	dc02      	bgt.n	800856c <_printf_float+0x148>
 8008566:	6822      	ldr	r2, [r4, #0]
 8008568:	07d1      	lsls	r1, r2, #31
 800856a:	d501      	bpl.n	8008570 <_printf_float+0x14c>
 800856c:	3301      	adds	r3, #1
 800856e:	6123      	str	r3, [r4, #16]
 8008570:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008574:	2b00      	cmp	r3, #0
 8008576:	d0a2      	beq.n	80084be <_printf_float+0x9a>
 8008578:	232d      	movs	r3, #45	; 0x2d
 800857a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800857e:	e79e      	b.n	80084be <_printf_float+0x9a>
 8008580:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8008584:	f000 816e 	beq.w	8008864 <_printf_float+0x440>
 8008588:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800858c:	d1b9      	bne.n	8008502 <_printf_float+0xde>
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1b7      	bne.n	8008502 <_printf_float+0xde>
 8008592:	2301      	movs	r3, #1
 8008594:	e7b4      	b.n	8008500 <_printf_float+0xdc>
 8008596:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800859a:	d119      	bne.n	80085d0 <_printf_float+0x1ac>
 800859c:	2900      	cmp	r1, #0
 800859e:	6863      	ldr	r3, [r4, #4]
 80085a0:	dd0c      	ble.n	80085bc <_printf_float+0x198>
 80085a2:	6121      	str	r1, [r4, #16]
 80085a4:	b913      	cbnz	r3, 80085ac <_printf_float+0x188>
 80085a6:	6822      	ldr	r2, [r4, #0]
 80085a8:	07d2      	lsls	r2, r2, #31
 80085aa:	d502      	bpl.n	80085b2 <_printf_float+0x18e>
 80085ac:	3301      	adds	r3, #1
 80085ae:	440b      	add	r3, r1
 80085b0:	6123      	str	r3, [r4, #16]
 80085b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085b4:	f04f 0900 	mov.w	r9, #0
 80085b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80085ba:	e7d9      	b.n	8008570 <_printf_float+0x14c>
 80085bc:	b913      	cbnz	r3, 80085c4 <_printf_float+0x1a0>
 80085be:	6822      	ldr	r2, [r4, #0]
 80085c0:	07d0      	lsls	r0, r2, #31
 80085c2:	d501      	bpl.n	80085c8 <_printf_float+0x1a4>
 80085c4:	3302      	adds	r3, #2
 80085c6:	e7f3      	b.n	80085b0 <_printf_float+0x18c>
 80085c8:	2301      	movs	r3, #1
 80085ca:	e7f1      	b.n	80085b0 <_printf_float+0x18c>
 80085cc:	f04f 0867 	mov.w	r8, #103	; 0x67
 80085d0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80085d4:	4293      	cmp	r3, r2
 80085d6:	db05      	blt.n	80085e4 <_printf_float+0x1c0>
 80085d8:	6822      	ldr	r2, [r4, #0]
 80085da:	6123      	str	r3, [r4, #16]
 80085dc:	07d1      	lsls	r1, r2, #31
 80085de:	d5e8      	bpl.n	80085b2 <_printf_float+0x18e>
 80085e0:	3301      	adds	r3, #1
 80085e2:	e7e5      	b.n	80085b0 <_printf_float+0x18c>
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	bfcc      	ite	gt
 80085e8:	2301      	movgt	r3, #1
 80085ea:	f1c3 0302 	rsble	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	e7de      	b.n	80085b0 <_printf_float+0x18c>
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	055a      	lsls	r2, r3, #21
 80085f6:	d407      	bmi.n	8008608 <_printf_float+0x1e4>
 80085f8:	6923      	ldr	r3, [r4, #16]
 80085fa:	463a      	mov	r2, r7
 80085fc:	4659      	mov	r1, fp
 80085fe:	4628      	mov	r0, r5
 8008600:	47b0      	blx	r6
 8008602:	3001      	adds	r0, #1
 8008604:	d129      	bne.n	800865a <_printf_float+0x236>
 8008606:	e764      	b.n	80084d2 <_printf_float+0xae>
 8008608:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800860c:	f240 80d7 	bls.w	80087be <_printf_float+0x39a>
 8008610:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008614:	2200      	movs	r2, #0
 8008616:	2300      	movs	r3, #0
 8008618:	f7f8 f9c6 	bl	80009a8 <__aeabi_dcmpeq>
 800861c:	b388      	cbz	r0, 8008682 <_printf_float+0x25e>
 800861e:	2301      	movs	r3, #1
 8008620:	4a40      	ldr	r2, [pc, #256]	; (8008724 <_printf_float+0x300>)
 8008622:	4659      	mov	r1, fp
 8008624:	4628      	mov	r0, r5
 8008626:	47b0      	blx	r6
 8008628:	3001      	adds	r0, #1
 800862a:	f43f af52 	beq.w	80084d2 <_printf_float+0xae>
 800862e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008632:	429a      	cmp	r2, r3
 8008634:	db02      	blt.n	800863c <_printf_float+0x218>
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	07d8      	lsls	r0, r3, #31
 800863a:	d50e      	bpl.n	800865a <_printf_float+0x236>
 800863c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008640:	4659      	mov	r1, fp
 8008642:	4628      	mov	r0, r5
 8008644:	47b0      	blx	r6
 8008646:	3001      	adds	r0, #1
 8008648:	f43f af43 	beq.w	80084d2 <_printf_float+0xae>
 800864c:	2700      	movs	r7, #0
 800864e:	f104 081a 	add.w	r8, r4, #26
 8008652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008654:	3b01      	subs	r3, #1
 8008656:	42bb      	cmp	r3, r7
 8008658:	dc09      	bgt.n	800866e <_printf_float+0x24a>
 800865a:	6823      	ldr	r3, [r4, #0]
 800865c:	079f      	lsls	r7, r3, #30
 800865e:	f100 80fd 	bmi.w	800885c <_printf_float+0x438>
 8008662:	68e0      	ldr	r0, [r4, #12]
 8008664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008666:	4298      	cmp	r0, r3
 8008668:	bfb8      	it	lt
 800866a:	4618      	movlt	r0, r3
 800866c:	e733      	b.n	80084d6 <_printf_float+0xb2>
 800866e:	2301      	movs	r3, #1
 8008670:	4642      	mov	r2, r8
 8008672:	4659      	mov	r1, fp
 8008674:	4628      	mov	r0, r5
 8008676:	47b0      	blx	r6
 8008678:	3001      	adds	r0, #1
 800867a:	f43f af2a 	beq.w	80084d2 <_printf_float+0xae>
 800867e:	3701      	adds	r7, #1
 8008680:	e7e7      	b.n	8008652 <_printf_float+0x22e>
 8008682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008684:	2b00      	cmp	r3, #0
 8008686:	dc2b      	bgt.n	80086e0 <_printf_float+0x2bc>
 8008688:	2301      	movs	r3, #1
 800868a:	4a26      	ldr	r2, [pc, #152]	; (8008724 <_printf_float+0x300>)
 800868c:	4659      	mov	r1, fp
 800868e:	4628      	mov	r0, r5
 8008690:	47b0      	blx	r6
 8008692:	3001      	adds	r0, #1
 8008694:	f43f af1d 	beq.w	80084d2 <_printf_float+0xae>
 8008698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800869a:	b923      	cbnz	r3, 80086a6 <_printf_float+0x282>
 800869c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800869e:	b913      	cbnz	r3, 80086a6 <_printf_float+0x282>
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	07d9      	lsls	r1, r3, #31
 80086a4:	d5d9      	bpl.n	800865a <_printf_float+0x236>
 80086a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086aa:	4659      	mov	r1, fp
 80086ac:	4628      	mov	r0, r5
 80086ae:	47b0      	blx	r6
 80086b0:	3001      	adds	r0, #1
 80086b2:	f43f af0e 	beq.w	80084d2 <_printf_float+0xae>
 80086b6:	f04f 0800 	mov.w	r8, #0
 80086ba:	f104 091a 	add.w	r9, r4, #26
 80086be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086c0:	425b      	negs	r3, r3
 80086c2:	4543      	cmp	r3, r8
 80086c4:	dc01      	bgt.n	80086ca <_printf_float+0x2a6>
 80086c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086c8:	e797      	b.n	80085fa <_printf_float+0x1d6>
 80086ca:	2301      	movs	r3, #1
 80086cc:	464a      	mov	r2, r9
 80086ce:	4659      	mov	r1, fp
 80086d0:	4628      	mov	r0, r5
 80086d2:	47b0      	blx	r6
 80086d4:	3001      	adds	r0, #1
 80086d6:	f43f aefc 	beq.w	80084d2 <_printf_float+0xae>
 80086da:	f108 0801 	add.w	r8, r8, #1
 80086de:	e7ee      	b.n	80086be <_printf_float+0x29a>
 80086e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086e4:	429a      	cmp	r2, r3
 80086e6:	bfa8      	it	ge
 80086e8:	461a      	movge	r2, r3
 80086ea:	2a00      	cmp	r2, #0
 80086ec:	4690      	mov	r8, r2
 80086ee:	dd07      	ble.n	8008700 <_printf_float+0x2dc>
 80086f0:	4613      	mov	r3, r2
 80086f2:	4659      	mov	r1, fp
 80086f4:	463a      	mov	r2, r7
 80086f6:	4628      	mov	r0, r5
 80086f8:	47b0      	blx	r6
 80086fa:	3001      	adds	r0, #1
 80086fc:	f43f aee9 	beq.w	80084d2 <_printf_float+0xae>
 8008700:	f104 031a 	add.w	r3, r4, #26
 8008704:	f04f 0a00 	mov.w	sl, #0
 8008708:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800870c:	930b      	str	r3, [sp, #44]	; 0x2c
 800870e:	e015      	b.n	800873c <_printf_float+0x318>
 8008710:	7fefffff 	.word	0x7fefffff
 8008714:	0800c854 	.word	0x0800c854
 8008718:	0800c850 	.word	0x0800c850
 800871c:	0800c85c 	.word	0x0800c85c
 8008720:	0800c858 	.word	0x0800c858
 8008724:	0800c860 	.word	0x0800c860
 8008728:	2301      	movs	r3, #1
 800872a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800872c:	4659      	mov	r1, fp
 800872e:	4628      	mov	r0, r5
 8008730:	47b0      	blx	r6
 8008732:	3001      	adds	r0, #1
 8008734:	f43f aecd 	beq.w	80084d2 <_printf_float+0xae>
 8008738:	f10a 0a01 	add.w	sl, sl, #1
 800873c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8008740:	eba9 0308 	sub.w	r3, r9, r8
 8008744:	4553      	cmp	r3, sl
 8008746:	dcef      	bgt.n	8008728 <_printf_float+0x304>
 8008748:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800874c:	429a      	cmp	r2, r3
 800874e:	444f      	add	r7, r9
 8008750:	db14      	blt.n	800877c <_printf_float+0x358>
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	07da      	lsls	r2, r3, #31
 8008756:	d411      	bmi.n	800877c <_printf_float+0x358>
 8008758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800875a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800875c:	eba3 0209 	sub.w	r2, r3, r9
 8008760:	eba3 0901 	sub.w	r9, r3, r1
 8008764:	4591      	cmp	r9, r2
 8008766:	bfa8      	it	ge
 8008768:	4691      	movge	r9, r2
 800876a:	f1b9 0f00 	cmp.w	r9, #0
 800876e:	dc0d      	bgt.n	800878c <_printf_float+0x368>
 8008770:	2700      	movs	r7, #0
 8008772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008776:	f104 081a 	add.w	r8, r4, #26
 800877a:	e018      	b.n	80087ae <_printf_float+0x38a>
 800877c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008780:	4659      	mov	r1, fp
 8008782:	4628      	mov	r0, r5
 8008784:	47b0      	blx	r6
 8008786:	3001      	adds	r0, #1
 8008788:	d1e6      	bne.n	8008758 <_printf_float+0x334>
 800878a:	e6a2      	b.n	80084d2 <_printf_float+0xae>
 800878c:	464b      	mov	r3, r9
 800878e:	463a      	mov	r2, r7
 8008790:	4659      	mov	r1, fp
 8008792:	4628      	mov	r0, r5
 8008794:	47b0      	blx	r6
 8008796:	3001      	adds	r0, #1
 8008798:	d1ea      	bne.n	8008770 <_printf_float+0x34c>
 800879a:	e69a      	b.n	80084d2 <_printf_float+0xae>
 800879c:	2301      	movs	r3, #1
 800879e:	4642      	mov	r2, r8
 80087a0:	4659      	mov	r1, fp
 80087a2:	4628      	mov	r0, r5
 80087a4:	47b0      	blx	r6
 80087a6:	3001      	adds	r0, #1
 80087a8:	f43f ae93 	beq.w	80084d2 <_printf_float+0xae>
 80087ac:	3701      	adds	r7, #1
 80087ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80087b2:	1a9b      	subs	r3, r3, r2
 80087b4:	eba3 0309 	sub.w	r3, r3, r9
 80087b8:	42bb      	cmp	r3, r7
 80087ba:	dcef      	bgt.n	800879c <_printf_float+0x378>
 80087bc:	e74d      	b.n	800865a <_printf_float+0x236>
 80087be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087c0:	2a01      	cmp	r2, #1
 80087c2:	dc01      	bgt.n	80087c8 <_printf_float+0x3a4>
 80087c4:	07db      	lsls	r3, r3, #31
 80087c6:	d538      	bpl.n	800883a <_printf_float+0x416>
 80087c8:	2301      	movs	r3, #1
 80087ca:	463a      	mov	r2, r7
 80087cc:	4659      	mov	r1, fp
 80087ce:	4628      	mov	r0, r5
 80087d0:	47b0      	blx	r6
 80087d2:	3001      	adds	r0, #1
 80087d4:	f43f ae7d 	beq.w	80084d2 <_printf_float+0xae>
 80087d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087dc:	4659      	mov	r1, fp
 80087de:	4628      	mov	r0, r5
 80087e0:	47b0      	blx	r6
 80087e2:	3001      	adds	r0, #1
 80087e4:	f107 0701 	add.w	r7, r7, #1
 80087e8:	f43f ae73 	beq.w	80084d2 <_printf_float+0xae>
 80087ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087f2:	2200      	movs	r2, #0
 80087f4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80087f8:	2300      	movs	r3, #0
 80087fa:	f7f8 f8d5 	bl	80009a8 <__aeabi_dcmpeq>
 80087fe:	b9c0      	cbnz	r0, 8008832 <_printf_float+0x40e>
 8008800:	4643      	mov	r3, r8
 8008802:	463a      	mov	r2, r7
 8008804:	4659      	mov	r1, fp
 8008806:	4628      	mov	r0, r5
 8008808:	47b0      	blx	r6
 800880a:	3001      	adds	r0, #1
 800880c:	d10d      	bne.n	800882a <_printf_float+0x406>
 800880e:	e660      	b.n	80084d2 <_printf_float+0xae>
 8008810:	2301      	movs	r3, #1
 8008812:	4642      	mov	r2, r8
 8008814:	4659      	mov	r1, fp
 8008816:	4628      	mov	r0, r5
 8008818:	47b0      	blx	r6
 800881a:	3001      	adds	r0, #1
 800881c:	f43f ae59 	beq.w	80084d2 <_printf_float+0xae>
 8008820:	3701      	adds	r7, #1
 8008822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008824:	3b01      	subs	r3, #1
 8008826:	42bb      	cmp	r3, r7
 8008828:	dcf2      	bgt.n	8008810 <_printf_float+0x3ec>
 800882a:	464b      	mov	r3, r9
 800882c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008830:	e6e4      	b.n	80085fc <_printf_float+0x1d8>
 8008832:	2700      	movs	r7, #0
 8008834:	f104 081a 	add.w	r8, r4, #26
 8008838:	e7f3      	b.n	8008822 <_printf_float+0x3fe>
 800883a:	2301      	movs	r3, #1
 800883c:	e7e1      	b.n	8008802 <_printf_float+0x3de>
 800883e:	2301      	movs	r3, #1
 8008840:	4642      	mov	r2, r8
 8008842:	4659      	mov	r1, fp
 8008844:	4628      	mov	r0, r5
 8008846:	47b0      	blx	r6
 8008848:	3001      	adds	r0, #1
 800884a:	f43f ae42 	beq.w	80084d2 <_printf_float+0xae>
 800884e:	3701      	adds	r7, #1
 8008850:	68e3      	ldr	r3, [r4, #12]
 8008852:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008854:	1a9b      	subs	r3, r3, r2
 8008856:	42bb      	cmp	r3, r7
 8008858:	dcf1      	bgt.n	800883e <_printf_float+0x41a>
 800885a:	e702      	b.n	8008662 <_printf_float+0x23e>
 800885c:	2700      	movs	r7, #0
 800885e:	f104 0819 	add.w	r8, r4, #25
 8008862:	e7f5      	b.n	8008850 <_printf_float+0x42c>
 8008864:	2b00      	cmp	r3, #0
 8008866:	f43f ae94 	beq.w	8008592 <_printf_float+0x16e>
 800886a:	f04f 0c00 	mov.w	ip, #0
 800886e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008872:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8008876:	6022      	str	r2, [r4, #0]
 8008878:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800887c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	463a      	mov	r2, r7
 8008884:	464b      	mov	r3, r9
 8008886:	4628      	mov	r0, r5
 8008888:	f7ff fd3b 	bl	8008302 <__cvt>
 800888c:	4607      	mov	r7, r0
 800888e:	e64f      	b.n	8008530 <_printf_float+0x10c>

08008890 <_printf_common>:
 8008890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008894:	4691      	mov	r9, r2
 8008896:	461f      	mov	r7, r3
 8008898:	688a      	ldr	r2, [r1, #8]
 800889a:	690b      	ldr	r3, [r1, #16]
 800889c:	4606      	mov	r6, r0
 800889e:	4293      	cmp	r3, r2
 80088a0:	bfb8      	it	lt
 80088a2:	4613      	movlt	r3, r2
 80088a4:	f8c9 3000 	str.w	r3, [r9]
 80088a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088ac:	460c      	mov	r4, r1
 80088ae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088b2:	b112      	cbz	r2, 80088ba <_printf_common+0x2a>
 80088b4:	3301      	adds	r3, #1
 80088b6:	f8c9 3000 	str.w	r3, [r9]
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	0699      	lsls	r1, r3, #26
 80088be:	bf42      	ittt	mi
 80088c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80088c4:	3302      	addmi	r3, #2
 80088c6:	f8c9 3000 	strmi.w	r3, [r9]
 80088ca:	6825      	ldr	r5, [r4, #0]
 80088cc:	f015 0506 	ands.w	r5, r5, #6
 80088d0:	d107      	bne.n	80088e2 <_printf_common+0x52>
 80088d2:	f104 0a19 	add.w	sl, r4, #25
 80088d6:	68e3      	ldr	r3, [r4, #12]
 80088d8:	f8d9 2000 	ldr.w	r2, [r9]
 80088dc:	1a9b      	subs	r3, r3, r2
 80088de:	42ab      	cmp	r3, r5
 80088e0:	dc29      	bgt.n	8008936 <_printf_common+0xa6>
 80088e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80088e6:	6822      	ldr	r2, [r4, #0]
 80088e8:	3300      	adds	r3, #0
 80088ea:	bf18      	it	ne
 80088ec:	2301      	movne	r3, #1
 80088ee:	0692      	lsls	r2, r2, #26
 80088f0:	d42e      	bmi.n	8008950 <_printf_common+0xc0>
 80088f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088f6:	4639      	mov	r1, r7
 80088f8:	4630      	mov	r0, r6
 80088fa:	47c0      	blx	r8
 80088fc:	3001      	adds	r0, #1
 80088fe:	d021      	beq.n	8008944 <_printf_common+0xb4>
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	68e5      	ldr	r5, [r4, #12]
 8008904:	f003 0306 	and.w	r3, r3, #6
 8008908:	2b04      	cmp	r3, #4
 800890a:	bf18      	it	ne
 800890c:	2500      	movne	r5, #0
 800890e:	f8d9 2000 	ldr.w	r2, [r9]
 8008912:	f04f 0900 	mov.w	r9, #0
 8008916:	bf08      	it	eq
 8008918:	1aad      	subeq	r5, r5, r2
 800891a:	68a3      	ldr	r3, [r4, #8]
 800891c:	6922      	ldr	r2, [r4, #16]
 800891e:	bf08      	it	eq
 8008920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008924:	4293      	cmp	r3, r2
 8008926:	bfc4      	itt	gt
 8008928:	1a9b      	subgt	r3, r3, r2
 800892a:	18ed      	addgt	r5, r5, r3
 800892c:	341a      	adds	r4, #26
 800892e:	454d      	cmp	r5, r9
 8008930:	d11a      	bne.n	8008968 <_printf_common+0xd8>
 8008932:	2000      	movs	r0, #0
 8008934:	e008      	b.n	8008948 <_printf_common+0xb8>
 8008936:	2301      	movs	r3, #1
 8008938:	4652      	mov	r2, sl
 800893a:	4639      	mov	r1, r7
 800893c:	4630      	mov	r0, r6
 800893e:	47c0      	blx	r8
 8008940:	3001      	adds	r0, #1
 8008942:	d103      	bne.n	800894c <_printf_common+0xbc>
 8008944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800894c:	3501      	adds	r5, #1
 800894e:	e7c2      	b.n	80088d6 <_printf_common+0x46>
 8008950:	2030      	movs	r0, #48	; 0x30
 8008952:	18e1      	adds	r1, r4, r3
 8008954:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800895e:	4422      	add	r2, r4
 8008960:	3302      	adds	r3, #2
 8008962:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008966:	e7c4      	b.n	80088f2 <_printf_common+0x62>
 8008968:	2301      	movs	r3, #1
 800896a:	4622      	mov	r2, r4
 800896c:	4639      	mov	r1, r7
 800896e:	4630      	mov	r0, r6
 8008970:	47c0      	blx	r8
 8008972:	3001      	adds	r0, #1
 8008974:	d0e6      	beq.n	8008944 <_printf_common+0xb4>
 8008976:	f109 0901 	add.w	r9, r9, #1
 800897a:	e7d8      	b.n	800892e <_printf_common+0x9e>

0800897c <_printf_i>:
 800897c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008980:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008984:	460c      	mov	r4, r1
 8008986:	7e09      	ldrb	r1, [r1, #24]
 8008988:	b085      	sub	sp, #20
 800898a:	296e      	cmp	r1, #110	; 0x6e
 800898c:	4617      	mov	r7, r2
 800898e:	4606      	mov	r6, r0
 8008990:	4698      	mov	r8, r3
 8008992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008994:	f000 80b3 	beq.w	8008afe <_printf_i+0x182>
 8008998:	d822      	bhi.n	80089e0 <_printf_i+0x64>
 800899a:	2963      	cmp	r1, #99	; 0x63
 800899c:	d036      	beq.n	8008a0c <_printf_i+0x90>
 800899e:	d80a      	bhi.n	80089b6 <_printf_i+0x3a>
 80089a0:	2900      	cmp	r1, #0
 80089a2:	f000 80b9 	beq.w	8008b18 <_printf_i+0x19c>
 80089a6:	2958      	cmp	r1, #88	; 0x58
 80089a8:	f000 8083 	beq.w	8008ab2 <_printf_i+0x136>
 80089ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80089b4:	e032      	b.n	8008a1c <_printf_i+0xa0>
 80089b6:	2964      	cmp	r1, #100	; 0x64
 80089b8:	d001      	beq.n	80089be <_printf_i+0x42>
 80089ba:	2969      	cmp	r1, #105	; 0x69
 80089bc:	d1f6      	bne.n	80089ac <_printf_i+0x30>
 80089be:	6820      	ldr	r0, [r4, #0]
 80089c0:	6813      	ldr	r3, [r2, #0]
 80089c2:	0605      	lsls	r5, r0, #24
 80089c4:	f103 0104 	add.w	r1, r3, #4
 80089c8:	d52a      	bpl.n	8008a20 <_printf_i+0xa4>
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6011      	str	r1, [r2, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	da03      	bge.n	80089da <_printf_i+0x5e>
 80089d2:	222d      	movs	r2, #45	; 0x2d
 80089d4:	425b      	negs	r3, r3
 80089d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80089da:	486f      	ldr	r0, [pc, #444]	; (8008b98 <_printf_i+0x21c>)
 80089dc:	220a      	movs	r2, #10
 80089de:	e039      	b.n	8008a54 <_printf_i+0xd8>
 80089e0:	2973      	cmp	r1, #115	; 0x73
 80089e2:	f000 809d 	beq.w	8008b20 <_printf_i+0x1a4>
 80089e6:	d808      	bhi.n	80089fa <_printf_i+0x7e>
 80089e8:	296f      	cmp	r1, #111	; 0x6f
 80089ea:	d020      	beq.n	8008a2e <_printf_i+0xb2>
 80089ec:	2970      	cmp	r1, #112	; 0x70
 80089ee:	d1dd      	bne.n	80089ac <_printf_i+0x30>
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	f043 0320 	orr.w	r3, r3, #32
 80089f6:	6023      	str	r3, [r4, #0]
 80089f8:	e003      	b.n	8008a02 <_printf_i+0x86>
 80089fa:	2975      	cmp	r1, #117	; 0x75
 80089fc:	d017      	beq.n	8008a2e <_printf_i+0xb2>
 80089fe:	2978      	cmp	r1, #120	; 0x78
 8008a00:	d1d4      	bne.n	80089ac <_printf_i+0x30>
 8008a02:	2378      	movs	r3, #120	; 0x78
 8008a04:	4865      	ldr	r0, [pc, #404]	; (8008b9c <_printf_i+0x220>)
 8008a06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a0a:	e055      	b.n	8008ab8 <_printf_i+0x13c>
 8008a0c:	6813      	ldr	r3, [r2, #0]
 8008a0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a12:	1d19      	adds	r1, r3, #4
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6011      	str	r1, [r2, #0]
 8008a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e08c      	b.n	8008b3a <_printf_i+0x1be>
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a26:	6011      	str	r1, [r2, #0]
 8008a28:	bf18      	it	ne
 8008a2a:	b21b      	sxthne	r3, r3
 8008a2c:	e7cf      	b.n	80089ce <_printf_i+0x52>
 8008a2e:	6813      	ldr	r3, [r2, #0]
 8008a30:	6825      	ldr	r5, [r4, #0]
 8008a32:	1d18      	adds	r0, r3, #4
 8008a34:	6010      	str	r0, [r2, #0]
 8008a36:	0628      	lsls	r0, r5, #24
 8008a38:	d501      	bpl.n	8008a3e <_printf_i+0xc2>
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	e002      	b.n	8008a44 <_printf_i+0xc8>
 8008a3e:	0668      	lsls	r0, r5, #25
 8008a40:	d5fb      	bpl.n	8008a3a <_printf_i+0xbe>
 8008a42:	881b      	ldrh	r3, [r3, #0]
 8008a44:	296f      	cmp	r1, #111	; 0x6f
 8008a46:	bf14      	ite	ne
 8008a48:	220a      	movne	r2, #10
 8008a4a:	2208      	moveq	r2, #8
 8008a4c:	4852      	ldr	r0, [pc, #328]	; (8008b98 <_printf_i+0x21c>)
 8008a4e:	2100      	movs	r1, #0
 8008a50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a54:	6865      	ldr	r5, [r4, #4]
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	60a5      	str	r5, [r4, #8]
 8008a5a:	f2c0 8095 	blt.w	8008b88 <_printf_i+0x20c>
 8008a5e:	6821      	ldr	r1, [r4, #0]
 8008a60:	f021 0104 	bic.w	r1, r1, #4
 8008a64:	6021      	str	r1, [r4, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d13d      	bne.n	8008ae6 <_printf_i+0x16a>
 8008a6a:	2d00      	cmp	r5, #0
 8008a6c:	f040 808e 	bne.w	8008b8c <_printf_i+0x210>
 8008a70:	4665      	mov	r5, ip
 8008a72:	2a08      	cmp	r2, #8
 8008a74:	d10b      	bne.n	8008a8e <_printf_i+0x112>
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	07db      	lsls	r3, r3, #31
 8008a7a:	d508      	bpl.n	8008a8e <_printf_i+0x112>
 8008a7c:	6923      	ldr	r3, [r4, #16]
 8008a7e:	6862      	ldr	r2, [r4, #4]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	bfde      	ittt	le
 8008a84:	2330      	movle	r3, #48	; 0x30
 8008a86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a8a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008a8e:	ebac 0305 	sub.w	r3, ip, r5
 8008a92:	6123      	str	r3, [r4, #16]
 8008a94:	f8cd 8000 	str.w	r8, [sp]
 8008a98:	463b      	mov	r3, r7
 8008a9a:	aa03      	add	r2, sp, #12
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	f7ff fef6 	bl	8008890 <_printf_common>
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d14d      	bne.n	8008b44 <_printf_i+0x1c8>
 8008aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008aac:	b005      	add	sp, #20
 8008aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ab2:	4839      	ldr	r0, [pc, #228]	; (8008b98 <_printf_i+0x21c>)
 8008ab4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008ab8:	6813      	ldr	r3, [r2, #0]
 8008aba:	6821      	ldr	r1, [r4, #0]
 8008abc:	1d1d      	adds	r5, r3, #4
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6015      	str	r5, [r2, #0]
 8008ac2:	060a      	lsls	r2, r1, #24
 8008ac4:	d50b      	bpl.n	8008ade <_printf_i+0x162>
 8008ac6:	07ca      	lsls	r2, r1, #31
 8008ac8:	bf44      	itt	mi
 8008aca:	f041 0120 	orrmi.w	r1, r1, #32
 8008ace:	6021      	strmi	r1, [r4, #0]
 8008ad0:	b91b      	cbnz	r3, 8008ada <_printf_i+0x15e>
 8008ad2:	6822      	ldr	r2, [r4, #0]
 8008ad4:	f022 0220 	bic.w	r2, r2, #32
 8008ad8:	6022      	str	r2, [r4, #0]
 8008ada:	2210      	movs	r2, #16
 8008adc:	e7b7      	b.n	8008a4e <_printf_i+0xd2>
 8008ade:	064d      	lsls	r5, r1, #25
 8008ae0:	bf48      	it	mi
 8008ae2:	b29b      	uxthmi	r3, r3
 8008ae4:	e7ef      	b.n	8008ac6 <_printf_i+0x14a>
 8008ae6:	4665      	mov	r5, ip
 8008ae8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008aec:	fb02 3311 	mls	r3, r2, r1, r3
 8008af0:	5cc3      	ldrb	r3, [r0, r3]
 8008af2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008af6:	460b      	mov	r3, r1
 8008af8:	2900      	cmp	r1, #0
 8008afa:	d1f5      	bne.n	8008ae8 <_printf_i+0x16c>
 8008afc:	e7b9      	b.n	8008a72 <_printf_i+0xf6>
 8008afe:	6813      	ldr	r3, [r2, #0]
 8008b00:	6825      	ldr	r5, [r4, #0]
 8008b02:	1d18      	adds	r0, r3, #4
 8008b04:	6961      	ldr	r1, [r4, #20]
 8008b06:	6010      	str	r0, [r2, #0]
 8008b08:	0628      	lsls	r0, r5, #24
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	d501      	bpl.n	8008b12 <_printf_i+0x196>
 8008b0e:	6019      	str	r1, [r3, #0]
 8008b10:	e002      	b.n	8008b18 <_printf_i+0x19c>
 8008b12:	066a      	lsls	r2, r5, #25
 8008b14:	d5fb      	bpl.n	8008b0e <_printf_i+0x192>
 8008b16:	8019      	strh	r1, [r3, #0]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	4665      	mov	r5, ip
 8008b1c:	6123      	str	r3, [r4, #16]
 8008b1e:	e7b9      	b.n	8008a94 <_printf_i+0x118>
 8008b20:	6813      	ldr	r3, [r2, #0]
 8008b22:	1d19      	adds	r1, r3, #4
 8008b24:	6011      	str	r1, [r2, #0]
 8008b26:	681d      	ldr	r5, [r3, #0]
 8008b28:	6862      	ldr	r2, [r4, #4]
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f000 ff67 	bl	8009a00 <memchr>
 8008b32:	b108      	cbz	r0, 8008b38 <_printf_i+0x1bc>
 8008b34:	1b40      	subs	r0, r0, r5
 8008b36:	6060      	str	r0, [r4, #4]
 8008b38:	6863      	ldr	r3, [r4, #4]
 8008b3a:	6123      	str	r3, [r4, #16]
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b42:	e7a7      	b.n	8008a94 <_printf_i+0x118>
 8008b44:	6923      	ldr	r3, [r4, #16]
 8008b46:	462a      	mov	r2, r5
 8008b48:	4639      	mov	r1, r7
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	47c0      	blx	r8
 8008b4e:	3001      	adds	r0, #1
 8008b50:	d0aa      	beq.n	8008aa8 <_printf_i+0x12c>
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	079b      	lsls	r3, r3, #30
 8008b56:	d413      	bmi.n	8008b80 <_printf_i+0x204>
 8008b58:	68e0      	ldr	r0, [r4, #12]
 8008b5a:	9b03      	ldr	r3, [sp, #12]
 8008b5c:	4298      	cmp	r0, r3
 8008b5e:	bfb8      	it	lt
 8008b60:	4618      	movlt	r0, r3
 8008b62:	e7a3      	b.n	8008aac <_printf_i+0x130>
 8008b64:	2301      	movs	r3, #1
 8008b66:	464a      	mov	r2, r9
 8008b68:	4639      	mov	r1, r7
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	47c0      	blx	r8
 8008b6e:	3001      	adds	r0, #1
 8008b70:	d09a      	beq.n	8008aa8 <_printf_i+0x12c>
 8008b72:	3501      	adds	r5, #1
 8008b74:	68e3      	ldr	r3, [r4, #12]
 8008b76:	9a03      	ldr	r2, [sp, #12]
 8008b78:	1a9b      	subs	r3, r3, r2
 8008b7a:	42ab      	cmp	r3, r5
 8008b7c:	dcf2      	bgt.n	8008b64 <_printf_i+0x1e8>
 8008b7e:	e7eb      	b.n	8008b58 <_printf_i+0x1dc>
 8008b80:	2500      	movs	r5, #0
 8008b82:	f104 0919 	add.w	r9, r4, #25
 8008b86:	e7f5      	b.n	8008b74 <_printf_i+0x1f8>
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1ac      	bne.n	8008ae6 <_printf_i+0x16a>
 8008b8c:	7803      	ldrb	r3, [r0, #0]
 8008b8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b96:	e76c      	b.n	8008a72 <_printf_i+0xf6>
 8008b98:	0800c862 	.word	0x0800c862
 8008b9c:	0800c873 	.word	0x0800c873

08008ba0 <siprintf>:
 8008ba0:	b40e      	push	{r1, r2, r3}
 8008ba2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ba6:	b500      	push	{lr}
 8008ba8:	b09c      	sub	sp, #112	; 0x70
 8008baa:	ab1d      	add	r3, sp, #116	; 0x74
 8008bac:	9002      	str	r0, [sp, #8]
 8008bae:	9006      	str	r0, [sp, #24]
 8008bb0:	9107      	str	r1, [sp, #28]
 8008bb2:	9104      	str	r1, [sp, #16]
 8008bb4:	4808      	ldr	r0, [pc, #32]	; (8008bd8 <siprintf+0x38>)
 8008bb6:	4909      	ldr	r1, [pc, #36]	; (8008bdc <siprintf+0x3c>)
 8008bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bbc:	9105      	str	r1, [sp, #20]
 8008bbe:	6800      	ldr	r0, [r0, #0]
 8008bc0:	a902      	add	r1, sp, #8
 8008bc2:	9301      	str	r3, [sp, #4]
 8008bc4:	f001 fb14 	bl	800a1f0 <_svfiprintf_r>
 8008bc8:	2200      	movs	r2, #0
 8008bca:	9b02      	ldr	r3, [sp, #8]
 8008bcc:	701a      	strb	r2, [r3, #0]
 8008bce:	b01c      	add	sp, #112	; 0x70
 8008bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bd4:	b003      	add	sp, #12
 8008bd6:	4770      	bx	lr
 8008bd8:	2000003c 	.word	0x2000003c
 8008bdc:	ffff0208 	.word	0xffff0208

08008be0 <strcat>:
 8008be0:	4603      	mov	r3, r0
 8008be2:	b510      	push	{r4, lr}
 8008be4:	781a      	ldrb	r2, [r3, #0]
 8008be6:	1c5c      	adds	r4, r3, #1
 8008be8:	b93a      	cbnz	r2, 8008bfa <strcat+0x1a>
 8008bea:	3b01      	subs	r3, #1
 8008bec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bf0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bf4:	2a00      	cmp	r2, #0
 8008bf6:	d1f9      	bne.n	8008bec <strcat+0xc>
 8008bf8:	bd10      	pop	{r4, pc}
 8008bfa:	4623      	mov	r3, r4
 8008bfc:	e7f2      	b.n	8008be4 <strcat+0x4>

08008bfe <_strtol_l.isra.0>:
 8008bfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c02:	4680      	mov	r8, r0
 8008c04:	4689      	mov	r9, r1
 8008c06:	4692      	mov	sl, r2
 8008c08:	461e      	mov	r6, r3
 8008c0a:	460f      	mov	r7, r1
 8008c0c:	463d      	mov	r5, r7
 8008c0e:	9808      	ldr	r0, [sp, #32]
 8008c10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c14:	f000 fec8 	bl	80099a8 <__locale_ctype_ptr_l>
 8008c18:	4420      	add	r0, r4
 8008c1a:	7843      	ldrb	r3, [r0, #1]
 8008c1c:	f013 0308 	ands.w	r3, r3, #8
 8008c20:	d132      	bne.n	8008c88 <_strtol_l.isra.0+0x8a>
 8008c22:	2c2d      	cmp	r4, #45	; 0x2d
 8008c24:	d132      	bne.n	8008c8c <_strtol_l.isra.0+0x8e>
 8008c26:	2201      	movs	r2, #1
 8008c28:	787c      	ldrb	r4, [r7, #1]
 8008c2a:	1cbd      	adds	r5, r7, #2
 8008c2c:	2e00      	cmp	r6, #0
 8008c2e:	d05d      	beq.n	8008cec <_strtol_l.isra.0+0xee>
 8008c30:	2e10      	cmp	r6, #16
 8008c32:	d109      	bne.n	8008c48 <_strtol_l.isra.0+0x4a>
 8008c34:	2c30      	cmp	r4, #48	; 0x30
 8008c36:	d107      	bne.n	8008c48 <_strtol_l.isra.0+0x4a>
 8008c38:	782b      	ldrb	r3, [r5, #0]
 8008c3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c3e:	2b58      	cmp	r3, #88	; 0x58
 8008c40:	d14f      	bne.n	8008ce2 <_strtol_l.isra.0+0xe4>
 8008c42:	2610      	movs	r6, #16
 8008c44:	786c      	ldrb	r4, [r5, #1]
 8008c46:	3502      	adds	r5, #2
 8008c48:	2a00      	cmp	r2, #0
 8008c4a:	bf14      	ite	ne
 8008c4c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008c50:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008c54:	2700      	movs	r7, #0
 8008c56:	fbb1 fcf6 	udiv	ip, r1, r6
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008c60:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008c64:	2b09      	cmp	r3, #9
 8008c66:	d817      	bhi.n	8008c98 <_strtol_l.isra.0+0x9a>
 8008c68:	461c      	mov	r4, r3
 8008c6a:	42a6      	cmp	r6, r4
 8008c6c:	dd23      	ble.n	8008cb6 <_strtol_l.isra.0+0xb8>
 8008c6e:	1c7b      	adds	r3, r7, #1
 8008c70:	d007      	beq.n	8008c82 <_strtol_l.isra.0+0x84>
 8008c72:	4584      	cmp	ip, r0
 8008c74:	d31c      	bcc.n	8008cb0 <_strtol_l.isra.0+0xb2>
 8008c76:	d101      	bne.n	8008c7c <_strtol_l.isra.0+0x7e>
 8008c78:	45a6      	cmp	lr, r4
 8008c7a:	db19      	blt.n	8008cb0 <_strtol_l.isra.0+0xb2>
 8008c7c:	2701      	movs	r7, #1
 8008c7e:	fb00 4006 	mla	r0, r0, r6, r4
 8008c82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c86:	e7eb      	b.n	8008c60 <_strtol_l.isra.0+0x62>
 8008c88:	462f      	mov	r7, r5
 8008c8a:	e7bf      	b.n	8008c0c <_strtol_l.isra.0+0xe>
 8008c8c:	2c2b      	cmp	r4, #43	; 0x2b
 8008c8e:	bf04      	itt	eq
 8008c90:	1cbd      	addeq	r5, r7, #2
 8008c92:	787c      	ldrbeq	r4, [r7, #1]
 8008c94:	461a      	mov	r2, r3
 8008c96:	e7c9      	b.n	8008c2c <_strtol_l.isra.0+0x2e>
 8008c98:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008c9c:	2b19      	cmp	r3, #25
 8008c9e:	d801      	bhi.n	8008ca4 <_strtol_l.isra.0+0xa6>
 8008ca0:	3c37      	subs	r4, #55	; 0x37
 8008ca2:	e7e2      	b.n	8008c6a <_strtol_l.isra.0+0x6c>
 8008ca4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008ca8:	2b19      	cmp	r3, #25
 8008caa:	d804      	bhi.n	8008cb6 <_strtol_l.isra.0+0xb8>
 8008cac:	3c57      	subs	r4, #87	; 0x57
 8008cae:	e7dc      	b.n	8008c6a <_strtol_l.isra.0+0x6c>
 8008cb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008cb4:	e7e5      	b.n	8008c82 <_strtol_l.isra.0+0x84>
 8008cb6:	1c7b      	adds	r3, r7, #1
 8008cb8:	d108      	bne.n	8008ccc <_strtol_l.isra.0+0xce>
 8008cba:	2322      	movs	r3, #34	; 0x22
 8008cbc:	4608      	mov	r0, r1
 8008cbe:	f8c8 3000 	str.w	r3, [r8]
 8008cc2:	f1ba 0f00 	cmp.w	sl, #0
 8008cc6:	d107      	bne.n	8008cd8 <_strtol_l.isra.0+0xda>
 8008cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ccc:	b102      	cbz	r2, 8008cd0 <_strtol_l.isra.0+0xd2>
 8008cce:	4240      	negs	r0, r0
 8008cd0:	f1ba 0f00 	cmp.w	sl, #0
 8008cd4:	d0f8      	beq.n	8008cc8 <_strtol_l.isra.0+0xca>
 8008cd6:	b10f      	cbz	r7, 8008cdc <_strtol_l.isra.0+0xde>
 8008cd8:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8008cdc:	f8ca 9000 	str.w	r9, [sl]
 8008ce0:	e7f2      	b.n	8008cc8 <_strtol_l.isra.0+0xca>
 8008ce2:	2430      	movs	r4, #48	; 0x30
 8008ce4:	2e00      	cmp	r6, #0
 8008ce6:	d1af      	bne.n	8008c48 <_strtol_l.isra.0+0x4a>
 8008ce8:	2608      	movs	r6, #8
 8008cea:	e7ad      	b.n	8008c48 <_strtol_l.isra.0+0x4a>
 8008cec:	2c30      	cmp	r4, #48	; 0x30
 8008cee:	d0a3      	beq.n	8008c38 <_strtol_l.isra.0+0x3a>
 8008cf0:	260a      	movs	r6, #10
 8008cf2:	e7a9      	b.n	8008c48 <_strtol_l.isra.0+0x4a>

08008cf4 <strtol>:
 8008cf4:	4b08      	ldr	r3, [pc, #32]	; (8008d18 <strtol+0x24>)
 8008cf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cf8:	681c      	ldr	r4, [r3, #0]
 8008cfa:	4d08      	ldr	r5, [pc, #32]	; (8008d1c <strtol+0x28>)
 8008cfc:	6a23      	ldr	r3, [r4, #32]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	bf08      	it	eq
 8008d02:	462b      	moveq	r3, r5
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	4613      	mov	r3, r2
 8008d08:	460a      	mov	r2, r1
 8008d0a:	4601      	mov	r1, r0
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f7ff ff76 	bl	8008bfe <_strtol_l.isra.0>
 8008d12:	b003      	add	sp, #12
 8008d14:	bd30      	pop	{r4, r5, pc}
 8008d16:	bf00      	nop
 8008d18:	2000003c 	.word	0x2000003c
 8008d1c:	200000a0 	.word	0x200000a0

08008d20 <quorem>:
 8008d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d24:	6903      	ldr	r3, [r0, #16]
 8008d26:	690c      	ldr	r4, [r1, #16]
 8008d28:	4680      	mov	r8, r0
 8008d2a:	42a3      	cmp	r3, r4
 8008d2c:	f2c0 8084 	blt.w	8008e38 <quorem+0x118>
 8008d30:	3c01      	subs	r4, #1
 8008d32:	f101 0714 	add.w	r7, r1, #20
 8008d36:	f100 0614 	add.w	r6, r0, #20
 8008d3a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008d3e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008d42:	3501      	adds	r5, #1
 8008d44:	fbb0 f5f5 	udiv	r5, r0, r5
 8008d48:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008d4c:	eb06 030c 	add.w	r3, r6, ip
 8008d50:	eb07 090c 	add.w	r9, r7, ip
 8008d54:	9301      	str	r3, [sp, #4]
 8008d56:	b39d      	cbz	r5, 8008dc0 <quorem+0xa0>
 8008d58:	f04f 0a00 	mov.w	sl, #0
 8008d5c:	4638      	mov	r0, r7
 8008d5e:	46b6      	mov	lr, r6
 8008d60:	46d3      	mov	fp, sl
 8008d62:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d66:	b293      	uxth	r3, r2
 8008d68:	fb05 a303 	mla	r3, r5, r3, sl
 8008d6c:	0c12      	lsrs	r2, r2, #16
 8008d6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d72:	fb05 a202 	mla	r2, r5, r2, sl
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	ebab 0303 	sub.w	r3, fp, r3
 8008d7c:	f8de b000 	ldr.w	fp, [lr]
 8008d80:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008d84:	fa1f fb8b 	uxth.w	fp, fp
 8008d88:	445b      	add	r3, fp
 8008d8a:	fa1f fb82 	uxth.w	fp, r2
 8008d8e:	f8de 2000 	ldr.w	r2, [lr]
 8008d92:	4581      	cmp	r9, r0
 8008d94:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008d98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008da2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008da6:	f84e 3b04 	str.w	r3, [lr], #4
 8008daa:	d2da      	bcs.n	8008d62 <quorem+0x42>
 8008dac:	f856 300c 	ldr.w	r3, [r6, ip]
 8008db0:	b933      	cbnz	r3, 8008dc0 <quorem+0xa0>
 8008db2:	9b01      	ldr	r3, [sp, #4]
 8008db4:	3b04      	subs	r3, #4
 8008db6:	429e      	cmp	r6, r3
 8008db8:	461a      	mov	r2, r3
 8008dba:	d331      	bcc.n	8008e20 <quorem+0x100>
 8008dbc:	f8c8 4010 	str.w	r4, [r8, #16]
 8008dc0:	4640      	mov	r0, r8
 8008dc2:	f001 f83f 	bl	8009e44 <__mcmp>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	db26      	blt.n	8008e18 <quorem+0xf8>
 8008dca:	4630      	mov	r0, r6
 8008dcc:	f04f 0c00 	mov.w	ip, #0
 8008dd0:	3501      	adds	r5, #1
 8008dd2:	f857 1b04 	ldr.w	r1, [r7], #4
 8008dd6:	f8d0 e000 	ldr.w	lr, [r0]
 8008dda:	b28b      	uxth	r3, r1
 8008ddc:	ebac 0303 	sub.w	r3, ip, r3
 8008de0:	fa1f f28e 	uxth.w	r2, lr
 8008de4:	4413      	add	r3, r2
 8008de6:	0c0a      	lsrs	r2, r1, #16
 8008de8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008dec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008df6:	45b9      	cmp	r9, r7
 8008df8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008dfc:	f840 3b04 	str.w	r3, [r0], #4
 8008e00:	d2e7      	bcs.n	8008dd2 <quorem+0xb2>
 8008e02:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008e06:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008e0a:	b92a      	cbnz	r2, 8008e18 <quorem+0xf8>
 8008e0c:	3b04      	subs	r3, #4
 8008e0e:	429e      	cmp	r6, r3
 8008e10:	461a      	mov	r2, r3
 8008e12:	d30b      	bcc.n	8008e2c <quorem+0x10c>
 8008e14:	f8c8 4010 	str.w	r4, [r8, #16]
 8008e18:	4628      	mov	r0, r5
 8008e1a:	b003      	add	sp, #12
 8008e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e20:	6812      	ldr	r2, [r2, #0]
 8008e22:	3b04      	subs	r3, #4
 8008e24:	2a00      	cmp	r2, #0
 8008e26:	d1c9      	bne.n	8008dbc <quorem+0x9c>
 8008e28:	3c01      	subs	r4, #1
 8008e2a:	e7c4      	b.n	8008db6 <quorem+0x96>
 8008e2c:	6812      	ldr	r2, [r2, #0]
 8008e2e:	3b04      	subs	r3, #4
 8008e30:	2a00      	cmp	r2, #0
 8008e32:	d1ef      	bne.n	8008e14 <quorem+0xf4>
 8008e34:	3c01      	subs	r4, #1
 8008e36:	e7ea      	b.n	8008e0e <quorem+0xee>
 8008e38:	2000      	movs	r0, #0
 8008e3a:	e7ee      	b.n	8008e1a <quorem+0xfa>
 8008e3c:	0000      	movs	r0, r0
	...

08008e40 <_dtoa_r>:
 8008e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e44:	4616      	mov	r6, r2
 8008e46:	461f      	mov	r7, r3
 8008e48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e4a:	b095      	sub	sp, #84	; 0x54
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8008e52:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008e56:	b93d      	cbnz	r5, 8008e68 <_dtoa_r+0x28>
 8008e58:	2010      	movs	r0, #16
 8008e5a:	f000 fdb7 	bl	80099cc <malloc>
 8008e5e:	6260      	str	r0, [r4, #36]	; 0x24
 8008e60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e64:	6005      	str	r5, [r0, #0]
 8008e66:	60c5      	str	r5, [r0, #12]
 8008e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e6a:	6819      	ldr	r1, [r3, #0]
 8008e6c:	b151      	cbz	r1, 8008e84 <_dtoa_r+0x44>
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	2301      	movs	r3, #1
 8008e72:	4093      	lsls	r3, r2
 8008e74:	604a      	str	r2, [r1, #4]
 8008e76:	608b      	str	r3, [r1, #8]
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f000 fe03 	bl	8009a84 <_Bfree>
 8008e7e:	2200      	movs	r2, #0
 8008e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	1e3b      	subs	r3, r7, #0
 8008e86:	bfaf      	iteee	ge
 8008e88:	2300      	movge	r3, #0
 8008e8a:	2201      	movlt	r2, #1
 8008e8c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e90:	9303      	strlt	r3, [sp, #12]
 8008e92:	bfac      	ite	ge
 8008e94:	f8c8 3000 	strge.w	r3, [r8]
 8008e98:	f8c8 2000 	strlt.w	r2, [r8]
 8008e9c:	4bae      	ldr	r3, [pc, #696]	; (8009158 <_dtoa_r+0x318>)
 8008e9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008ea2:	ea33 0308 	bics.w	r3, r3, r8
 8008ea6:	d11b      	bne.n	8008ee0 <_dtoa_r+0xa0>
 8008ea8:	f242 730f 	movw	r3, #9999	; 0x270f
 8008eac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	9b02      	ldr	r3, [sp, #8]
 8008eb2:	b923      	cbnz	r3, 8008ebe <_dtoa_r+0x7e>
 8008eb4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	f000 8545 	beq.w	8009948 <_dtoa_r+0xb08>
 8008ebe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ec0:	b953      	cbnz	r3, 8008ed8 <_dtoa_r+0x98>
 8008ec2:	4ba6      	ldr	r3, [pc, #664]	; (800915c <_dtoa_r+0x31c>)
 8008ec4:	e021      	b.n	8008f0a <_dtoa_r+0xca>
 8008ec6:	4ba6      	ldr	r3, [pc, #664]	; (8009160 <_dtoa_r+0x320>)
 8008ec8:	9306      	str	r3, [sp, #24]
 8008eca:	3308      	adds	r3, #8
 8008ecc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	9806      	ldr	r0, [sp, #24]
 8008ed2:	b015      	add	sp, #84	; 0x54
 8008ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed8:	4ba0      	ldr	r3, [pc, #640]	; (800915c <_dtoa_r+0x31c>)
 8008eda:	9306      	str	r3, [sp, #24]
 8008edc:	3303      	adds	r3, #3
 8008ede:	e7f5      	b.n	8008ecc <_dtoa_r+0x8c>
 8008ee0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	4630      	mov	r0, r6
 8008eea:	4639      	mov	r1, r7
 8008eec:	f7f7 fd5c 	bl	80009a8 <__aeabi_dcmpeq>
 8008ef0:	4682      	mov	sl, r0
 8008ef2:	b160      	cbz	r0, 8008f0e <_dtoa_r+0xce>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ef8:	6013      	str	r3, [r2, #0]
 8008efa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 8520 	beq.w	8009942 <_dtoa_r+0xb02>
 8008f02:	4b98      	ldr	r3, [pc, #608]	; (8009164 <_dtoa_r+0x324>)
 8008f04:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	9306      	str	r3, [sp, #24]
 8008f0c:	e7e0      	b.n	8008ed0 <_dtoa_r+0x90>
 8008f0e:	ab12      	add	r3, sp, #72	; 0x48
 8008f10:	9301      	str	r3, [sp, #4]
 8008f12:	ab13      	add	r3, sp, #76	; 0x4c
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	4632      	mov	r2, r6
 8008f18:	463b      	mov	r3, r7
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f001 f80a 	bl	8009f34 <__d2b>
 8008f20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008f24:	4683      	mov	fp, r0
 8008f26:	2d00      	cmp	r5, #0
 8008f28:	d07d      	beq.n	8009026 <_dtoa_r+0x1e6>
 8008f2a:	46b0      	mov	r8, r6
 8008f2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f30:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8008f34:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008f38:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f3c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008f40:	2200      	movs	r2, #0
 8008f42:	4b89      	ldr	r3, [pc, #548]	; (8009168 <_dtoa_r+0x328>)
 8008f44:	4640      	mov	r0, r8
 8008f46:	4649      	mov	r1, r9
 8008f48:	f7f7 f90e 	bl	8000168 <__aeabi_dsub>
 8008f4c:	a37c      	add	r3, pc, #496	; (adr r3, 8009140 <_dtoa_r+0x300>)
 8008f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f52:	f7f7 fac1 	bl	80004d8 <__aeabi_dmul>
 8008f56:	a37c      	add	r3, pc, #496	; (adr r3, 8009148 <_dtoa_r+0x308>)
 8008f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5c:	f7f7 f906 	bl	800016c <__adddf3>
 8008f60:	4606      	mov	r6, r0
 8008f62:	4628      	mov	r0, r5
 8008f64:	460f      	mov	r7, r1
 8008f66:	f7f7 fa4d 	bl	8000404 <__aeabi_i2d>
 8008f6a:	a379      	add	r3, pc, #484	; (adr r3, 8009150 <_dtoa_r+0x310>)
 8008f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f70:	f7f7 fab2 	bl	80004d8 <__aeabi_dmul>
 8008f74:	4602      	mov	r2, r0
 8008f76:	460b      	mov	r3, r1
 8008f78:	4630      	mov	r0, r6
 8008f7a:	4639      	mov	r1, r7
 8008f7c:	f7f7 f8f6 	bl	800016c <__adddf3>
 8008f80:	4606      	mov	r6, r0
 8008f82:	460f      	mov	r7, r1
 8008f84:	f7f7 fd58 	bl	8000a38 <__aeabi_d2iz>
 8008f88:	2200      	movs	r2, #0
 8008f8a:	4682      	mov	sl, r0
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	4630      	mov	r0, r6
 8008f90:	4639      	mov	r1, r7
 8008f92:	f7f7 fd13 	bl	80009bc <__aeabi_dcmplt>
 8008f96:	b148      	cbz	r0, 8008fac <_dtoa_r+0x16c>
 8008f98:	4650      	mov	r0, sl
 8008f9a:	f7f7 fa33 	bl	8000404 <__aeabi_i2d>
 8008f9e:	4632      	mov	r2, r6
 8008fa0:	463b      	mov	r3, r7
 8008fa2:	f7f7 fd01 	bl	80009a8 <__aeabi_dcmpeq>
 8008fa6:	b908      	cbnz	r0, 8008fac <_dtoa_r+0x16c>
 8008fa8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008fac:	f1ba 0f16 	cmp.w	sl, #22
 8008fb0:	d85a      	bhi.n	8009068 <_dtoa_r+0x228>
 8008fb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fb6:	496d      	ldr	r1, [pc, #436]	; (800916c <_dtoa_r+0x32c>)
 8008fb8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fc0:	f7f7 fd1a 	bl	80009f8 <__aeabi_dcmpgt>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d051      	beq.n	800906c <_dtoa_r+0x22c>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008fce:	930d      	str	r3, [sp, #52]	; 0x34
 8008fd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fd2:	1b5d      	subs	r5, r3, r5
 8008fd4:	1e6b      	subs	r3, r5, #1
 8008fd6:	9307      	str	r3, [sp, #28]
 8008fd8:	bf43      	ittte	mi
 8008fda:	2300      	movmi	r3, #0
 8008fdc:	f1c5 0901 	rsbmi	r9, r5, #1
 8008fe0:	9307      	strmi	r3, [sp, #28]
 8008fe2:	f04f 0900 	movpl.w	r9, #0
 8008fe6:	f1ba 0f00 	cmp.w	sl, #0
 8008fea:	db41      	blt.n	8009070 <_dtoa_r+0x230>
 8008fec:	9b07      	ldr	r3, [sp, #28]
 8008fee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008ff2:	4453      	add	r3, sl
 8008ff4:	9307      	str	r3, [sp, #28]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	9308      	str	r3, [sp, #32]
 8008ffa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008ffc:	2b09      	cmp	r3, #9
 8008ffe:	f200 808f 	bhi.w	8009120 <_dtoa_r+0x2e0>
 8009002:	2b05      	cmp	r3, #5
 8009004:	bfc4      	itt	gt
 8009006:	3b04      	subgt	r3, #4
 8009008:	931e      	strgt	r3, [sp, #120]	; 0x78
 800900a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800900c:	bfc8      	it	gt
 800900e:	2500      	movgt	r5, #0
 8009010:	f1a3 0302 	sub.w	r3, r3, #2
 8009014:	bfd8      	it	le
 8009016:	2501      	movle	r5, #1
 8009018:	2b03      	cmp	r3, #3
 800901a:	f200 808d 	bhi.w	8009138 <_dtoa_r+0x2f8>
 800901e:	e8df f003 	tbb	[pc, r3]
 8009022:	7d7b      	.short	0x7d7b
 8009024:	6f2f      	.short	0x6f2f
 8009026:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800902a:	441d      	add	r5, r3
 800902c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009030:	2820      	cmp	r0, #32
 8009032:	dd13      	ble.n	800905c <_dtoa_r+0x21c>
 8009034:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009038:	9b02      	ldr	r3, [sp, #8]
 800903a:	fa08 f800 	lsl.w	r8, r8, r0
 800903e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009042:	fa23 f000 	lsr.w	r0, r3, r0
 8009046:	ea48 0000 	orr.w	r0, r8, r0
 800904a:	f7f7 f9cb 	bl	80003e4 <__aeabi_ui2d>
 800904e:	2301      	movs	r3, #1
 8009050:	4680      	mov	r8, r0
 8009052:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8009056:	3d01      	subs	r5, #1
 8009058:	9310      	str	r3, [sp, #64]	; 0x40
 800905a:	e771      	b.n	8008f40 <_dtoa_r+0x100>
 800905c:	9b02      	ldr	r3, [sp, #8]
 800905e:	f1c0 0020 	rsb	r0, r0, #32
 8009062:	fa03 f000 	lsl.w	r0, r3, r0
 8009066:	e7f0      	b.n	800904a <_dtoa_r+0x20a>
 8009068:	2301      	movs	r3, #1
 800906a:	e7b0      	b.n	8008fce <_dtoa_r+0x18e>
 800906c:	900d      	str	r0, [sp, #52]	; 0x34
 800906e:	e7af      	b.n	8008fd0 <_dtoa_r+0x190>
 8009070:	f1ca 0300 	rsb	r3, sl, #0
 8009074:	9308      	str	r3, [sp, #32]
 8009076:	2300      	movs	r3, #0
 8009078:	eba9 090a 	sub.w	r9, r9, sl
 800907c:	930c      	str	r3, [sp, #48]	; 0x30
 800907e:	e7bc      	b.n	8008ffa <_dtoa_r+0x1ba>
 8009080:	2301      	movs	r3, #1
 8009082:	9309      	str	r3, [sp, #36]	; 0x24
 8009084:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009086:	2b00      	cmp	r3, #0
 8009088:	dd74      	ble.n	8009174 <_dtoa_r+0x334>
 800908a:	4698      	mov	r8, r3
 800908c:	9304      	str	r3, [sp, #16]
 800908e:	2200      	movs	r2, #0
 8009090:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009092:	6072      	str	r2, [r6, #4]
 8009094:	2204      	movs	r2, #4
 8009096:	f102 0014 	add.w	r0, r2, #20
 800909a:	4298      	cmp	r0, r3
 800909c:	6871      	ldr	r1, [r6, #4]
 800909e:	d96e      	bls.n	800917e <_dtoa_r+0x33e>
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 fcbb 	bl	8009a1c <_Balloc>
 80090a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090a8:	6030      	str	r0, [r6, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f1b8 0f0e 	cmp.w	r8, #14
 80090b0:	9306      	str	r3, [sp, #24]
 80090b2:	f200 80ed 	bhi.w	8009290 <_dtoa_r+0x450>
 80090b6:	2d00      	cmp	r5, #0
 80090b8:	f000 80ea 	beq.w	8009290 <_dtoa_r+0x450>
 80090bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090c0:	f1ba 0f00 	cmp.w	sl, #0
 80090c4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80090c8:	dd77      	ble.n	80091ba <_dtoa_r+0x37a>
 80090ca:	4a28      	ldr	r2, [pc, #160]	; (800916c <_dtoa_r+0x32c>)
 80090cc:	f00a 030f 	and.w	r3, sl, #15
 80090d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80090d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80090d8:	06f0      	lsls	r0, r6, #27
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80090e2:	d568      	bpl.n	80091b6 <_dtoa_r+0x376>
 80090e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80090e8:	4b21      	ldr	r3, [pc, #132]	; (8009170 <_dtoa_r+0x330>)
 80090ea:	2503      	movs	r5, #3
 80090ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80090f0:	f7f7 fb1c 	bl	800072c <__aeabi_ddiv>
 80090f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090f8:	f006 060f 	and.w	r6, r6, #15
 80090fc:	4f1c      	ldr	r7, [pc, #112]	; (8009170 <_dtoa_r+0x330>)
 80090fe:	e04f      	b.n	80091a0 <_dtoa_r+0x360>
 8009100:	2301      	movs	r3, #1
 8009102:	9309      	str	r3, [sp, #36]	; 0x24
 8009104:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009106:	4453      	add	r3, sl
 8009108:	f103 0801 	add.w	r8, r3, #1
 800910c:	9304      	str	r3, [sp, #16]
 800910e:	4643      	mov	r3, r8
 8009110:	2b01      	cmp	r3, #1
 8009112:	bfb8      	it	lt
 8009114:	2301      	movlt	r3, #1
 8009116:	e7ba      	b.n	800908e <_dtoa_r+0x24e>
 8009118:	2300      	movs	r3, #0
 800911a:	e7b2      	b.n	8009082 <_dtoa_r+0x242>
 800911c:	2300      	movs	r3, #0
 800911e:	e7f0      	b.n	8009102 <_dtoa_r+0x2c2>
 8009120:	2501      	movs	r5, #1
 8009122:	2300      	movs	r3, #0
 8009124:	9509      	str	r5, [sp, #36]	; 0x24
 8009126:	931e      	str	r3, [sp, #120]	; 0x78
 8009128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800912c:	2200      	movs	r2, #0
 800912e:	9304      	str	r3, [sp, #16]
 8009130:	4698      	mov	r8, r3
 8009132:	2312      	movs	r3, #18
 8009134:	921f      	str	r2, [sp, #124]	; 0x7c
 8009136:	e7aa      	b.n	800908e <_dtoa_r+0x24e>
 8009138:	2301      	movs	r3, #1
 800913a:	9309      	str	r3, [sp, #36]	; 0x24
 800913c:	e7f4      	b.n	8009128 <_dtoa_r+0x2e8>
 800913e:	bf00      	nop
 8009140:	636f4361 	.word	0x636f4361
 8009144:	3fd287a7 	.word	0x3fd287a7
 8009148:	8b60c8b3 	.word	0x8b60c8b3
 800914c:	3fc68a28 	.word	0x3fc68a28
 8009150:	509f79fb 	.word	0x509f79fb
 8009154:	3fd34413 	.word	0x3fd34413
 8009158:	7ff00000 	.word	0x7ff00000
 800915c:	0800c88d 	.word	0x0800c88d
 8009160:	0800c884 	.word	0x0800c884
 8009164:	0800c861 	.word	0x0800c861
 8009168:	3ff80000 	.word	0x3ff80000
 800916c:	0800c8c8 	.word	0x0800c8c8
 8009170:	0800c8a0 	.word	0x0800c8a0
 8009174:	2301      	movs	r3, #1
 8009176:	9304      	str	r3, [sp, #16]
 8009178:	4698      	mov	r8, r3
 800917a:	461a      	mov	r2, r3
 800917c:	e7da      	b.n	8009134 <_dtoa_r+0x2f4>
 800917e:	3101      	adds	r1, #1
 8009180:	6071      	str	r1, [r6, #4]
 8009182:	0052      	lsls	r2, r2, #1
 8009184:	e787      	b.n	8009096 <_dtoa_r+0x256>
 8009186:	07f1      	lsls	r1, r6, #31
 8009188:	d508      	bpl.n	800919c <_dtoa_r+0x35c>
 800918a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800918e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009192:	f7f7 f9a1 	bl	80004d8 <__aeabi_dmul>
 8009196:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800919a:	3501      	adds	r5, #1
 800919c:	1076      	asrs	r6, r6, #1
 800919e:	3708      	adds	r7, #8
 80091a0:	2e00      	cmp	r6, #0
 80091a2:	d1f0      	bne.n	8009186 <_dtoa_r+0x346>
 80091a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80091a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091ac:	f7f7 fabe 	bl	800072c <__aeabi_ddiv>
 80091b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091b4:	e01b      	b.n	80091ee <_dtoa_r+0x3ae>
 80091b6:	2502      	movs	r5, #2
 80091b8:	e7a0      	b.n	80090fc <_dtoa_r+0x2bc>
 80091ba:	f000 80a4 	beq.w	8009306 <_dtoa_r+0x4c6>
 80091be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80091c2:	f1ca 0600 	rsb	r6, sl, #0
 80091c6:	4ba0      	ldr	r3, [pc, #640]	; (8009448 <_dtoa_r+0x608>)
 80091c8:	f006 020f 	and.w	r2, r6, #15
 80091cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	f7f7 f980 	bl	80004d8 <__aeabi_dmul>
 80091d8:	2502      	movs	r5, #2
 80091da:	2300      	movs	r3, #0
 80091dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091e0:	4f9a      	ldr	r7, [pc, #616]	; (800944c <_dtoa_r+0x60c>)
 80091e2:	1136      	asrs	r6, r6, #4
 80091e4:	2e00      	cmp	r6, #0
 80091e6:	f040 8083 	bne.w	80092f0 <_dtoa_r+0x4b0>
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e0      	bne.n	80091b0 <_dtoa_r+0x370>
 80091ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 808a 	beq.w	800930a <_dtoa_r+0x4ca>
 80091f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80091fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009202:	2200      	movs	r2, #0
 8009204:	4b92      	ldr	r3, [pc, #584]	; (8009450 <_dtoa_r+0x610>)
 8009206:	f7f7 fbd9 	bl	80009bc <__aeabi_dcmplt>
 800920a:	2800      	cmp	r0, #0
 800920c:	d07d      	beq.n	800930a <_dtoa_r+0x4ca>
 800920e:	f1b8 0f00 	cmp.w	r8, #0
 8009212:	d07a      	beq.n	800930a <_dtoa_r+0x4ca>
 8009214:	9b04      	ldr	r3, [sp, #16]
 8009216:	2b00      	cmp	r3, #0
 8009218:	dd36      	ble.n	8009288 <_dtoa_r+0x448>
 800921a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800921e:	2200      	movs	r2, #0
 8009220:	4b8c      	ldr	r3, [pc, #560]	; (8009454 <_dtoa_r+0x614>)
 8009222:	f7f7 f959 	bl	80004d8 <__aeabi_dmul>
 8009226:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800922a:	9e04      	ldr	r6, [sp, #16]
 800922c:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8009230:	3501      	adds	r5, #1
 8009232:	4628      	mov	r0, r5
 8009234:	f7f7 f8e6 	bl	8000404 <__aeabi_i2d>
 8009238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800923c:	f7f7 f94c 	bl	80004d8 <__aeabi_dmul>
 8009240:	2200      	movs	r2, #0
 8009242:	4b85      	ldr	r3, [pc, #532]	; (8009458 <_dtoa_r+0x618>)
 8009244:	f7f6 ff92 	bl	800016c <__adddf3>
 8009248:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800924c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009250:	950b      	str	r5, [sp, #44]	; 0x2c
 8009252:	2e00      	cmp	r6, #0
 8009254:	d15c      	bne.n	8009310 <_dtoa_r+0x4d0>
 8009256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800925a:	2200      	movs	r2, #0
 800925c:	4b7f      	ldr	r3, [pc, #508]	; (800945c <_dtoa_r+0x61c>)
 800925e:	f7f6 ff83 	bl	8000168 <__aeabi_dsub>
 8009262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009264:	462b      	mov	r3, r5
 8009266:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800926a:	f7f7 fbc5 	bl	80009f8 <__aeabi_dcmpgt>
 800926e:	2800      	cmp	r0, #0
 8009270:	f040 8281 	bne.w	8009776 <_dtoa_r+0x936>
 8009274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800927a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800927e:	f7f7 fb9d 	bl	80009bc <__aeabi_dcmplt>
 8009282:	2800      	cmp	r0, #0
 8009284:	f040 8275 	bne.w	8009772 <_dtoa_r+0x932>
 8009288:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800928c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009290:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009292:	2b00      	cmp	r3, #0
 8009294:	f2c0 814b 	blt.w	800952e <_dtoa_r+0x6ee>
 8009298:	f1ba 0f0e 	cmp.w	sl, #14
 800929c:	f300 8147 	bgt.w	800952e <_dtoa_r+0x6ee>
 80092a0:	4b69      	ldr	r3, [pc, #420]	; (8009448 <_dtoa_r+0x608>)
 80092a2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80092ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f280 80d7 	bge.w	8009464 <_dtoa_r+0x624>
 80092b6:	f1b8 0f00 	cmp.w	r8, #0
 80092ba:	f300 80d3 	bgt.w	8009464 <_dtoa_r+0x624>
 80092be:	f040 8257 	bne.w	8009770 <_dtoa_r+0x930>
 80092c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092c6:	2200      	movs	r2, #0
 80092c8:	4b64      	ldr	r3, [pc, #400]	; (800945c <_dtoa_r+0x61c>)
 80092ca:	f7f7 f905 	bl	80004d8 <__aeabi_dmul>
 80092ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092d2:	f7f7 fb87 	bl	80009e4 <__aeabi_dcmpge>
 80092d6:	4646      	mov	r6, r8
 80092d8:	4647      	mov	r7, r8
 80092da:	2800      	cmp	r0, #0
 80092dc:	f040 822d 	bne.w	800973a <_dtoa_r+0x8fa>
 80092e0:	9b06      	ldr	r3, [sp, #24]
 80092e2:	9a06      	ldr	r2, [sp, #24]
 80092e4:	1c5d      	adds	r5, r3, #1
 80092e6:	2331      	movs	r3, #49	; 0x31
 80092e8:	f10a 0a01 	add.w	sl, sl, #1
 80092ec:	7013      	strb	r3, [r2, #0]
 80092ee:	e228      	b.n	8009742 <_dtoa_r+0x902>
 80092f0:	07f2      	lsls	r2, r6, #31
 80092f2:	d505      	bpl.n	8009300 <_dtoa_r+0x4c0>
 80092f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092f8:	f7f7 f8ee 	bl	80004d8 <__aeabi_dmul>
 80092fc:	2301      	movs	r3, #1
 80092fe:	3501      	adds	r5, #1
 8009300:	1076      	asrs	r6, r6, #1
 8009302:	3708      	adds	r7, #8
 8009304:	e76e      	b.n	80091e4 <_dtoa_r+0x3a4>
 8009306:	2502      	movs	r5, #2
 8009308:	e771      	b.n	80091ee <_dtoa_r+0x3ae>
 800930a:	4657      	mov	r7, sl
 800930c:	4646      	mov	r6, r8
 800930e:	e790      	b.n	8009232 <_dtoa_r+0x3f2>
 8009310:	4b4d      	ldr	r3, [pc, #308]	; (8009448 <_dtoa_r+0x608>)
 8009312:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009316:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800931a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800931c:	2b00      	cmp	r3, #0
 800931e:	d048      	beq.n	80093b2 <_dtoa_r+0x572>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	2000      	movs	r0, #0
 8009326:	494e      	ldr	r1, [pc, #312]	; (8009460 <_dtoa_r+0x620>)
 8009328:	f7f7 fa00 	bl	800072c <__aeabi_ddiv>
 800932c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009330:	f7f6 ff1a 	bl	8000168 <__aeabi_dsub>
 8009334:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009338:	9d06      	ldr	r5, [sp, #24]
 800933a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800933e:	f7f7 fb7b 	bl	8000a38 <__aeabi_d2iz>
 8009342:	9011      	str	r0, [sp, #68]	; 0x44
 8009344:	f7f7 f85e 	bl	8000404 <__aeabi_i2d>
 8009348:	4602      	mov	r2, r0
 800934a:	460b      	mov	r3, r1
 800934c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009350:	f7f6 ff0a 	bl	8000168 <__aeabi_dsub>
 8009354:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800935a:	3330      	adds	r3, #48	; 0x30
 800935c:	f805 3b01 	strb.w	r3, [r5], #1
 8009360:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009364:	f7f7 fb2a 	bl	80009bc <__aeabi_dcmplt>
 8009368:	2800      	cmp	r0, #0
 800936a:	d163      	bne.n	8009434 <_dtoa_r+0x5f4>
 800936c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009370:	2000      	movs	r0, #0
 8009372:	4937      	ldr	r1, [pc, #220]	; (8009450 <_dtoa_r+0x610>)
 8009374:	f7f6 fef8 	bl	8000168 <__aeabi_dsub>
 8009378:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800937c:	f7f7 fb1e 	bl	80009bc <__aeabi_dcmplt>
 8009380:	2800      	cmp	r0, #0
 8009382:	f040 80b5 	bne.w	80094f0 <_dtoa_r+0x6b0>
 8009386:	9b06      	ldr	r3, [sp, #24]
 8009388:	1aeb      	subs	r3, r5, r3
 800938a:	429e      	cmp	r6, r3
 800938c:	f77f af7c 	ble.w	8009288 <_dtoa_r+0x448>
 8009390:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009394:	2200      	movs	r2, #0
 8009396:	4b2f      	ldr	r3, [pc, #188]	; (8009454 <_dtoa_r+0x614>)
 8009398:	f7f7 f89e 	bl	80004d8 <__aeabi_dmul>
 800939c:	2200      	movs	r2, #0
 800939e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80093a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093a6:	4b2b      	ldr	r3, [pc, #172]	; (8009454 <_dtoa_r+0x614>)
 80093a8:	f7f7 f896 	bl	80004d8 <__aeabi_dmul>
 80093ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093b0:	e7c3      	b.n	800933a <_dtoa_r+0x4fa>
 80093b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80093b6:	f7f7 f88f 	bl	80004d8 <__aeabi_dmul>
 80093ba:	9b06      	ldr	r3, [sp, #24]
 80093bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80093c0:	199d      	adds	r5, r3, r6
 80093c2:	461e      	mov	r6, r3
 80093c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093c8:	f7f7 fb36 	bl	8000a38 <__aeabi_d2iz>
 80093cc:	9011      	str	r0, [sp, #68]	; 0x44
 80093ce:	f7f7 f819 	bl	8000404 <__aeabi_i2d>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093da:	f7f6 fec5 	bl	8000168 <__aeabi_dsub>
 80093de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093e4:	3330      	adds	r3, #48	; 0x30
 80093e6:	f806 3b01 	strb.w	r3, [r6], #1
 80093ea:	42ae      	cmp	r6, r5
 80093ec:	f04f 0200 	mov.w	r2, #0
 80093f0:	d124      	bne.n	800943c <_dtoa_r+0x5fc>
 80093f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093f6:	4b1a      	ldr	r3, [pc, #104]	; (8009460 <_dtoa_r+0x620>)
 80093f8:	f7f6 feb8 	bl	800016c <__adddf3>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009404:	f7f7 faf8 	bl	80009f8 <__aeabi_dcmpgt>
 8009408:	2800      	cmp	r0, #0
 800940a:	d171      	bne.n	80094f0 <_dtoa_r+0x6b0>
 800940c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009410:	2000      	movs	r0, #0
 8009412:	4913      	ldr	r1, [pc, #76]	; (8009460 <_dtoa_r+0x620>)
 8009414:	f7f6 fea8 	bl	8000168 <__aeabi_dsub>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009420:	f7f7 facc 	bl	80009bc <__aeabi_dcmplt>
 8009424:	2800      	cmp	r0, #0
 8009426:	f43f af2f 	beq.w	8009288 <_dtoa_r+0x448>
 800942a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800942e:	1e6a      	subs	r2, r5, #1
 8009430:	2b30      	cmp	r3, #48	; 0x30
 8009432:	d001      	beq.n	8009438 <_dtoa_r+0x5f8>
 8009434:	46ba      	mov	sl, r7
 8009436:	e04a      	b.n	80094ce <_dtoa_r+0x68e>
 8009438:	4615      	mov	r5, r2
 800943a:	e7f6      	b.n	800942a <_dtoa_r+0x5ea>
 800943c:	4b05      	ldr	r3, [pc, #20]	; (8009454 <_dtoa_r+0x614>)
 800943e:	f7f7 f84b 	bl	80004d8 <__aeabi_dmul>
 8009442:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009446:	e7bd      	b.n	80093c4 <_dtoa_r+0x584>
 8009448:	0800c8c8 	.word	0x0800c8c8
 800944c:	0800c8a0 	.word	0x0800c8a0
 8009450:	3ff00000 	.word	0x3ff00000
 8009454:	40240000 	.word	0x40240000
 8009458:	401c0000 	.word	0x401c0000
 800945c:	40140000 	.word	0x40140000
 8009460:	3fe00000 	.word	0x3fe00000
 8009464:	9d06      	ldr	r5, [sp, #24]
 8009466:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800946a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800946e:	4630      	mov	r0, r6
 8009470:	4639      	mov	r1, r7
 8009472:	f7f7 f95b 	bl	800072c <__aeabi_ddiv>
 8009476:	f7f7 fadf 	bl	8000a38 <__aeabi_d2iz>
 800947a:	4681      	mov	r9, r0
 800947c:	f7f6 ffc2 	bl	8000404 <__aeabi_i2d>
 8009480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009484:	f7f7 f828 	bl	80004d8 <__aeabi_dmul>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	4630      	mov	r0, r6
 800948e:	4639      	mov	r1, r7
 8009490:	f7f6 fe6a 	bl	8000168 <__aeabi_dsub>
 8009494:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009498:	f805 6b01 	strb.w	r6, [r5], #1
 800949c:	9e06      	ldr	r6, [sp, #24]
 800949e:	4602      	mov	r2, r0
 80094a0:	1bae      	subs	r6, r5, r6
 80094a2:	45b0      	cmp	r8, r6
 80094a4:	460b      	mov	r3, r1
 80094a6:	d135      	bne.n	8009514 <_dtoa_r+0x6d4>
 80094a8:	f7f6 fe60 	bl	800016c <__adddf3>
 80094ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094b0:	4606      	mov	r6, r0
 80094b2:	460f      	mov	r7, r1
 80094b4:	f7f7 faa0 	bl	80009f8 <__aeabi_dcmpgt>
 80094b8:	b9c8      	cbnz	r0, 80094ee <_dtoa_r+0x6ae>
 80094ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094be:	4630      	mov	r0, r6
 80094c0:	4639      	mov	r1, r7
 80094c2:	f7f7 fa71 	bl	80009a8 <__aeabi_dcmpeq>
 80094c6:	b110      	cbz	r0, 80094ce <_dtoa_r+0x68e>
 80094c8:	f019 0f01 	tst.w	r9, #1
 80094cc:	d10f      	bne.n	80094ee <_dtoa_r+0x6ae>
 80094ce:	4659      	mov	r1, fp
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 fad7 	bl	8009a84 <_Bfree>
 80094d6:	2300      	movs	r3, #0
 80094d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80094da:	702b      	strb	r3, [r5, #0]
 80094dc:	f10a 0301 	add.w	r3, sl, #1
 80094e0:	6013      	str	r3, [r2, #0]
 80094e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f43f acf3 	beq.w	8008ed0 <_dtoa_r+0x90>
 80094ea:	601d      	str	r5, [r3, #0]
 80094ec:	e4f0      	b.n	8008ed0 <_dtoa_r+0x90>
 80094ee:	4657      	mov	r7, sl
 80094f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80094f4:	1e6b      	subs	r3, r5, #1
 80094f6:	2a39      	cmp	r2, #57	; 0x39
 80094f8:	d106      	bne.n	8009508 <_dtoa_r+0x6c8>
 80094fa:	9a06      	ldr	r2, [sp, #24]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d107      	bne.n	8009510 <_dtoa_r+0x6d0>
 8009500:	2330      	movs	r3, #48	; 0x30
 8009502:	7013      	strb	r3, [r2, #0]
 8009504:	4613      	mov	r3, r2
 8009506:	3701      	adds	r7, #1
 8009508:	781a      	ldrb	r2, [r3, #0]
 800950a:	3201      	adds	r2, #1
 800950c:	701a      	strb	r2, [r3, #0]
 800950e:	e791      	b.n	8009434 <_dtoa_r+0x5f4>
 8009510:	461d      	mov	r5, r3
 8009512:	e7ed      	b.n	80094f0 <_dtoa_r+0x6b0>
 8009514:	2200      	movs	r2, #0
 8009516:	4b99      	ldr	r3, [pc, #612]	; (800977c <_dtoa_r+0x93c>)
 8009518:	f7f6 ffde 	bl	80004d8 <__aeabi_dmul>
 800951c:	2200      	movs	r2, #0
 800951e:	2300      	movs	r3, #0
 8009520:	4606      	mov	r6, r0
 8009522:	460f      	mov	r7, r1
 8009524:	f7f7 fa40 	bl	80009a8 <__aeabi_dcmpeq>
 8009528:	2800      	cmp	r0, #0
 800952a:	d09e      	beq.n	800946a <_dtoa_r+0x62a>
 800952c:	e7cf      	b.n	80094ce <_dtoa_r+0x68e>
 800952e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009530:	2a00      	cmp	r2, #0
 8009532:	f000 8088 	beq.w	8009646 <_dtoa_r+0x806>
 8009536:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009538:	2a01      	cmp	r2, #1
 800953a:	dc6d      	bgt.n	8009618 <_dtoa_r+0x7d8>
 800953c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800953e:	2a00      	cmp	r2, #0
 8009540:	d066      	beq.n	8009610 <_dtoa_r+0x7d0>
 8009542:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009546:	464d      	mov	r5, r9
 8009548:	9e08      	ldr	r6, [sp, #32]
 800954a:	9a07      	ldr	r2, [sp, #28]
 800954c:	2101      	movs	r1, #1
 800954e:	441a      	add	r2, r3
 8009550:	4620      	mov	r0, r4
 8009552:	4499      	add	r9, r3
 8009554:	9207      	str	r2, [sp, #28]
 8009556:	f000 fb35 	bl	8009bc4 <__i2b>
 800955a:	4607      	mov	r7, r0
 800955c:	2d00      	cmp	r5, #0
 800955e:	dd0b      	ble.n	8009578 <_dtoa_r+0x738>
 8009560:	9b07      	ldr	r3, [sp, #28]
 8009562:	2b00      	cmp	r3, #0
 8009564:	dd08      	ble.n	8009578 <_dtoa_r+0x738>
 8009566:	42ab      	cmp	r3, r5
 8009568:	bfa8      	it	ge
 800956a:	462b      	movge	r3, r5
 800956c:	9a07      	ldr	r2, [sp, #28]
 800956e:	eba9 0903 	sub.w	r9, r9, r3
 8009572:	1aed      	subs	r5, r5, r3
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	9307      	str	r3, [sp, #28]
 8009578:	9b08      	ldr	r3, [sp, #32]
 800957a:	b1eb      	cbz	r3, 80095b8 <_dtoa_r+0x778>
 800957c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800957e:	2b00      	cmp	r3, #0
 8009580:	d065      	beq.n	800964e <_dtoa_r+0x80e>
 8009582:	b18e      	cbz	r6, 80095a8 <_dtoa_r+0x768>
 8009584:	4639      	mov	r1, r7
 8009586:	4632      	mov	r2, r6
 8009588:	4620      	mov	r0, r4
 800958a:	f000 fbb9 	bl	8009d00 <__pow5mult>
 800958e:	465a      	mov	r2, fp
 8009590:	4601      	mov	r1, r0
 8009592:	4607      	mov	r7, r0
 8009594:	4620      	mov	r0, r4
 8009596:	f000 fb1e 	bl	8009bd6 <__multiply>
 800959a:	4659      	mov	r1, fp
 800959c:	900a      	str	r0, [sp, #40]	; 0x28
 800959e:	4620      	mov	r0, r4
 80095a0:	f000 fa70 	bl	8009a84 <_Bfree>
 80095a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095a6:	469b      	mov	fp, r3
 80095a8:	9b08      	ldr	r3, [sp, #32]
 80095aa:	1b9a      	subs	r2, r3, r6
 80095ac:	d004      	beq.n	80095b8 <_dtoa_r+0x778>
 80095ae:	4659      	mov	r1, fp
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 fba5 	bl	8009d00 <__pow5mult>
 80095b6:	4683      	mov	fp, r0
 80095b8:	2101      	movs	r1, #1
 80095ba:	4620      	mov	r0, r4
 80095bc:	f000 fb02 	bl	8009bc4 <__i2b>
 80095c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095c2:	4606      	mov	r6, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 81c6 	beq.w	8009956 <_dtoa_r+0xb16>
 80095ca:	461a      	mov	r2, r3
 80095cc:	4601      	mov	r1, r0
 80095ce:	4620      	mov	r0, r4
 80095d0:	f000 fb96 	bl	8009d00 <__pow5mult>
 80095d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80095d6:	4606      	mov	r6, r0
 80095d8:	2b01      	cmp	r3, #1
 80095da:	dc3e      	bgt.n	800965a <_dtoa_r+0x81a>
 80095dc:	9b02      	ldr	r3, [sp, #8]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d137      	bne.n	8009652 <_dtoa_r+0x812>
 80095e2:	9b03      	ldr	r3, [sp, #12]
 80095e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d134      	bne.n	8009656 <_dtoa_r+0x816>
 80095ec:	9b03      	ldr	r3, [sp, #12]
 80095ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095f2:	0d1b      	lsrs	r3, r3, #20
 80095f4:	051b      	lsls	r3, r3, #20
 80095f6:	b12b      	cbz	r3, 8009604 <_dtoa_r+0x7c4>
 80095f8:	9b07      	ldr	r3, [sp, #28]
 80095fa:	f109 0901 	add.w	r9, r9, #1
 80095fe:	3301      	adds	r3, #1
 8009600:	9307      	str	r3, [sp, #28]
 8009602:	2301      	movs	r3, #1
 8009604:	9308      	str	r3, [sp, #32]
 8009606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009608:	2b00      	cmp	r3, #0
 800960a:	d128      	bne.n	800965e <_dtoa_r+0x81e>
 800960c:	2001      	movs	r0, #1
 800960e:	e02e      	b.n	800966e <_dtoa_r+0x82e>
 8009610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009612:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009616:	e796      	b.n	8009546 <_dtoa_r+0x706>
 8009618:	9b08      	ldr	r3, [sp, #32]
 800961a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800961e:	42b3      	cmp	r3, r6
 8009620:	bfb7      	itett	lt
 8009622:	9b08      	ldrlt	r3, [sp, #32]
 8009624:	1b9e      	subge	r6, r3, r6
 8009626:	1af2      	sublt	r2, r6, r3
 8009628:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800962a:	bfbf      	itttt	lt
 800962c:	9608      	strlt	r6, [sp, #32]
 800962e:	189b      	addlt	r3, r3, r2
 8009630:	930c      	strlt	r3, [sp, #48]	; 0x30
 8009632:	2600      	movlt	r6, #0
 8009634:	f1b8 0f00 	cmp.w	r8, #0
 8009638:	bfb9      	ittee	lt
 800963a:	eba9 0508 	sublt.w	r5, r9, r8
 800963e:	2300      	movlt	r3, #0
 8009640:	464d      	movge	r5, r9
 8009642:	4643      	movge	r3, r8
 8009644:	e781      	b.n	800954a <_dtoa_r+0x70a>
 8009646:	9e08      	ldr	r6, [sp, #32]
 8009648:	464d      	mov	r5, r9
 800964a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800964c:	e786      	b.n	800955c <_dtoa_r+0x71c>
 800964e:	9a08      	ldr	r2, [sp, #32]
 8009650:	e7ad      	b.n	80095ae <_dtoa_r+0x76e>
 8009652:	2300      	movs	r3, #0
 8009654:	e7d6      	b.n	8009604 <_dtoa_r+0x7c4>
 8009656:	9b02      	ldr	r3, [sp, #8]
 8009658:	e7d4      	b.n	8009604 <_dtoa_r+0x7c4>
 800965a:	2300      	movs	r3, #0
 800965c:	9308      	str	r3, [sp, #32]
 800965e:	6933      	ldr	r3, [r6, #16]
 8009660:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009664:	6918      	ldr	r0, [r3, #16]
 8009666:	f000 fa5f 	bl	8009b28 <__hi0bits>
 800966a:	f1c0 0020 	rsb	r0, r0, #32
 800966e:	9b07      	ldr	r3, [sp, #28]
 8009670:	4418      	add	r0, r3
 8009672:	f010 001f 	ands.w	r0, r0, #31
 8009676:	d047      	beq.n	8009708 <_dtoa_r+0x8c8>
 8009678:	f1c0 0320 	rsb	r3, r0, #32
 800967c:	2b04      	cmp	r3, #4
 800967e:	dd3b      	ble.n	80096f8 <_dtoa_r+0x8b8>
 8009680:	9b07      	ldr	r3, [sp, #28]
 8009682:	f1c0 001c 	rsb	r0, r0, #28
 8009686:	4481      	add	r9, r0
 8009688:	4405      	add	r5, r0
 800968a:	4403      	add	r3, r0
 800968c:	9307      	str	r3, [sp, #28]
 800968e:	f1b9 0f00 	cmp.w	r9, #0
 8009692:	dd05      	ble.n	80096a0 <_dtoa_r+0x860>
 8009694:	4659      	mov	r1, fp
 8009696:	464a      	mov	r2, r9
 8009698:	4620      	mov	r0, r4
 800969a:	f000 fb7f 	bl	8009d9c <__lshift>
 800969e:	4683      	mov	fp, r0
 80096a0:	9b07      	ldr	r3, [sp, #28]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	dd05      	ble.n	80096b2 <_dtoa_r+0x872>
 80096a6:	4631      	mov	r1, r6
 80096a8:	461a      	mov	r2, r3
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 fb76 	bl	8009d9c <__lshift>
 80096b0:	4606      	mov	r6, r0
 80096b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096b4:	b353      	cbz	r3, 800970c <_dtoa_r+0x8cc>
 80096b6:	4631      	mov	r1, r6
 80096b8:	4658      	mov	r0, fp
 80096ba:	f000 fbc3 	bl	8009e44 <__mcmp>
 80096be:	2800      	cmp	r0, #0
 80096c0:	da24      	bge.n	800970c <_dtoa_r+0x8cc>
 80096c2:	2300      	movs	r3, #0
 80096c4:	4659      	mov	r1, fp
 80096c6:	220a      	movs	r2, #10
 80096c8:	4620      	mov	r0, r4
 80096ca:	f000 f9f2 	bl	8009ab2 <__multadd>
 80096ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80096d4:	4683      	mov	fp, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f000 8144 	beq.w	8009964 <_dtoa_r+0xb24>
 80096dc:	2300      	movs	r3, #0
 80096de:	4639      	mov	r1, r7
 80096e0:	220a      	movs	r2, #10
 80096e2:	4620      	mov	r0, r4
 80096e4:	f000 f9e5 	bl	8009ab2 <__multadd>
 80096e8:	9b04      	ldr	r3, [sp, #16]
 80096ea:	4607      	mov	r7, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	dc4d      	bgt.n	800978c <_dtoa_r+0x94c>
 80096f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	dd4a      	ble.n	800978c <_dtoa_r+0x94c>
 80096f6:	e011      	b.n	800971c <_dtoa_r+0x8dc>
 80096f8:	d0c9      	beq.n	800968e <_dtoa_r+0x84e>
 80096fa:	9a07      	ldr	r2, [sp, #28]
 80096fc:	331c      	adds	r3, #28
 80096fe:	441a      	add	r2, r3
 8009700:	4499      	add	r9, r3
 8009702:	441d      	add	r5, r3
 8009704:	4613      	mov	r3, r2
 8009706:	e7c1      	b.n	800968c <_dtoa_r+0x84c>
 8009708:	4603      	mov	r3, r0
 800970a:	e7f6      	b.n	80096fa <_dtoa_r+0x8ba>
 800970c:	f1b8 0f00 	cmp.w	r8, #0
 8009710:	dc36      	bgt.n	8009780 <_dtoa_r+0x940>
 8009712:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009714:	2b02      	cmp	r3, #2
 8009716:	dd33      	ble.n	8009780 <_dtoa_r+0x940>
 8009718:	f8cd 8010 	str.w	r8, [sp, #16]
 800971c:	9b04      	ldr	r3, [sp, #16]
 800971e:	b963      	cbnz	r3, 800973a <_dtoa_r+0x8fa>
 8009720:	4631      	mov	r1, r6
 8009722:	2205      	movs	r2, #5
 8009724:	4620      	mov	r0, r4
 8009726:	f000 f9c4 	bl	8009ab2 <__multadd>
 800972a:	4601      	mov	r1, r0
 800972c:	4606      	mov	r6, r0
 800972e:	4658      	mov	r0, fp
 8009730:	f000 fb88 	bl	8009e44 <__mcmp>
 8009734:	2800      	cmp	r0, #0
 8009736:	f73f add3 	bgt.w	80092e0 <_dtoa_r+0x4a0>
 800973a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800973c:	9d06      	ldr	r5, [sp, #24]
 800973e:	ea6f 0a03 	mvn.w	sl, r3
 8009742:	f04f 0900 	mov.w	r9, #0
 8009746:	4631      	mov	r1, r6
 8009748:	4620      	mov	r0, r4
 800974a:	f000 f99b 	bl	8009a84 <_Bfree>
 800974e:	2f00      	cmp	r7, #0
 8009750:	f43f aebd 	beq.w	80094ce <_dtoa_r+0x68e>
 8009754:	f1b9 0f00 	cmp.w	r9, #0
 8009758:	d005      	beq.n	8009766 <_dtoa_r+0x926>
 800975a:	45b9      	cmp	r9, r7
 800975c:	d003      	beq.n	8009766 <_dtoa_r+0x926>
 800975e:	4649      	mov	r1, r9
 8009760:	4620      	mov	r0, r4
 8009762:	f000 f98f 	bl	8009a84 <_Bfree>
 8009766:	4639      	mov	r1, r7
 8009768:	4620      	mov	r0, r4
 800976a:	f000 f98b 	bl	8009a84 <_Bfree>
 800976e:	e6ae      	b.n	80094ce <_dtoa_r+0x68e>
 8009770:	2600      	movs	r6, #0
 8009772:	4637      	mov	r7, r6
 8009774:	e7e1      	b.n	800973a <_dtoa_r+0x8fa>
 8009776:	46ba      	mov	sl, r7
 8009778:	4637      	mov	r7, r6
 800977a:	e5b1      	b.n	80092e0 <_dtoa_r+0x4a0>
 800977c:	40240000 	.word	0x40240000
 8009780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009782:	f8cd 8010 	str.w	r8, [sp, #16]
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 80f3 	beq.w	8009972 <_dtoa_r+0xb32>
 800978c:	2d00      	cmp	r5, #0
 800978e:	dd05      	ble.n	800979c <_dtoa_r+0x95c>
 8009790:	4639      	mov	r1, r7
 8009792:	462a      	mov	r2, r5
 8009794:	4620      	mov	r0, r4
 8009796:	f000 fb01 	bl	8009d9c <__lshift>
 800979a:	4607      	mov	r7, r0
 800979c:	9b08      	ldr	r3, [sp, #32]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d04c      	beq.n	800983c <_dtoa_r+0x9fc>
 80097a2:	6879      	ldr	r1, [r7, #4]
 80097a4:	4620      	mov	r0, r4
 80097a6:	f000 f939 	bl	8009a1c <_Balloc>
 80097aa:	4605      	mov	r5, r0
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	f107 010c 	add.w	r1, r7, #12
 80097b2:	3202      	adds	r2, #2
 80097b4:	0092      	lsls	r2, r2, #2
 80097b6:	300c      	adds	r0, #12
 80097b8:	f7fe fd90 	bl	80082dc <memcpy>
 80097bc:	2201      	movs	r2, #1
 80097be:	4629      	mov	r1, r5
 80097c0:	4620      	mov	r0, r4
 80097c2:	f000 faeb 	bl	8009d9c <__lshift>
 80097c6:	46b9      	mov	r9, r7
 80097c8:	4607      	mov	r7, r0
 80097ca:	9b06      	ldr	r3, [sp, #24]
 80097cc:	9307      	str	r3, [sp, #28]
 80097ce:	9b02      	ldr	r3, [sp, #8]
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	9308      	str	r3, [sp, #32]
 80097d6:	4631      	mov	r1, r6
 80097d8:	4658      	mov	r0, fp
 80097da:	f7ff faa1 	bl	8008d20 <quorem>
 80097de:	4649      	mov	r1, r9
 80097e0:	4605      	mov	r5, r0
 80097e2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80097e6:	4658      	mov	r0, fp
 80097e8:	f000 fb2c 	bl	8009e44 <__mcmp>
 80097ec:	463a      	mov	r2, r7
 80097ee:	9002      	str	r0, [sp, #8]
 80097f0:	4631      	mov	r1, r6
 80097f2:	4620      	mov	r0, r4
 80097f4:	f000 fb40 	bl	8009e78 <__mdiff>
 80097f8:	68c3      	ldr	r3, [r0, #12]
 80097fa:	4602      	mov	r2, r0
 80097fc:	bb03      	cbnz	r3, 8009840 <_dtoa_r+0xa00>
 80097fe:	4601      	mov	r1, r0
 8009800:	9009      	str	r0, [sp, #36]	; 0x24
 8009802:	4658      	mov	r0, fp
 8009804:	f000 fb1e 	bl	8009e44 <__mcmp>
 8009808:	4603      	mov	r3, r0
 800980a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800980c:	4611      	mov	r1, r2
 800980e:	4620      	mov	r0, r4
 8009810:	9309      	str	r3, [sp, #36]	; 0x24
 8009812:	f000 f937 	bl	8009a84 <_Bfree>
 8009816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009818:	b9a3      	cbnz	r3, 8009844 <_dtoa_r+0xa04>
 800981a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800981c:	b992      	cbnz	r2, 8009844 <_dtoa_r+0xa04>
 800981e:	9a08      	ldr	r2, [sp, #32]
 8009820:	b982      	cbnz	r2, 8009844 <_dtoa_r+0xa04>
 8009822:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009826:	d029      	beq.n	800987c <_dtoa_r+0xa3c>
 8009828:	9b02      	ldr	r3, [sp, #8]
 800982a:	2b00      	cmp	r3, #0
 800982c:	dd01      	ble.n	8009832 <_dtoa_r+0x9f2>
 800982e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009832:	9b07      	ldr	r3, [sp, #28]
 8009834:	1c5d      	adds	r5, r3, #1
 8009836:	f883 8000 	strb.w	r8, [r3]
 800983a:	e784      	b.n	8009746 <_dtoa_r+0x906>
 800983c:	4638      	mov	r0, r7
 800983e:	e7c2      	b.n	80097c6 <_dtoa_r+0x986>
 8009840:	2301      	movs	r3, #1
 8009842:	e7e3      	b.n	800980c <_dtoa_r+0x9cc>
 8009844:	9a02      	ldr	r2, [sp, #8]
 8009846:	2a00      	cmp	r2, #0
 8009848:	db04      	blt.n	8009854 <_dtoa_r+0xa14>
 800984a:	d123      	bne.n	8009894 <_dtoa_r+0xa54>
 800984c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800984e:	bb0a      	cbnz	r2, 8009894 <_dtoa_r+0xa54>
 8009850:	9a08      	ldr	r2, [sp, #32]
 8009852:	b9fa      	cbnz	r2, 8009894 <_dtoa_r+0xa54>
 8009854:	2b00      	cmp	r3, #0
 8009856:	ddec      	ble.n	8009832 <_dtoa_r+0x9f2>
 8009858:	4659      	mov	r1, fp
 800985a:	2201      	movs	r2, #1
 800985c:	4620      	mov	r0, r4
 800985e:	f000 fa9d 	bl	8009d9c <__lshift>
 8009862:	4631      	mov	r1, r6
 8009864:	4683      	mov	fp, r0
 8009866:	f000 faed 	bl	8009e44 <__mcmp>
 800986a:	2800      	cmp	r0, #0
 800986c:	dc03      	bgt.n	8009876 <_dtoa_r+0xa36>
 800986e:	d1e0      	bne.n	8009832 <_dtoa_r+0x9f2>
 8009870:	f018 0f01 	tst.w	r8, #1
 8009874:	d0dd      	beq.n	8009832 <_dtoa_r+0x9f2>
 8009876:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800987a:	d1d8      	bne.n	800982e <_dtoa_r+0x9ee>
 800987c:	9b07      	ldr	r3, [sp, #28]
 800987e:	9a07      	ldr	r2, [sp, #28]
 8009880:	1c5d      	adds	r5, r3, #1
 8009882:	2339      	movs	r3, #57	; 0x39
 8009884:	7013      	strb	r3, [r2, #0]
 8009886:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800988a:	1e6a      	subs	r2, r5, #1
 800988c:	2b39      	cmp	r3, #57	; 0x39
 800988e:	d04d      	beq.n	800992c <_dtoa_r+0xaec>
 8009890:	3301      	adds	r3, #1
 8009892:	e052      	b.n	800993a <_dtoa_r+0xafa>
 8009894:	9a07      	ldr	r2, [sp, #28]
 8009896:	2b00      	cmp	r3, #0
 8009898:	f102 0501 	add.w	r5, r2, #1
 800989c:	dd06      	ble.n	80098ac <_dtoa_r+0xa6c>
 800989e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80098a2:	d0eb      	beq.n	800987c <_dtoa_r+0xa3c>
 80098a4:	f108 0801 	add.w	r8, r8, #1
 80098a8:	9b07      	ldr	r3, [sp, #28]
 80098aa:	e7c4      	b.n	8009836 <_dtoa_r+0x9f6>
 80098ac:	9b06      	ldr	r3, [sp, #24]
 80098ae:	9a04      	ldr	r2, [sp, #16]
 80098b0:	1aeb      	subs	r3, r5, r3
 80098b2:	4293      	cmp	r3, r2
 80098b4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80098b8:	d021      	beq.n	80098fe <_dtoa_r+0xabe>
 80098ba:	4659      	mov	r1, fp
 80098bc:	2300      	movs	r3, #0
 80098be:	220a      	movs	r2, #10
 80098c0:	4620      	mov	r0, r4
 80098c2:	f000 f8f6 	bl	8009ab2 <__multadd>
 80098c6:	45b9      	cmp	r9, r7
 80098c8:	4683      	mov	fp, r0
 80098ca:	f04f 0300 	mov.w	r3, #0
 80098ce:	f04f 020a 	mov.w	r2, #10
 80098d2:	4649      	mov	r1, r9
 80098d4:	4620      	mov	r0, r4
 80098d6:	d105      	bne.n	80098e4 <_dtoa_r+0xaa4>
 80098d8:	f000 f8eb 	bl	8009ab2 <__multadd>
 80098dc:	4681      	mov	r9, r0
 80098de:	4607      	mov	r7, r0
 80098e0:	9507      	str	r5, [sp, #28]
 80098e2:	e778      	b.n	80097d6 <_dtoa_r+0x996>
 80098e4:	f000 f8e5 	bl	8009ab2 <__multadd>
 80098e8:	4639      	mov	r1, r7
 80098ea:	4681      	mov	r9, r0
 80098ec:	2300      	movs	r3, #0
 80098ee:	220a      	movs	r2, #10
 80098f0:	4620      	mov	r0, r4
 80098f2:	f000 f8de 	bl	8009ab2 <__multadd>
 80098f6:	4607      	mov	r7, r0
 80098f8:	e7f2      	b.n	80098e0 <_dtoa_r+0xaa0>
 80098fa:	f04f 0900 	mov.w	r9, #0
 80098fe:	4659      	mov	r1, fp
 8009900:	2201      	movs	r2, #1
 8009902:	4620      	mov	r0, r4
 8009904:	f000 fa4a 	bl	8009d9c <__lshift>
 8009908:	4631      	mov	r1, r6
 800990a:	4683      	mov	fp, r0
 800990c:	f000 fa9a 	bl	8009e44 <__mcmp>
 8009910:	2800      	cmp	r0, #0
 8009912:	dcb8      	bgt.n	8009886 <_dtoa_r+0xa46>
 8009914:	d102      	bne.n	800991c <_dtoa_r+0xadc>
 8009916:	f018 0f01 	tst.w	r8, #1
 800991a:	d1b4      	bne.n	8009886 <_dtoa_r+0xa46>
 800991c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009920:	1e6a      	subs	r2, r5, #1
 8009922:	2b30      	cmp	r3, #48	; 0x30
 8009924:	f47f af0f 	bne.w	8009746 <_dtoa_r+0x906>
 8009928:	4615      	mov	r5, r2
 800992a:	e7f7      	b.n	800991c <_dtoa_r+0xadc>
 800992c:	9b06      	ldr	r3, [sp, #24]
 800992e:	4293      	cmp	r3, r2
 8009930:	d105      	bne.n	800993e <_dtoa_r+0xafe>
 8009932:	2331      	movs	r3, #49	; 0x31
 8009934:	9a06      	ldr	r2, [sp, #24]
 8009936:	f10a 0a01 	add.w	sl, sl, #1
 800993a:	7013      	strb	r3, [r2, #0]
 800993c:	e703      	b.n	8009746 <_dtoa_r+0x906>
 800993e:	4615      	mov	r5, r2
 8009940:	e7a1      	b.n	8009886 <_dtoa_r+0xa46>
 8009942:	4b17      	ldr	r3, [pc, #92]	; (80099a0 <_dtoa_r+0xb60>)
 8009944:	f7ff bae1 	b.w	8008f0a <_dtoa_r+0xca>
 8009948:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800994a:	2b00      	cmp	r3, #0
 800994c:	f47f aabb 	bne.w	8008ec6 <_dtoa_r+0x86>
 8009950:	4b14      	ldr	r3, [pc, #80]	; (80099a4 <_dtoa_r+0xb64>)
 8009952:	f7ff bada 	b.w	8008f0a <_dtoa_r+0xca>
 8009956:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009958:	2b01      	cmp	r3, #1
 800995a:	f77f ae3f 	ble.w	80095dc <_dtoa_r+0x79c>
 800995e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009960:	9308      	str	r3, [sp, #32]
 8009962:	e653      	b.n	800960c <_dtoa_r+0x7cc>
 8009964:	9b04      	ldr	r3, [sp, #16]
 8009966:	2b00      	cmp	r3, #0
 8009968:	dc03      	bgt.n	8009972 <_dtoa_r+0xb32>
 800996a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800996c:	2b02      	cmp	r3, #2
 800996e:	f73f aed5 	bgt.w	800971c <_dtoa_r+0x8dc>
 8009972:	9d06      	ldr	r5, [sp, #24]
 8009974:	4631      	mov	r1, r6
 8009976:	4658      	mov	r0, fp
 8009978:	f7ff f9d2 	bl	8008d20 <quorem>
 800997c:	9b06      	ldr	r3, [sp, #24]
 800997e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009982:	f805 8b01 	strb.w	r8, [r5], #1
 8009986:	9a04      	ldr	r2, [sp, #16]
 8009988:	1aeb      	subs	r3, r5, r3
 800998a:	429a      	cmp	r2, r3
 800998c:	ddb5      	ble.n	80098fa <_dtoa_r+0xaba>
 800998e:	4659      	mov	r1, fp
 8009990:	2300      	movs	r3, #0
 8009992:	220a      	movs	r2, #10
 8009994:	4620      	mov	r0, r4
 8009996:	f000 f88c 	bl	8009ab2 <__multadd>
 800999a:	4683      	mov	fp, r0
 800999c:	e7ea      	b.n	8009974 <_dtoa_r+0xb34>
 800999e:	bf00      	nop
 80099a0:	0800c860 	.word	0x0800c860
 80099a4:	0800c884 	.word	0x0800c884

080099a8 <__locale_ctype_ptr_l>:
 80099a8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80099ac:	4770      	bx	lr
	...

080099b0 <_localeconv_r>:
 80099b0:	4b04      	ldr	r3, [pc, #16]	; (80099c4 <_localeconv_r+0x14>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6a18      	ldr	r0, [r3, #32]
 80099b6:	4b04      	ldr	r3, [pc, #16]	; (80099c8 <_localeconv_r+0x18>)
 80099b8:	2800      	cmp	r0, #0
 80099ba:	bf08      	it	eq
 80099bc:	4618      	moveq	r0, r3
 80099be:	30f0      	adds	r0, #240	; 0xf0
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	2000003c 	.word	0x2000003c
 80099c8:	200000a0 	.word	0x200000a0

080099cc <malloc>:
 80099cc:	4b02      	ldr	r3, [pc, #8]	; (80099d8 <malloc+0xc>)
 80099ce:	4601      	mov	r1, r0
 80099d0:	6818      	ldr	r0, [r3, #0]
 80099d2:	f000 bb59 	b.w	800a088 <_malloc_r>
 80099d6:	bf00      	nop
 80099d8:	2000003c 	.word	0x2000003c

080099dc <__ascii_mbtowc>:
 80099dc:	b082      	sub	sp, #8
 80099de:	b901      	cbnz	r1, 80099e2 <__ascii_mbtowc+0x6>
 80099e0:	a901      	add	r1, sp, #4
 80099e2:	b142      	cbz	r2, 80099f6 <__ascii_mbtowc+0x1a>
 80099e4:	b14b      	cbz	r3, 80099fa <__ascii_mbtowc+0x1e>
 80099e6:	7813      	ldrb	r3, [r2, #0]
 80099e8:	600b      	str	r3, [r1, #0]
 80099ea:	7812      	ldrb	r2, [r2, #0]
 80099ec:	1c10      	adds	r0, r2, #0
 80099ee:	bf18      	it	ne
 80099f0:	2001      	movne	r0, #1
 80099f2:	b002      	add	sp, #8
 80099f4:	4770      	bx	lr
 80099f6:	4610      	mov	r0, r2
 80099f8:	e7fb      	b.n	80099f2 <__ascii_mbtowc+0x16>
 80099fa:	f06f 0001 	mvn.w	r0, #1
 80099fe:	e7f8      	b.n	80099f2 <__ascii_mbtowc+0x16>

08009a00 <memchr>:
 8009a00:	b510      	push	{r4, lr}
 8009a02:	b2c9      	uxtb	r1, r1
 8009a04:	4402      	add	r2, r0
 8009a06:	4290      	cmp	r0, r2
 8009a08:	4603      	mov	r3, r0
 8009a0a:	d101      	bne.n	8009a10 <memchr+0x10>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	e003      	b.n	8009a18 <memchr+0x18>
 8009a10:	781c      	ldrb	r4, [r3, #0]
 8009a12:	3001      	adds	r0, #1
 8009a14:	428c      	cmp	r4, r1
 8009a16:	d1f6      	bne.n	8009a06 <memchr+0x6>
 8009a18:	4618      	mov	r0, r3
 8009a1a:	bd10      	pop	{r4, pc}

08009a1c <_Balloc>:
 8009a1c:	b570      	push	{r4, r5, r6, lr}
 8009a1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a20:	4604      	mov	r4, r0
 8009a22:	460e      	mov	r6, r1
 8009a24:	b93d      	cbnz	r5, 8009a36 <_Balloc+0x1a>
 8009a26:	2010      	movs	r0, #16
 8009a28:	f7ff ffd0 	bl	80099cc <malloc>
 8009a2c:	6260      	str	r0, [r4, #36]	; 0x24
 8009a2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a32:	6005      	str	r5, [r0, #0]
 8009a34:	60c5      	str	r5, [r0, #12]
 8009a36:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009a38:	68eb      	ldr	r3, [r5, #12]
 8009a3a:	b183      	cbz	r3, 8009a5e <_Balloc+0x42>
 8009a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009a44:	b9b8      	cbnz	r0, 8009a76 <_Balloc+0x5a>
 8009a46:	2101      	movs	r1, #1
 8009a48:	fa01 f506 	lsl.w	r5, r1, r6
 8009a4c:	1d6a      	adds	r2, r5, #5
 8009a4e:	0092      	lsls	r2, r2, #2
 8009a50:	4620      	mov	r0, r4
 8009a52:	f000 fabe 	bl	8009fd2 <_calloc_r>
 8009a56:	b160      	cbz	r0, 8009a72 <_Balloc+0x56>
 8009a58:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009a5c:	e00e      	b.n	8009a7c <_Balloc+0x60>
 8009a5e:	2221      	movs	r2, #33	; 0x21
 8009a60:	2104      	movs	r1, #4
 8009a62:	4620      	mov	r0, r4
 8009a64:	f000 fab5 	bl	8009fd2 <_calloc_r>
 8009a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a6a:	60e8      	str	r0, [r5, #12]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1e4      	bne.n	8009a3c <_Balloc+0x20>
 8009a72:	2000      	movs	r0, #0
 8009a74:	bd70      	pop	{r4, r5, r6, pc}
 8009a76:	6802      	ldr	r2, [r0, #0]
 8009a78:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a82:	e7f7      	b.n	8009a74 <_Balloc+0x58>

08009a84 <_Bfree>:
 8009a84:	b570      	push	{r4, r5, r6, lr}
 8009a86:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009a88:	4606      	mov	r6, r0
 8009a8a:	460d      	mov	r5, r1
 8009a8c:	b93c      	cbnz	r4, 8009a9e <_Bfree+0x1a>
 8009a8e:	2010      	movs	r0, #16
 8009a90:	f7ff ff9c 	bl	80099cc <malloc>
 8009a94:	6270      	str	r0, [r6, #36]	; 0x24
 8009a96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a9a:	6004      	str	r4, [r0, #0]
 8009a9c:	60c4      	str	r4, [r0, #12]
 8009a9e:	b13d      	cbz	r5, 8009ab0 <_Bfree+0x2c>
 8009aa0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009aa2:	686a      	ldr	r2, [r5, #4]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009aaa:	6029      	str	r1, [r5, #0]
 8009aac:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009ab0:	bd70      	pop	{r4, r5, r6, pc}

08009ab2 <__multadd>:
 8009ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab6:	461f      	mov	r7, r3
 8009ab8:	4606      	mov	r6, r0
 8009aba:	460c      	mov	r4, r1
 8009abc:	2300      	movs	r3, #0
 8009abe:	690d      	ldr	r5, [r1, #16]
 8009ac0:	f101 0c14 	add.w	ip, r1, #20
 8009ac4:	f8dc 0000 	ldr.w	r0, [ip]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	b281      	uxth	r1, r0
 8009acc:	fb02 7101 	mla	r1, r2, r1, r7
 8009ad0:	0c00      	lsrs	r0, r0, #16
 8009ad2:	0c0f      	lsrs	r7, r1, #16
 8009ad4:	fb02 7000 	mla	r0, r2, r0, r7
 8009ad8:	b289      	uxth	r1, r1
 8009ada:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009ade:	429d      	cmp	r5, r3
 8009ae0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009ae4:	f84c 1b04 	str.w	r1, [ip], #4
 8009ae8:	dcec      	bgt.n	8009ac4 <__multadd+0x12>
 8009aea:	b1d7      	cbz	r7, 8009b22 <__multadd+0x70>
 8009aec:	68a3      	ldr	r3, [r4, #8]
 8009aee:	42ab      	cmp	r3, r5
 8009af0:	dc12      	bgt.n	8009b18 <__multadd+0x66>
 8009af2:	6861      	ldr	r1, [r4, #4]
 8009af4:	4630      	mov	r0, r6
 8009af6:	3101      	adds	r1, #1
 8009af8:	f7ff ff90 	bl	8009a1c <_Balloc>
 8009afc:	4680      	mov	r8, r0
 8009afe:	6922      	ldr	r2, [r4, #16]
 8009b00:	f104 010c 	add.w	r1, r4, #12
 8009b04:	3202      	adds	r2, #2
 8009b06:	0092      	lsls	r2, r2, #2
 8009b08:	300c      	adds	r0, #12
 8009b0a:	f7fe fbe7 	bl	80082dc <memcpy>
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4630      	mov	r0, r6
 8009b12:	f7ff ffb7 	bl	8009a84 <_Bfree>
 8009b16:	4644      	mov	r4, r8
 8009b18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b1c:	3501      	adds	r5, #1
 8009b1e:	615f      	str	r7, [r3, #20]
 8009b20:	6125      	str	r5, [r4, #16]
 8009b22:	4620      	mov	r0, r4
 8009b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009b28 <__hi0bits>:
 8009b28:	0c02      	lsrs	r2, r0, #16
 8009b2a:	0412      	lsls	r2, r2, #16
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	b9b2      	cbnz	r2, 8009b5e <__hi0bits+0x36>
 8009b30:	0403      	lsls	r3, r0, #16
 8009b32:	2010      	movs	r0, #16
 8009b34:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009b38:	bf04      	itt	eq
 8009b3a:	021b      	lsleq	r3, r3, #8
 8009b3c:	3008      	addeq	r0, #8
 8009b3e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009b42:	bf04      	itt	eq
 8009b44:	011b      	lsleq	r3, r3, #4
 8009b46:	3004      	addeq	r0, #4
 8009b48:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009b4c:	bf04      	itt	eq
 8009b4e:	009b      	lsleq	r3, r3, #2
 8009b50:	3002      	addeq	r0, #2
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	db06      	blt.n	8009b64 <__hi0bits+0x3c>
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	d503      	bpl.n	8009b62 <__hi0bits+0x3a>
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	4770      	bx	lr
 8009b5e:	2000      	movs	r0, #0
 8009b60:	e7e8      	b.n	8009b34 <__hi0bits+0xc>
 8009b62:	2020      	movs	r0, #32
 8009b64:	4770      	bx	lr

08009b66 <__lo0bits>:
 8009b66:	6803      	ldr	r3, [r0, #0]
 8009b68:	4601      	mov	r1, r0
 8009b6a:	f013 0207 	ands.w	r2, r3, #7
 8009b6e:	d00b      	beq.n	8009b88 <__lo0bits+0x22>
 8009b70:	07da      	lsls	r2, r3, #31
 8009b72:	d423      	bmi.n	8009bbc <__lo0bits+0x56>
 8009b74:	0798      	lsls	r0, r3, #30
 8009b76:	bf49      	itett	mi
 8009b78:	085b      	lsrmi	r3, r3, #1
 8009b7a:	089b      	lsrpl	r3, r3, #2
 8009b7c:	2001      	movmi	r0, #1
 8009b7e:	600b      	strmi	r3, [r1, #0]
 8009b80:	bf5c      	itt	pl
 8009b82:	600b      	strpl	r3, [r1, #0]
 8009b84:	2002      	movpl	r0, #2
 8009b86:	4770      	bx	lr
 8009b88:	b298      	uxth	r0, r3
 8009b8a:	b9a8      	cbnz	r0, 8009bb8 <__lo0bits+0x52>
 8009b8c:	2010      	movs	r0, #16
 8009b8e:	0c1b      	lsrs	r3, r3, #16
 8009b90:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b94:	bf04      	itt	eq
 8009b96:	0a1b      	lsreq	r3, r3, #8
 8009b98:	3008      	addeq	r0, #8
 8009b9a:	071a      	lsls	r2, r3, #28
 8009b9c:	bf04      	itt	eq
 8009b9e:	091b      	lsreq	r3, r3, #4
 8009ba0:	3004      	addeq	r0, #4
 8009ba2:	079a      	lsls	r2, r3, #30
 8009ba4:	bf04      	itt	eq
 8009ba6:	089b      	lsreq	r3, r3, #2
 8009ba8:	3002      	addeq	r0, #2
 8009baa:	07da      	lsls	r2, r3, #31
 8009bac:	d402      	bmi.n	8009bb4 <__lo0bits+0x4e>
 8009bae:	085b      	lsrs	r3, r3, #1
 8009bb0:	d006      	beq.n	8009bc0 <__lo0bits+0x5a>
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	600b      	str	r3, [r1, #0]
 8009bb6:	4770      	bx	lr
 8009bb8:	4610      	mov	r0, r2
 8009bba:	e7e9      	b.n	8009b90 <__lo0bits+0x2a>
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	4770      	bx	lr
 8009bc0:	2020      	movs	r0, #32
 8009bc2:	4770      	bx	lr

08009bc4 <__i2b>:
 8009bc4:	b510      	push	{r4, lr}
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	2101      	movs	r1, #1
 8009bca:	f7ff ff27 	bl	8009a1c <_Balloc>
 8009bce:	2201      	movs	r2, #1
 8009bd0:	6144      	str	r4, [r0, #20]
 8009bd2:	6102      	str	r2, [r0, #16]
 8009bd4:	bd10      	pop	{r4, pc}

08009bd6 <__multiply>:
 8009bd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bda:	4614      	mov	r4, r2
 8009bdc:	690a      	ldr	r2, [r1, #16]
 8009bde:	6923      	ldr	r3, [r4, #16]
 8009be0:	4688      	mov	r8, r1
 8009be2:	429a      	cmp	r2, r3
 8009be4:	bfbe      	ittt	lt
 8009be6:	460b      	movlt	r3, r1
 8009be8:	46a0      	movlt	r8, r4
 8009bea:	461c      	movlt	r4, r3
 8009bec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bf0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009bf4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009bf8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009bfc:	eb07 0609 	add.w	r6, r7, r9
 8009c00:	42b3      	cmp	r3, r6
 8009c02:	bfb8      	it	lt
 8009c04:	3101      	addlt	r1, #1
 8009c06:	f7ff ff09 	bl	8009a1c <_Balloc>
 8009c0a:	f100 0514 	add.w	r5, r0, #20
 8009c0e:	462b      	mov	r3, r5
 8009c10:	2200      	movs	r2, #0
 8009c12:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009c16:	4573      	cmp	r3, lr
 8009c18:	d316      	bcc.n	8009c48 <__multiply+0x72>
 8009c1a:	f104 0214 	add.w	r2, r4, #20
 8009c1e:	f108 0114 	add.w	r1, r8, #20
 8009c22:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009c26:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	9b00      	ldr	r3, [sp, #0]
 8009c2e:	9201      	str	r2, [sp, #4]
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d80c      	bhi.n	8009c4e <__multiply+0x78>
 8009c34:	2e00      	cmp	r6, #0
 8009c36:	dd03      	ble.n	8009c40 <__multiply+0x6a>
 8009c38:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d05d      	beq.n	8009cfc <__multiply+0x126>
 8009c40:	6106      	str	r6, [r0, #16]
 8009c42:	b003      	add	sp, #12
 8009c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c48:	f843 2b04 	str.w	r2, [r3], #4
 8009c4c:	e7e3      	b.n	8009c16 <__multiply+0x40>
 8009c4e:	f8b2 b000 	ldrh.w	fp, [r2]
 8009c52:	f1bb 0f00 	cmp.w	fp, #0
 8009c56:	d023      	beq.n	8009ca0 <__multiply+0xca>
 8009c58:	4689      	mov	r9, r1
 8009c5a:	46ac      	mov	ip, r5
 8009c5c:	f04f 0800 	mov.w	r8, #0
 8009c60:	f859 4b04 	ldr.w	r4, [r9], #4
 8009c64:	f8dc a000 	ldr.w	sl, [ip]
 8009c68:	b2a3      	uxth	r3, r4
 8009c6a:	fa1f fa8a 	uxth.w	sl, sl
 8009c6e:	fb0b a303 	mla	r3, fp, r3, sl
 8009c72:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009c76:	f8dc 4000 	ldr.w	r4, [ip]
 8009c7a:	4443      	add	r3, r8
 8009c7c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009c80:	fb0b 840a 	mla	r4, fp, sl, r8
 8009c84:	46e2      	mov	sl, ip
 8009c86:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009c90:	454f      	cmp	r7, r9
 8009c92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009c96:	f84a 3b04 	str.w	r3, [sl], #4
 8009c9a:	d82b      	bhi.n	8009cf4 <__multiply+0x11e>
 8009c9c:	f8cc 8004 	str.w	r8, [ip, #4]
 8009ca0:	9b01      	ldr	r3, [sp, #4]
 8009ca2:	3204      	adds	r2, #4
 8009ca4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009ca8:	f1ba 0f00 	cmp.w	sl, #0
 8009cac:	d020      	beq.n	8009cf0 <__multiply+0x11a>
 8009cae:	4689      	mov	r9, r1
 8009cb0:	46a8      	mov	r8, r5
 8009cb2:	f04f 0b00 	mov.w	fp, #0
 8009cb6:	682b      	ldr	r3, [r5, #0]
 8009cb8:	f8b9 c000 	ldrh.w	ip, [r9]
 8009cbc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	fb0a 440c 	mla	r4, sl, ip, r4
 8009cc6:	46c4      	mov	ip, r8
 8009cc8:	445c      	add	r4, fp
 8009cca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009cce:	f84c 3b04 	str.w	r3, [ip], #4
 8009cd2:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cd6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009cda:	0c1b      	lsrs	r3, r3, #16
 8009cdc:	fb0a b303 	mla	r3, sl, r3, fp
 8009ce0:	454f      	cmp	r7, r9
 8009ce2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009ce6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009cea:	d805      	bhi.n	8009cf8 <__multiply+0x122>
 8009cec:	f8c8 3004 	str.w	r3, [r8, #4]
 8009cf0:	3504      	adds	r5, #4
 8009cf2:	e79b      	b.n	8009c2c <__multiply+0x56>
 8009cf4:	46d4      	mov	ip, sl
 8009cf6:	e7b3      	b.n	8009c60 <__multiply+0x8a>
 8009cf8:	46e0      	mov	r8, ip
 8009cfa:	e7dd      	b.n	8009cb8 <__multiply+0xe2>
 8009cfc:	3e01      	subs	r6, #1
 8009cfe:	e799      	b.n	8009c34 <__multiply+0x5e>

08009d00 <__pow5mult>:
 8009d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d04:	4615      	mov	r5, r2
 8009d06:	f012 0203 	ands.w	r2, r2, #3
 8009d0a:	4606      	mov	r6, r0
 8009d0c:	460f      	mov	r7, r1
 8009d0e:	d007      	beq.n	8009d20 <__pow5mult+0x20>
 8009d10:	4c21      	ldr	r4, [pc, #132]	; (8009d98 <__pow5mult+0x98>)
 8009d12:	3a01      	subs	r2, #1
 8009d14:	2300      	movs	r3, #0
 8009d16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d1a:	f7ff feca 	bl	8009ab2 <__multadd>
 8009d1e:	4607      	mov	r7, r0
 8009d20:	10ad      	asrs	r5, r5, #2
 8009d22:	d035      	beq.n	8009d90 <__pow5mult+0x90>
 8009d24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d26:	b93c      	cbnz	r4, 8009d38 <__pow5mult+0x38>
 8009d28:	2010      	movs	r0, #16
 8009d2a:	f7ff fe4f 	bl	80099cc <malloc>
 8009d2e:	6270      	str	r0, [r6, #36]	; 0x24
 8009d30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d34:	6004      	str	r4, [r0, #0]
 8009d36:	60c4      	str	r4, [r0, #12]
 8009d38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d40:	b94c      	cbnz	r4, 8009d56 <__pow5mult+0x56>
 8009d42:	f240 2171 	movw	r1, #625	; 0x271
 8009d46:	4630      	mov	r0, r6
 8009d48:	f7ff ff3c 	bl	8009bc4 <__i2b>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	4604      	mov	r4, r0
 8009d50:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d54:	6003      	str	r3, [r0, #0]
 8009d56:	f04f 0800 	mov.w	r8, #0
 8009d5a:	07eb      	lsls	r3, r5, #31
 8009d5c:	d50a      	bpl.n	8009d74 <__pow5mult+0x74>
 8009d5e:	4639      	mov	r1, r7
 8009d60:	4622      	mov	r2, r4
 8009d62:	4630      	mov	r0, r6
 8009d64:	f7ff ff37 	bl	8009bd6 <__multiply>
 8009d68:	4681      	mov	r9, r0
 8009d6a:	4639      	mov	r1, r7
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	f7ff fe89 	bl	8009a84 <_Bfree>
 8009d72:	464f      	mov	r7, r9
 8009d74:	106d      	asrs	r5, r5, #1
 8009d76:	d00b      	beq.n	8009d90 <__pow5mult+0x90>
 8009d78:	6820      	ldr	r0, [r4, #0]
 8009d7a:	b938      	cbnz	r0, 8009d8c <__pow5mult+0x8c>
 8009d7c:	4622      	mov	r2, r4
 8009d7e:	4621      	mov	r1, r4
 8009d80:	4630      	mov	r0, r6
 8009d82:	f7ff ff28 	bl	8009bd6 <__multiply>
 8009d86:	6020      	str	r0, [r4, #0]
 8009d88:	f8c0 8000 	str.w	r8, [r0]
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	e7e4      	b.n	8009d5a <__pow5mult+0x5a>
 8009d90:	4638      	mov	r0, r7
 8009d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d96:	bf00      	nop
 8009d98:	0800c990 	.word	0x0800c990

08009d9c <__lshift>:
 8009d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009da0:	460c      	mov	r4, r1
 8009da2:	4607      	mov	r7, r0
 8009da4:	4616      	mov	r6, r2
 8009da6:	6923      	ldr	r3, [r4, #16]
 8009da8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009dac:	eb0a 0903 	add.w	r9, sl, r3
 8009db0:	6849      	ldr	r1, [r1, #4]
 8009db2:	68a3      	ldr	r3, [r4, #8]
 8009db4:	f109 0501 	add.w	r5, r9, #1
 8009db8:	42ab      	cmp	r3, r5
 8009dba:	db32      	blt.n	8009e22 <__lshift+0x86>
 8009dbc:	4638      	mov	r0, r7
 8009dbe:	f7ff fe2d 	bl	8009a1c <_Balloc>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	4680      	mov	r8, r0
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	f100 0114 	add.w	r1, r0, #20
 8009dcc:	4553      	cmp	r3, sl
 8009dce:	db2b      	blt.n	8009e28 <__lshift+0x8c>
 8009dd0:	6920      	ldr	r0, [r4, #16]
 8009dd2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009dd6:	f104 0314 	add.w	r3, r4, #20
 8009dda:	f016 021f 	ands.w	r2, r6, #31
 8009dde:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009de2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009de6:	d025      	beq.n	8009e34 <__lshift+0x98>
 8009de8:	2000      	movs	r0, #0
 8009dea:	f1c2 0e20 	rsb	lr, r2, #32
 8009dee:	468a      	mov	sl, r1
 8009df0:	681e      	ldr	r6, [r3, #0]
 8009df2:	4096      	lsls	r6, r2
 8009df4:	4330      	orrs	r0, r6
 8009df6:	f84a 0b04 	str.w	r0, [sl], #4
 8009dfa:	f853 0b04 	ldr.w	r0, [r3], #4
 8009dfe:	459c      	cmp	ip, r3
 8009e00:	fa20 f00e 	lsr.w	r0, r0, lr
 8009e04:	d814      	bhi.n	8009e30 <__lshift+0x94>
 8009e06:	6048      	str	r0, [r1, #4]
 8009e08:	b108      	cbz	r0, 8009e0e <__lshift+0x72>
 8009e0a:	f109 0502 	add.w	r5, r9, #2
 8009e0e:	3d01      	subs	r5, #1
 8009e10:	4638      	mov	r0, r7
 8009e12:	f8c8 5010 	str.w	r5, [r8, #16]
 8009e16:	4621      	mov	r1, r4
 8009e18:	f7ff fe34 	bl	8009a84 <_Bfree>
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e22:	3101      	adds	r1, #1
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	e7c7      	b.n	8009db8 <__lshift+0x1c>
 8009e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	e7cd      	b.n	8009dcc <__lshift+0x30>
 8009e30:	4651      	mov	r1, sl
 8009e32:	e7dc      	b.n	8009dee <__lshift+0x52>
 8009e34:	3904      	subs	r1, #4
 8009e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e3a:	459c      	cmp	ip, r3
 8009e3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e40:	d8f9      	bhi.n	8009e36 <__lshift+0x9a>
 8009e42:	e7e4      	b.n	8009e0e <__lshift+0x72>

08009e44 <__mcmp>:
 8009e44:	6903      	ldr	r3, [r0, #16]
 8009e46:	690a      	ldr	r2, [r1, #16]
 8009e48:	b530      	push	{r4, r5, lr}
 8009e4a:	1a9b      	subs	r3, r3, r2
 8009e4c:	d10c      	bne.n	8009e68 <__mcmp+0x24>
 8009e4e:	0092      	lsls	r2, r2, #2
 8009e50:	3014      	adds	r0, #20
 8009e52:	3114      	adds	r1, #20
 8009e54:	1884      	adds	r4, r0, r2
 8009e56:	4411      	add	r1, r2
 8009e58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e60:	4295      	cmp	r5, r2
 8009e62:	d003      	beq.n	8009e6c <__mcmp+0x28>
 8009e64:	d305      	bcc.n	8009e72 <__mcmp+0x2e>
 8009e66:	2301      	movs	r3, #1
 8009e68:	4618      	mov	r0, r3
 8009e6a:	bd30      	pop	{r4, r5, pc}
 8009e6c:	42a0      	cmp	r0, r4
 8009e6e:	d3f3      	bcc.n	8009e58 <__mcmp+0x14>
 8009e70:	e7fa      	b.n	8009e68 <__mcmp+0x24>
 8009e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e76:	e7f7      	b.n	8009e68 <__mcmp+0x24>

08009e78 <__mdiff>:
 8009e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e7c:	460d      	mov	r5, r1
 8009e7e:	4607      	mov	r7, r0
 8009e80:	4611      	mov	r1, r2
 8009e82:	4628      	mov	r0, r5
 8009e84:	4614      	mov	r4, r2
 8009e86:	f7ff ffdd 	bl	8009e44 <__mcmp>
 8009e8a:	1e06      	subs	r6, r0, #0
 8009e8c:	d108      	bne.n	8009ea0 <__mdiff+0x28>
 8009e8e:	4631      	mov	r1, r6
 8009e90:	4638      	mov	r0, r7
 8009e92:	f7ff fdc3 	bl	8009a1c <_Balloc>
 8009e96:	2301      	movs	r3, #1
 8009e98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea0:	bfa4      	itt	ge
 8009ea2:	4623      	movge	r3, r4
 8009ea4:	462c      	movge	r4, r5
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	6861      	ldr	r1, [r4, #4]
 8009eaa:	bfa6      	itte	ge
 8009eac:	461d      	movge	r5, r3
 8009eae:	2600      	movge	r6, #0
 8009eb0:	2601      	movlt	r6, #1
 8009eb2:	f7ff fdb3 	bl	8009a1c <_Balloc>
 8009eb6:	f04f 0e00 	mov.w	lr, #0
 8009eba:	60c6      	str	r6, [r0, #12]
 8009ebc:	692b      	ldr	r3, [r5, #16]
 8009ebe:	6926      	ldr	r6, [r4, #16]
 8009ec0:	f104 0214 	add.w	r2, r4, #20
 8009ec4:	f105 0914 	add.w	r9, r5, #20
 8009ec8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009ecc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009ed0:	f100 0114 	add.w	r1, r0, #20
 8009ed4:	f852 ab04 	ldr.w	sl, [r2], #4
 8009ed8:	f859 5b04 	ldr.w	r5, [r9], #4
 8009edc:	fa1f f38a 	uxth.w	r3, sl
 8009ee0:	4473      	add	r3, lr
 8009ee2:	b2ac      	uxth	r4, r5
 8009ee4:	1b1b      	subs	r3, r3, r4
 8009ee6:	0c2c      	lsrs	r4, r5, #16
 8009ee8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009eec:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009ef6:	45c8      	cmp	r8, r9
 8009ef8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009efc:	4694      	mov	ip, r2
 8009efe:	f841 4b04 	str.w	r4, [r1], #4
 8009f02:	d8e7      	bhi.n	8009ed4 <__mdiff+0x5c>
 8009f04:	45bc      	cmp	ip, r7
 8009f06:	d304      	bcc.n	8009f12 <__mdiff+0x9a>
 8009f08:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009f0c:	b183      	cbz	r3, 8009f30 <__mdiff+0xb8>
 8009f0e:	6106      	str	r6, [r0, #16]
 8009f10:	e7c4      	b.n	8009e9c <__mdiff+0x24>
 8009f12:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009f16:	b2a2      	uxth	r2, r4
 8009f18:	4472      	add	r2, lr
 8009f1a:	1413      	asrs	r3, r2, #16
 8009f1c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009f20:	b292      	uxth	r2, r2
 8009f22:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009f26:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009f2a:	f841 2b04 	str.w	r2, [r1], #4
 8009f2e:	e7e9      	b.n	8009f04 <__mdiff+0x8c>
 8009f30:	3e01      	subs	r6, #1
 8009f32:	e7e9      	b.n	8009f08 <__mdiff+0x90>

08009f34 <__d2b>:
 8009f34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009f38:	461c      	mov	r4, r3
 8009f3a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009f3e:	2101      	movs	r1, #1
 8009f40:	4690      	mov	r8, r2
 8009f42:	f7ff fd6b 	bl	8009a1c <_Balloc>
 8009f46:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009f4a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009f4e:	4607      	mov	r7, r0
 8009f50:	bb34      	cbnz	r4, 8009fa0 <__d2b+0x6c>
 8009f52:	9201      	str	r2, [sp, #4]
 8009f54:	f1b8 0200 	subs.w	r2, r8, #0
 8009f58:	d027      	beq.n	8009faa <__d2b+0x76>
 8009f5a:	a802      	add	r0, sp, #8
 8009f5c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009f60:	f7ff fe01 	bl	8009b66 <__lo0bits>
 8009f64:	9900      	ldr	r1, [sp, #0]
 8009f66:	b1f0      	cbz	r0, 8009fa6 <__d2b+0x72>
 8009f68:	9a01      	ldr	r2, [sp, #4]
 8009f6a:	f1c0 0320 	rsb	r3, r0, #32
 8009f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f72:	430b      	orrs	r3, r1
 8009f74:	40c2      	lsrs	r2, r0
 8009f76:	617b      	str	r3, [r7, #20]
 8009f78:	9201      	str	r2, [sp, #4]
 8009f7a:	9b01      	ldr	r3, [sp, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	bf14      	ite	ne
 8009f80:	2102      	movne	r1, #2
 8009f82:	2101      	moveq	r1, #1
 8009f84:	61bb      	str	r3, [r7, #24]
 8009f86:	6139      	str	r1, [r7, #16]
 8009f88:	b1c4      	cbz	r4, 8009fbc <__d2b+0x88>
 8009f8a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009f8e:	4404      	add	r4, r0
 8009f90:	6034      	str	r4, [r6, #0]
 8009f92:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f96:	6028      	str	r0, [r5, #0]
 8009f98:	4638      	mov	r0, r7
 8009f9a:	b002      	add	sp, #8
 8009f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009fa4:	e7d5      	b.n	8009f52 <__d2b+0x1e>
 8009fa6:	6179      	str	r1, [r7, #20]
 8009fa8:	e7e7      	b.n	8009f7a <__d2b+0x46>
 8009faa:	a801      	add	r0, sp, #4
 8009fac:	f7ff fddb 	bl	8009b66 <__lo0bits>
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	9b01      	ldr	r3, [sp, #4]
 8009fb4:	6139      	str	r1, [r7, #16]
 8009fb6:	617b      	str	r3, [r7, #20]
 8009fb8:	3020      	adds	r0, #32
 8009fba:	e7e5      	b.n	8009f88 <__d2b+0x54>
 8009fbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fc0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009fc4:	6030      	str	r0, [r6, #0]
 8009fc6:	6918      	ldr	r0, [r3, #16]
 8009fc8:	f7ff fdae 	bl	8009b28 <__hi0bits>
 8009fcc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009fd0:	e7e1      	b.n	8009f96 <__d2b+0x62>

08009fd2 <_calloc_r>:
 8009fd2:	b538      	push	{r3, r4, r5, lr}
 8009fd4:	fb02 f401 	mul.w	r4, r2, r1
 8009fd8:	4621      	mov	r1, r4
 8009fda:	f000 f855 	bl	800a088 <_malloc_r>
 8009fde:	4605      	mov	r5, r0
 8009fe0:	b118      	cbz	r0, 8009fea <_calloc_r+0x18>
 8009fe2:	4622      	mov	r2, r4
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	f7fe f984 	bl	80082f2 <memset>
 8009fea:	4628      	mov	r0, r5
 8009fec:	bd38      	pop	{r3, r4, r5, pc}
	...

08009ff0 <_free_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	2900      	cmp	r1, #0
 8009ff6:	d043      	beq.n	800a080 <_free_r+0x90>
 8009ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ffc:	1f0c      	subs	r4, r1, #4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	bfb8      	it	lt
 800a002:	18e4      	addlt	r4, r4, r3
 800a004:	f000 fa22 	bl	800a44c <__malloc_lock>
 800a008:	4a1e      	ldr	r2, [pc, #120]	; (800a084 <_free_r+0x94>)
 800a00a:	6813      	ldr	r3, [r2, #0]
 800a00c:	4610      	mov	r0, r2
 800a00e:	b933      	cbnz	r3, 800a01e <_free_r+0x2e>
 800a010:	6063      	str	r3, [r4, #4]
 800a012:	6014      	str	r4, [r2, #0]
 800a014:	4628      	mov	r0, r5
 800a016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a01a:	f000 ba18 	b.w	800a44e <__malloc_unlock>
 800a01e:	42a3      	cmp	r3, r4
 800a020:	d90b      	bls.n	800a03a <_free_r+0x4a>
 800a022:	6821      	ldr	r1, [r4, #0]
 800a024:	1862      	adds	r2, r4, r1
 800a026:	4293      	cmp	r3, r2
 800a028:	bf01      	itttt	eq
 800a02a:	681a      	ldreq	r2, [r3, #0]
 800a02c:	685b      	ldreq	r3, [r3, #4]
 800a02e:	1852      	addeq	r2, r2, r1
 800a030:	6022      	streq	r2, [r4, #0]
 800a032:	6063      	str	r3, [r4, #4]
 800a034:	6004      	str	r4, [r0, #0]
 800a036:	e7ed      	b.n	800a014 <_free_r+0x24>
 800a038:	4613      	mov	r3, r2
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	b10a      	cbz	r2, 800a042 <_free_r+0x52>
 800a03e:	42a2      	cmp	r2, r4
 800a040:	d9fa      	bls.n	800a038 <_free_r+0x48>
 800a042:	6819      	ldr	r1, [r3, #0]
 800a044:	1858      	adds	r0, r3, r1
 800a046:	42a0      	cmp	r0, r4
 800a048:	d10b      	bne.n	800a062 <_free_r+0x72>
 800a04a:	6820      	ldr	r0, [r4, #0]
 800a04c:	4401      	add	r1, r0
 800a04e:	1858      	adds	r0, r3, r1
 800a050:	4282      	cmp	r2, r0
 800a052:	6019      	str	r1, [r3, #0]
 800a054:	d1de      	bne.n	800a014 <_free_r+0x24>
 800a056:	6810      	ldr	r0, [r2, #0]
 800a058:	6852      	ldr	r2, [r2, #4]
 800a05a:	4401      	add	r1, r0
 800a05c:	6019      	str	r1, [r3, #0]
 800a05e:	605a      	str	r2, [r3, #4]
 800a060:	e7d8      	b.n	800a014 <_free_r+0x24>
 800a062:	d902      	bls.n	800a06a <_free_r+0x7a>
 800a064:	230c      	movs	r3, #12
 800a066:	602b      	str	r3, [r5, #0]
 800a068:	e7d4      	b.n	800a014 <_free_r+0x24>
 800a06a:	6820      	ldr	r0, [r4, #0]
 800a06c:	1821      	adds	r1, r4, r0
 800a06e:	428a      	cmp	r2, r1
 800a070:	bf01      	itttt	eq
 800a072:	6811      	ldreq	r1, [r2, #0]
 800a074:	6852      	ldreq	r2, [r2, #4]
 800a076:	1809      	addeq	r1, r1, r0
 800a078:	6021      	streq	r1, [r4, #0]
 800a07a:	6062      	str	r2, [r4, #4]
 800a07c:	605c      	str	r4, [r3, #4]
 800a07e:	e7c9      	b.n	800a014 <_free_r+0x24>
 800a080:	bd38      	pop	{r3, r4, r5, pc}
 800a082:	bf00      	nop
 800a084:	20000244 	.word	0x20000244

0800a088 <_malloc_r>:
 800a088:	b570      	push	{r4, r5, r6, lr}
 800a08a:	1ccd      	adds	r5, r1, #3
 800a08c:	f025 0503 	bic.w	r5, r5, #3
 800a090:	3508      	adds	r5, #8
 800a092:	2d0c      	cmp	r5, #12
 800a094:	bf38      	it	cc
 800a096:	250c      	movcc	r5, #12
 800a098:	2d00      	cmp	r5, #0
 800a09a:	4606      	mov	r6, r0
 800a09c:	db01      	blt.n	800a0a2 <_malloc_r+0x1a>
 800a09e:	42a9      	cmp	r1, r5
 800a0a0:	d903      	bls.n	800a0aa <_malloc_r+0x22>
 800a0a2:	230c      	movs	r3, #12
 800a0a4:	6033      	str	r3, [r6, #0]
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	bd70      	pop	{r4, r5, r6, pc}
 800a0aa:	f000 f9cf 	bl	800a44c <__malloc_lock>
 800a0ae:	4a21      	ldr	r2, [pc, #132]	; (800a134 <_malloc_r+0xac>)
 800a0b0:	6814      	ldr	r4, [r2, #0]
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	b991      	cbnz	r1, 800a0dc <_malloc_r+0x54>
 800a0b6:	4c20      	ldr	r4, [pc, #128]	; (800a138 <_malloc_r+0xb0>)
 800a0b8:	6823      	ldr	r3, [r4, #0]
 800a0ba:	b91b      	cbnz	r3, 800a0c4 <_malloc_r+0x3c>
 800a0bc:	4630      	mov	r0, r6
 800a0be:	f000 f98f 	bl	800a3e0 <_sbrk_r>
 800a0c2:	6020      	str	r0, [r4, #0]
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f000 f98a 	bl	800a3e0 <_sbrk_r>
 800a0cc:	1c43      	adds	r3, r0, #1
 800a0ce:	d124      	bne.n	800a11a <_malloc_r+0x92>
 800a0d0:	230c      	movs	r3, #12
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	6033      	str	r3, [r6, #0]
 800a0d6:	f000 f9ba 	bl	800a44e <__malloc_unlock>
 800a0da:	e7e4      	b.n	800a0a6 <_malloc_r+0x1e>
 800a0dc:	680b      	ldr	r3, [r1, #0]
 800a0de:	1b5b      	subs	r3, r3, r5
 800a0e0:	d418      	bmi.n	800a114 <_malloc_r+0x8c>
 800a0e2:	2b0b      	cmp	r3, #11
 800a0e4:	d90f      	bls.n	800a106 <_malloc_r+0x7e>
 800a0e6:	600b      	str	r3, [r1, #0]
 800a0e8:	18cc      	adds	r4, r1, r3
 800a0ea:	50cd      	str	r5, [r1, r3]
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f000 f9ae 	bl	800a44e <__malloc_unlock>
 800a0f2:	f104 000b 	add.w	r0, r4, #11
 800a0f6:	1d23      	adds	r3, r4, #4
 800a0f8:	f020 0007 	bic.w	r0, r0, #7
 800a0fc:	1ac3      	subs	r3, r0, r3
 800a0fe:	d0d3      	beq.n	800a0a8 <_malloc_r+0x20>
 800a100:	425a      	negs	r2, r3
 800a102:	50e2      	str	r2, [r4, r3]
 800a104:	e7d0      	b.n	800a0a8 <_malloc_r+0x20>
 800a106:	684b      	ldr	r3, [r1, #4]
 800a108:	428c      	cmp	r4, r1
 800a10a:	bf16      	itet	ne
 800a10c:	6063      	strne	r3, [r4, #4]
 800a10e:	6013      	streq	r3, [r2, #0]
 800a110:	460c      	movne	r4, r1
 800a112:	e7eb      	b.n	800a0ec <_malloc_r+0x64>
 800a114:	460c      	mov	r4, r1
 800a116:	6849      	ldr	r1, [r1, #4]
 800a118:	e7cc      	b.n	800a0b4 <_malloc_r+0x2c>
 800a11a:	1cc4      	adds	r4, r0, #3
 800a11c:	f024 0403 	bic.w	r4, r4, #3
 800a120:	42a0      	cmp	r0, r4
 800a122:	d005      	beq.n	800a130 <_malloc_r+0xa8>
 800a124:	1a21      	subs	r1, r4, r0
 800a126:	4630      	mov	r0, r6
 800a128:	f000 f95a 	bl	800a3e0 <_sbrk_r>
 800a12c:	3001      	adds	r0, #1
 800a12e:	d0cf      	beq.n	800a0d0 <_malloc_r+0x48>
 800a130:	6025      	str	r5, [r4, #0]
 800a132:	e7db      	b.n	800a0ec <_malloc_r+0x64>
 800a134:	20000244 	.word	0x20000244
 800a138:	20000248 	.word	0x20000248

0800a13c <__ssputs_r>:
 800a13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a140:	688e      	ldr	r6, [r1, #8]
 800a142:	4682      	mov	sl, r0
 800a144:	429e      	cmp	r6, r3
 800a146:	460c      	mov	r4, r1
 800a148:	4690      	mov	r8, r2
 800a14a:	4699      	mov	r9, r3
 800a14c:	d837      	bhi.n	800a1be <__ssputs_r+0x82>
 800a14e:	898a      	ldrh	r2, [r1, #12]
 800a150:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a154:	d031      	beq.n	800a1ba <__ssputs_r+0x7e>
 800a156:	2302      	movs	r3, #2
 800a158:	6825      	ldr	r5, [r4, #0]
 800a15a:	6909      	ldr	r1, [r1, #16]
 800a15c:	1a6f      	subs	r7, r5, r1
 800a15e:	6965      	ldr	r5, [r4, #20]
 800a160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a164:	fb95 f5f3 	sdiv	r5, r5, r3
 800a168:	f109 0301 	add.w	r3, r9, #1
 800a16c:	443b      	add	r3, r7
 800a16e:	429d      	cmp	r5, r3
 800a170:	bf38      	it	cc
 800a172:	461d      	movcc	r5, r3
 800a174:	0553      	lsls	r3, r2, #21
 800a176:	d530      	bpl.n	800a1da <__ssputs_r+0x9e>
 800a178:	4629      	mov	r1, r5
 800a17a:	f7ff ff85 	bl	800a088 <_malloc_r>
 800a17e:	4606      	mov	r6, r0
 800a180:	b950      	cbnz	r0, 800a198 <__ssputs_r+0x5c>
 800a182:	230c      	movs	r3, #12
 800a184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a188:	f8ca 3000 	str.w	r3, [sl]
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a192:	81a3      	strh	r3, [r4, #12]
 800a194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a198:	463a      	mov	r2, r7
 800a19a:	6921      	ldr	r1, [r4, #16]
 800a19c:	f7fe f89e 	bl	80082dc <memcpy>
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1aa:	81a3      	strh	r3, [r4, #12]
 800a1ac:	6126      	str	r6, [r4, #16]
 800a1ae:	443e      	add	r6, r7
 800a1b0:	6026      	str	r6, [r4, #0]
 800a1b2:	464e      	mov	r6, r9
 800a1b4:	6165      	str	r5, [r4, #20]
 800a1b6:	1bed      	subs	r5, r5, r7
 800a1b8:	60a5      	str	r5, [r4, #8]
 800a1ba:	454e      	cmp	r6, r9
 800a1bc:	d900      	bls.n	800a1c0 <__ssputs_r+0x84>
 800a1be:	464e      	mov	r6, r9
 800a1c0:	4632      	mov	r2, r6
 800a1c2:	4641      	mov	r1, r8
 800a1c4:	6820      	ldr	r0, [r4, #0]
 800a1c6:	f000 f928 	bl	800a41a <memmove>
 800a1ca:	68a3      	ldr	r3, [r4, #8]
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	1b9b      	subs	r3, r3, r6
 800a1d0:	60a3      	str	r3, [r4, #8]
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	441e      	add	r6, r3
 800a1d6:	6026      	str	r6, [r4, #0]
 800a1d8:	e7dc      	b.n	800a194 <__ssputs_r+0x58>
 800a1da:	462a      	mov	r2, r5
 800a1dc:	f000 f938 	bl	800a450 <_realloc_r>
 800a1e0:	4606      	mov	r6, r0
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d1e2      	bne.n	800a1ac <__ssputs_r+0x70>
 800a1e6:	6921      	ldr	r1, [r4, #16]
 800a1e8:	4650      	mov	r0, sl
 800a1ea:	f7ff ff01 	bl	8009ff0 <_free_r>
 800a1ee:	e7c8      	b.n	800a182 <__ssputs_r+0x46>

0800a1f0 <_svfiprintf_r>:
 800a1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f4:	461d      	mov	r5, r3
 800a1f6:	898b      	ldrh	r3, [r1, #12]
 800a1f8:	b09d      	sub	sp, #116	; 0x74
 800a1fa:	061f      	lsls	r7, r3, #24
 800a1fc:	4680      	mov	r8, r0
 800a1fe:	460c      	mov	r4, r1
 800a200:	4616      	mov	r6, r2
 800a202:	d50f      	bpl.n	800a224 <_svfiprintf_r+0x34>
 800a204:	690b      	ldr	r3, [r1, #16]
 800a206:	b96b      	cbnz	r3, 800a224 <_svfiprintf_r+0x34>
 800a208:	2140      	movs	r1, #64	; 0x40
 800a20a:	f7ff ff3d 	bl	800a088 <_malloc_r>
 800a20e:	6020      	str	r0, [r4, #0]
 800a210:	6120      	str	r0, [r4, #16]
 800a212:	b928      	cbnz	r0, 800a220 <_svfiprintf_r+0x30>
 800a214:	230c      	movs	r3, #12
 800a216:	f8c8 3000 	str.w	r3, [r8]
 800a21a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a21e:	e0c8      	b.n	800a3b2 <_svfiprintf_r+0x1c2>
 800a220:	2340      	movs	r3, #64	; 0x40
 800a222:	6163      	str	r3, [r4, #20]
 800a224:	2300      	movs	r3, #0
 800a226:	9309      	str	r3, [sp, #36]	; 0x24
 800a228:	2320      	movs	r3, #32
 800a22a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a22e:	2330      	movs	r3, #48	; 0x30
 800a230:	f04f 0b01 	mov.w	fp, #1
 800a234:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a238:	9503      	str	r5, [sp, #12]
 800a23a:	4637      	mov	r7, r6
 800a23c:	463d      	mov	r5, r7
 800a23e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a242:	b10b      	cbz	r3, 800a248 <_svfiprintf_r+0x58>
 800a244:	2b25      	cmp	r3, #37	; 0x25
 800a246:	d13e      	bne.n	800a2c6 <_svfiprintf_r+0xd6>
 800a248:	ebb7 0a06 	subs.w	sl, r7, r6
 800a24c:	d00b      	beq.n	800a266 <_svfiprintf_r+0x76>
 800a24e:	4653      	mov	r3, sl
 800a250:	4632      	mov	r2, r6
 800a252:	4621      	mov	r1, r4
 800a254:	4640      	mov	r0, r8
 800a256:	f7ff ff71 	bl	800a13c <__ssputs_r>
 800a25a:	3001      	adds	r0, #1
 800a25c:	f000 80a4 	beq.w	800a3a8 <_svfiprintf_r+0x1b8>
 800a260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a262:	4453      	add	r3, sl
 800a264:	9309      	str	r3, [sp, #36]	; 0x24
 800a266:	783b      	ldrb	r3, [r7, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f000 809d 	beq.w	800a3a8 <_svfiprintf_r+0x1b8>
 800a26e:	2300      	movs	r3, #0
 800a270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a278:	9304      	str	r3, [sp, #16]
 800a27a:	9307      	str	r3, [sp, #28]
 800a27c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a280:	931a      	str	r3, [sp, #104]	; 0x68
 800a282:	462f      	mov	r7, r5
 800a284:	2205      	movs	r2, #5
 800a286:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a28a:	4850      	ldr	r0, [pc, #320]	; (800a3cc <_svfiprintf_r+0x1dc>)
 800a28c:	f7ff fbb8 	bl	8009a00 <memchr>
 800a290:	9b04      	ldr	r3, [sp, #16]
 800a292:	b9d0      	cbnz	r0, 800a2ca <_svfiprintf_r+0xda>
 800a294:	06d9      	lsls	r1, r3, #27
 800a296:	bf44      	itt	mi
 800a298:	2220      	movmi	r2, #32
 800a29a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a29e:	071a      	lsls	r2, r3, #28
 800a2a0:	bf44      	itt	mi
 800a2a2:	222b      	movmi	r2, #43	; 0x2b
 800a2a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a2a8:	782a      	ldrb	r2, [r5, #0]
 800a2aa:	2a2a      	cmp	r2, #42	; 0x2a
 800a2ac:	d015      	beq.n	800a2da <_svfiprintf_r+0xea>
 800a2ae:	462f      	mov	r7, r5
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	250a      	movs	r5, #10
 800a2b4:	9a07      	ldr	r2, [sp, #28]
 800a2b6:	4639      	mov	r1, r7
 800a2b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2bc:	3b30      	subs	r3, #48	; 0x30
 800a2be:	2b09      	cmp	r3, #9
 800a2c0:	d94d      	bls.n	800a35e <_svfiprintf_r+0x16e>
 800a2c2:	b1b8      	cbz	r0, 800a2f4 <_svfiprintf_r+0x104>
 800a2c4:	e00f      	b.n	800a2e6 <_svfiprintf_r+0xf6>
 800a2c6:	462f      	mov	r7, r5
 800a2c8:	e7b8      	b.n	800a23c <_svfiprintf_r+0x4c>
 800a2ca:	4a40      	ldr	r2, [pc, #256]	; (800a3cc <_svfiprintf_r+0x1dc>)
 800a2cc:	463d      	mov	r5, r7
 800a2ce:	1a80      	subs	r0, r0, r2
 800a2d0:	fa0b f000 	lsl.w	r0, fp, r0
 800a2d4:	4318      	orrs	r0, r3
 800a2d6:	9004      	str	r0, [sp, #16]
 800a2d8:	e7d3      	b.n	800a282 <_svfiprintf_r+0x92>
 800a2da:	9a03      	ldr	r2, [sp, #12]
 800a2dc:	1d11      	adds	r1, r2, #4
 800a2de:	6812      	ldr	r2, [r2, #0]
 800a2e0:	9103      	str	r1, [sp, #12]
 800a2e2:	2a00      	cmp	r2, #0
 800a2e4:	db01      	blt.n	800a2ea <_svfiprintf_r+0xfa>
 800a2e6:	9207      	str	r2, [sp, #28]
 800a2e8:	e004      	b.n	800a2f4 <_svfiprintf_r+0x104>
 800a2ea:	4252      	negs	r2, r2
 800a2ec:	f043 0302 	orr.w	r3, r3, #2
 800a2f0:	9207      	str	r2, [sp, #28]
 800a2f2:	9304      	str	r3, [sp, #16]
 800a2f4:	783b      	ldrb	r3, [r7, #0]
 800a2f6:	2b2e      	cmp	r3, #46	; 0x2e
 800a2f8:	d10c      	bne.n	800a314 <_svfiprintf_r+0x124>
 800a2fa:	787b      	ldrb	r3, [r7, #1]
 800a2fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a2fe:	d133      	bne.n	800a368 <_svfiprintf_r+0x178>
 800a300:	9b03      	ldr	r3, [sp, #12]
 800a302:	3702      	adds	r7, #2
 800a304:	1d1a      	adds	r2, r3, #4
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	9203      	str	r2, [sp, #12]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	bfb8      	it	lt
 800a30e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a312:	9305      	str	r3, [sp, #20]
 800a314:	4d2e      	ldr	r5, [pc, #184]	; (800a3d0 <_svfiprintf_r+0x1e0>)
 800a316:	2203      	movs	r2, #3
 800a318:	7839      	ldrb	r1, [r7, #0]
 800a31a:	4628      	mov	r0, r5
 800a31c:	f7ff fb70 	bl	8009a00 <memchr>
 800a320:	b138      	cbz	r0, 800a332 <_svfiprintf_r+0x142>
 800a322:	2340      	movs	r3, #64	; 0x40
 800a324:	1b40      	subs	r0, r0, r5
 800a326:	fa03 f000 	lsl.w	r0, r3, r0
 800a32a:	9b04      	ldr	r3, [sp, #16]
 800a32c:	3701      	adds	r7, #1
 800a32e:	4303      	orrs	r3, r0
 800a330:	9304      	str	r3, [sp, #16]
 800a332:	7839      	ldrb	r1, [r7, #0]
 800a334:	2206      	movs	r2, #6
 800a336:	4827      	ldr	r0, [pc, #156]	; (800a3d4 <_svfiprintf_r+0x1e4>)
 800a338:	1c7e      	adds	r6, r7, #1
 800a33a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a33e:	f7ff fb5f 	bl	8009a00 <memchr>
 800a342:	2800      	cmp	r0, #0
 800a344:	d038      	beq.n	800a3b8 <_svfiprintf_r+0x1c8>
 800a346:	4b24      	ldr	r3, [pc, #144]	; (800a3d8 <_svfiprintf_r+0x1e8>)
 800a348:	bb13      	cbnz	r3, 800a390 <_svfiprintf_r+0x1a0>
 800a34a:	9b03      	ldr	r3, [sp, #12]
 800a34c:	3307      	adds	r3, #7
 800a34e:	f023 0307 	bic.w	r3, r3, #7
 800a352:	3308      	adds	r3, #8
 800a354:	9303      	str	r3, [sp, #12]
 800a356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a358:	444b      	add	r3, r9
 800a35a:	9309      	str	r3, [sp, #36]	; 0x24
 800a35c:	e76d      	b.n	800a23a <_svfiprintf_r+0x4a>
 800a35e:	fb05 3202 	mla	r2, r5, r2, r3
 800a362:	2001      	movs	r0, #1
 800a364:	460f      	mov	r7, r1
 800a366:	e7a6      	b.n	800a2b6 <_svfiprintf_r+0xc6>
 800a368:	2300      	movs	r3, #0
 800a36a:	250a      	movs	r5, #10
 800a36c:	4619      	mov	r1, r3
 800a36e:	3701      	adds	r7, #1
 800a370:	9305      	str	r3, [sp, #20]
 800a372:	4638      	mov	r0, r7
 800a374:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a378:	3a30      	subs	r2, #48	; 0x30
 800a37a:	2a09      	cmp	r2, #9
 800a37c:	d903      	bls.n	800a386 <_svfiprintf_r+0x196>
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d0c8      	beq.n	800a314 <_svfiprintf_r+0x124>
 800a382:	9105      	str	r1, [sp, #20]
 800a384:	e7c6      	b.n	800a314 <_svfiprintf_r+0x124>
 800a386:	fb05 2101 	mla	r1, r5, r1, r2
 800a38a:	2301      	movs	r3, #1
 800a38c:	4607      	mov	r7, r0
 800a38e:	e7f0      	b.n	800a372 <_svfiprintf_r+0x182>
 800a390:	ab03      	add	r3, sp, #12
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	4622      	mov	r2, r4
 800a396:	4b11      	ldr	r3, [pc, #68]	; (800a3dc <_svfiprintf_r+0x1ec>)
 800a398:	a904      	add	r1, sp, #16
 800a39a:	4640      	mov	r0, r8
 800a39c:	f7fe f842 	bl	8008424 <_printf_float>
 800a3a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a3a4:	4681      	mov	r9, r0
 800a3a6:	d1d6      	bne.n	800a356 <_svfiprintf_r+0x166>
 800a3a8:	89a3      	ldrh	r3, [r4, #12]
 800a3aa:	065b      	lsls	r3, r3, #25
 800a3ac:	f53f af35 	bmi.w	800a21a <_svfiprintf_r+0x2a>
 800a3b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3b2:	b01d      	add	sp, #116	; 0x74
 800a3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b8:	ab03      	add	r3, sp, #12
 800a3ba:	9300      	str	r3, [sp, #0]
 800a3bc:	4622      	mov	r2, r4
 800a3be:	4b07      	ldr	r3, [pc, #28]	; (800a3dc <_svfiprintf_r+0x1ec>)
 800a3c0:	a904      	add	r1, sp, #16
 800a3c2:	4640      	mov	r0, r8
 800a3c4:	f7fe fada 	bl	800897c <_printf_i>
 800a3c8:	e7ea      	b.n	800a3a0 <_svfiprintf_r+0x1b0>
 800a3ca:	bf00      	nop
 800a3cc:	0800c99c 	.word	0x0800c99c
 800a3d0:	0800c9a2 	.word	0x0800c9a2
 800a3d4:	0800c9a6 	.word	0x0800c9a6
 800a3d8:	08008425 	.word	0x08008425
 800a3dc:	0800a13d 	.word	0x0800a13d

0800a3e0 <_sbrk_r>:
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	4c05      	ldr	r4, [pc, #20]	; (800a3fc <_sbrk_r+0x1c>)
 800a3e6:	4605      	mov	r5, r0
 800a3e8:	4608      	mov	r0, r1
 800a3ea:	6023      	str	r3, [r4, #0]
 800a3ec:	f7f9 fba2 	bl	8003b34 <_sbrk>
 800a3f0:	1c43      	adds	r3, r0, #1
 800a3f2:	d102      	bne.n	800a3fa <_sbrk_r+0x1a>
 800a3f4:	6823      	ldr	r3, [r4, #0]
 800a3f6:	b103      	cbz	r3, 800a3fa <_sbrk_r+0x1a>
 800a3f8:	602b      	str	r3, [r5, #0]
 800a3fa:	bd38      	pop	{r3, r4, r5, pc}
 800a3fc:	200004dc 	.word	0x200004dc

0800a400 <__ascii_wctomb>:
 800a400:	b149      	cbz	r1, 800a416 <__ascii_wctomb+0x16>
 800a402:	2aff      	cmp	r2, #255	; 0xff
 800a404:	bf8b      	itete	hi
 800a406:	238a      	movhi	r3, #138	; 0x8a
 800a408:	700a      	strbls	r2, [r1, #0]
 800a40a:	6003      	strhi	r3, [r0, #0]
 800a40c:	2001      	movls	r0, #1
 800a40e:	bf88      	it	hi
 800a410:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a414:	4770      	bx	lr
 800a416:	4608      	mov	r0, r1
 800a418:	4770      	bx	lr

0800a41a <memmove>:
 800a41a:	4288      	cmp	r0, r1
 800a41c:	b510      	push	{r4, lr}
 800a41e:	eb01 0302 	add.w	r3, r1, r2
 800a422:	d807      	bhi.n	800a434 <memmove+0x1a>
 800a424:	1e42      	subs	r2, r0, #1
 800a426:	4299      	cmp	r1, r3
 800a428:	d00a      	beq.n	800a440 <memmove+0x26>
 800a42a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a42e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a432:	e7f8      	b.n	800a426 <memmove+0xc>
 800a434:	4283      	cmp	r3, r0
 800a436:	d9f5      	bls.n	800a424 <memmove+0xa>
 800a438:	1881      	adds	r1, r0, r2
 800a43a:	1ad2      	subs	r2, r2, r3
 800a43c:	42d3      	cmn	r3, r2
 800a43e:	d100      	bne.n	800a442 <memmove+0x28>
 800a440:	bd10      	pop	{r4, pc}
 800a442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a446:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a44a:	e7f7      	b.n	800a43c <memmove+0x22>

0800a44c <__malloc_lock>:
 800a44c:	4770      	bx	lr

0800a44e <__malloc_unlock>:
 800a44e:	4770      	bx	lr

0800a450 <_realloc_r>:
 800a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a452:	4607      	mov	r7, r0
 800a454:	4614      	mov	r4, r2
 800a456:	460e      	mov	r6, r1
 800a458:	b921      	cbnz	r1, 800a464 <_realloc_r+0x14>
 800a45a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a45e:	4611      	mov	r1, r2
 800a460:	f7ff be12 	b.w	800a088 <_malloc_r>
 800a464:	b922      	cbnz	r2, 800a470 <_realloc_r+0x20>
 800a466:	f7ff fdc3 	bl	8009ff0 <_free_r>
 800a46a:	4625      	mov	r5, r4
 800a46c:	4628      	mov	r0, r5
 800a46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a470:	f000 f814 	bl	800a49c <_malloc_usable_size_r>
 800a474:	42a0      	cmp	r0, r4
 800a476:	d20f      	bcs.n	800a498 <_realloc_r+0x48>
 800a478:	4621      	mov	r1, r4
 800a47a:	4638      	mov	r0, r7
 800a47c:	f7ff fe04 	bl	800a088 <_malloc_r>
 800a480:	4605      	mov	r5, r0
 800a482:	2800      	cmp	r0, #0
 800a484:	d0f2      	beq.n	800a46c <_realloc_r+0x1c>
 800a486:	4631      	mov	r1, r6
 800a488:	4622      	mov	r2, r4
 800a48a:	f7fd ff27 	bl	80082dc <memcpy>
 800a48e:	4631      	mov	r1, r6
 800a490:	4638      	mov	r0, r7
 800a492:	f7ff fdad 	bl	8009ff0 <_free_r>
 800a496:	e7e9      	b.n	800a46c <_realloc_r+0x1c>
 800a498:	4635      	mov	r5, r6
 800a49a:	e7e7      	b.n	800a46c <_realloc_r+0x1c>

0800a49c <_malloc_usable_size_r>:
 800a49c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4a0:	1f18      	subs	r0, r3, #4
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	bfbc      	itt	lt
 800a4a6:	580b      	ldrlt	r3, [r1, r0]
 800a4a8:	18c0      	addlt	r0, r0, r3
 800a4aa:	4770      	bx	lr
 800a4ac:	0000      	movs	r0, r0
	...

0800a4b0 <floor>:
 800a4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800a4b8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800a4bc:	2e13      	cmp	r6, #19
 800a4be:	4607      	mov	r7, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	dc35      	bgt.n	800a534 <floor+0x84>
 800a4c8:	2e00      	cmp	r6, #0
 800a4ca:	da16      	bge.n	800a4fa <floor+0x4a>
 800a4cc:	a336      	add	r3, pc, #216	; (adr r3, 800a5a8 <floor+0xf8>)
 800a4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d2:	f7f5 fe4b 	bl	800016c <__adddf3>
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f7f6 fa8d 	bl	80009f8 <__aeabi_dcmpgt>
 800a4de:	b148      	cbz	r0, 800a4f4 <floor+0x44>
 800a4e0:	2c00      	cmp	r4, #0
 800a4e2:	da5b      	bge.n	800a59c <floor+0xec>
 800a4e4:	2500      	movs	r5, #0
 800a4e6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a4ea:	4a31      	ldr	r2, [pc, #196]	; (800a5b0 <floor+0x100>)
 800a4ec:	433b      	orrs	r3, r7
 800a4ee:	42ab      	cmp	r3, r5
 800a4f0:	bf18      	it	ne
 800a4f2:	4614      	movne	r4, r2
 800a4f4:	4623      	mov	r3, r4
 800a4f6:	462f      	mov	r7, r5
 800a4f8:	e026      	b.n	800a548 <floor+0x98>
 800a4fa:	4a2e      	ldr	r2, [pc, #184]	; (800a5b4 <floor+0x104>)
 800a4fc:	fa42 f806 	asr.w	r8, r2, r6
 800a500:	ea01 0208 	and.w	r2, r1, r8
 800a504:	4302      	orrs	r2, r0
 800a506:	d01f      	beq.n	800a548 <floor+0x98>
 800a508:	a327      	add	r3, pc, #156	; (adr r3, 800a5a8 <floor+0xf8>)
 800a50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50e:	f7f5 fe2d 	bl	800016c <__adddf3>
 800a512:	2200      	movs	r2, #0
 800a514:	2300      	movs	r3, #0
 800a516:	f7f6 fa6f 	bl	80009f8 <__aeabi_dcmpgt>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d0ea      	beq.n	800a4f4 <floor+0x44>
 800a51e:	2c00      	cmp	r4, #0
 800a520:	bfbe      	ittt	lt
 800a522:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a526:	fa43 f606 	asrlt.w	r6, r3, r6
 800a52a:	19a4      	addlt	r4, r4, r6
 800a52c:	ea24 0408 	bic.w	r4, r4, r8
 800a530:	2500      	movs	r5, #0
 800a532:	e7df      	b.n	800a4f4 <floor+0x44>
 800a534:	2e33      	cmp	r6, #51	; 0x33
 800a536:	dd0b      	ble.n	800a550 <floor+0xa0>
 800a538:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a53c:	d104      	bne.n	800a548 <floor+0x98>
 800a53e:	4602      	mov	r2, r0
 800a540:	f7f5 fe14 	bl	800016c <__adddf3>
 800a544:	4607      	mov	r7, r0
 800a546:	460b      	mov	r3, r1
 800a548:	4638      	mov	r0, r7
 800a54a:	4619      	mov	r1, r3
 800a54c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a554:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a558:	fa22 f808 	lsr.w	r8, r2, r8
 800a55c:	ea18 0f00 	tst.w	r8, r0
 800a560:	d0f2      	beq.n	800a548 <floor+0x98>
 800a562:	a311      	add	r3, pc, #68	; (adr r3, 800a5a8 <floor+0xf8>)
 800a564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a568:	f7f5 fe00 	bl	800016c <__adddf3>
 800a56c:	2200      	movs	r2, #0
 800a56e:	2300      	movs	r3, #0
 800a570:	f7f6 fa42 	bl	80009f8 <__aeabi_dcmpgt>
 800a574:	2800      	cmp	r0, #0
 800a576:	d0bd      	beq.n	800a4f4 <floor+0x44>
 800a578:	2c00      	cmp	r4, #0
 800a57a:	da02      	bge.n	800a582 <floor+0xd2>
 800a57c:	2e14      	cmp	r6, #20
 800a57e:	d103      	bne.n	800a588 <floor+0xd8>
 800a580:	3401      	adds	r4, #1
 800a582:	ea25 0508 	bic.w	r5, r5, r8
 800a586:	e7b5      	b.n	800a4f4 <floor+0x44>
 800a588:	2301      	movs	r3, #1
 800a58a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a58e:	fa03 f606 	lsl.w	r6, r3, r6
 800a592:	4435      	add	r5, r6
 800a594:	42bd      	cmp	r5, r7
 800a596:	bf38      	it	cc
 800a598:	18e4      	addcc	r4, r4, r3
 800a59a:	e7f2      	b.n	800a582 <floor+0xd2>
 800a59c:	2500      	movs	r5, #0
 800a59e:	462c      	mov	r4, r5
 800a5a0:	e7a8      	b.n	800a4f4 <floor+0x44>
 800a5a2:	bf00      	nop
 800a5a4:	f3af 8000 	nop.w
 800a5a8:	8800759c 	.word	0x8800759c
 800a5ac:	7e37e43c 	.word	0x7e37e43c
 800a5b0:	bff00000 	.word	0xbff00000
 800a5b4:	000fffff 	.word	0x000fffff

0800a5b8 <round>:
 800a5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ba:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a5be:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800a5c2:	2c13      	cmp	r4, #19
 800a5c4:	4606      	mov	r6, r0
 800a5c6:	460d      	mov	r5, r1
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	468c      	mov	ip, r1
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	dc17      	bgt.n	800a600 <round+0x48>
 800a5d0:	2c00      	cmp	r4, #0
 800a5d2:	da09      	bge.n	800a5e8 <round+0x30>
 800a5d4:	3401      	adds	r4, #1
 800a5d6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a5da:	d103      	bne.n	800a5e4 <round+0x2c>
 800a5dc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a5e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	e028      	b.n	800a63a <round+0x82>
 800a5e8:	4915      	ldr	r1, [pc, #84]	; (800a640 <round+0x88>)
 800a5ea:	4121      	asrs	r1, r4
 800a5ec:	420d      	tst	r5, r1
 800a5ee:	d100      	bne.n	800a5f2 <round+0x3a>
 800a5f0:	b178      	cbz	r0, 800a612 <round+0x5a>
 800a5f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a5f6:	4123      	asrs	r3, r4
 800a5f8:	4463      	add	r3, ip
 800a5fa:	ea23 0301 	bic.w	r3, r3, r1
 800a5fe:	e7f1      	b.n	800a5e4 <round+0x2c>
 800a600:	2c33      	cmp	r4, #51	; 0x33
 800a602:	dd09      	ble.n	800a618 <round+0x60>
 800a604:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a608:	d103      	bne.n	800a612 <round+0x5a>
 800a60a:	f7f5 fdaf 	bl	800016c <__adddf3>
 800a60e:	4606      	mov	r6, r0
 800a610:	460d      	mov	r5, r1
 800a612:	4630      	mov	r0, r6
 800a614:	4629      	mov	r1, r5
 800a616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a61c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a620:	40f8      	lsrs	r0, r7
 800a622:	4206      	tst	r6, r0
 800a624:	d0f5      	beq.n	800a612 <round+0x5a>
 800a626:	2101      	movs	r1, #1
 800a628:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a62c:	fa01 f404 	lsl.w	r4, r1, r4
 800a630:	1932      	adds	r2, r6, r4
 800a632:	bf28      	it	cs
 800a634:	185b      	addcs	r3, r3, r1
 800a636:	ea22 0200 	bic.w	r2, r2, r0
 800a63a:	4619      	mov	r1, r3
 800a63c:	4610      	mov	r0, r2
 800a63e:	e7e6      	b.n	800a60e <round+0x56>
 800a640:	000fffff 	.word	0x000fffff

0800a644 <sin>:
 800a644:	b530      	push	{r4, r5, lr}
 800a646:	4a1a      	ldr	r2, [pc, #104]	; (800a6b0 <sin+0x6c>)
 800a648:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a64c:	4293      	cmp	r3, r2
 800a64e:	b087      	sub	sp, #28
 800a650:	dc06      	bgt.n	800a660 <sin+0x1c>
 800a652:	2300      	movs	r3, #0
 800a654:	2200      	movs	r2, #0
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	2300      	movs	r3, #0
 800a65a:	f001 fcf9 	bl	800c050 <__kernel_sin>
 800a65e:	e006      	b.n	800a66e <sin+0x2a>
 800a660:	4a14      	ldr	r2, [pc, #80]	; (800a6b4 <sin+0x70>)
 800a662:	4293      	cmp	r3, r2
 800a664:	dd05      	ble.n	800a672 <sin+0x2e>
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	f7f5 fd7d 	bl	8000168 <__aeabi_dsub>
 800a66e:	b007      	add	sp, #28
 800a670:	bd30      	pop	{r4, r5, pc}
 800a672:	aa02      	add	r2, sp, #8
 800a674:	f000 fe48 	bl	800b308 <__ieee754_rem_pio2>
 800a678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a67c:	f000 0403 	and.w	r4, r0, #3
 800a680:	2c01      	cmp	r4, #1
 800a682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a686:	d005      	beq.n	800a694 <sin+0x50>
 800a688:	2c02      	cmp	r4, #2
 800a68a:	d006      	beq.n	800a69a <sin+0x56>
 800a68c:	b964      	cbnz	r4, 800a6a8 <sin+0x64>
 800a68e:	2401      	movs	r4, #1
 800a690:	9400      	str	r4, [sp, #0]
 800a692:	e7e2      	b.n	800a65a <sin+0x16>
 800a694:	f001 f8d4 	bl	800b840 <__kernel_cos>
 800a698:	e7e9      	b.n	800a66e <sin+0x2a>
 800a69a:	2401      	movs	r4, #1
 800a69c:	9400      	str	r4, [sp, #0]
 800a69e:	f001 fcd7 	bl	800c050 <__kernel_sin>
 800a6a2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a6a6:	e7e2      	b.n	800a66e <sin+0x2a>
 800a6a8:	f001 f8ca 	bl	800b840 <__kernel_cos>
 800a6ac:	e7f9      	b.n	800a6a2 <sin+0x5e>
 800a6ae:	bf00      	nop
 800a6b0:	3fe921fb 	.word	0x3fe921fb
 800a6b4:	7fefffff 	.word	0x7fefffff

0800a6b8 <acos>:
 800a6b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6bc:	b08b      	sub	sp, #44	; 0x2c
 800a6be:	4604      	mov	r4, r0
 800a6c0:	460d      	mov	r5, r1
 800a6c2:	f000 f8f9 	bl	800a8b8 <__ieee754_acos>
 800a6c6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800a75c <acos+0xa4>
 800a6ca:	4606      	mov	r6, r0
 800a6cc:	f998 3000 	ldrsb.w	r3, [r8]
 800a6d0:	460f      	mov	r7, r1
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	d036      	beq.n	800a744 <acos+0x8c>
 800a6d6:	4622      	mov	r2, r4
 800a6d8:	462b      	mov	r3, r5
 800a6da:	4620      	mov	r0, r4
 800a6dc:	4629      	mov	r1, r5
 800a6de:	f7f6 f995 	bl	8000a0c <__aeabi_dcmpun>
 800a6e2:	4681      	mov	r9, r0
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d12d      	bne.n	800a744 <acos+0x8c>
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	f001 fef2 	bl	800c4d4 <fabs>
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	4b17      	ldr	r3, [pc, #92]	; (800a750 <acos+0x98>)
 800a6f4:	f7f6 f980 	bl	80009f8 <__aeabi_dcmpgt>
 800a6f8:	b320      	cbz	r0, 800a744 <acos+0x8c>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	4b15      	ldr	r3, [pc, #84]	; (800a754 <acos+0x9c>)
 800a700:	4815      	ldr	r0, [pc, #84]	; (800a758 <acos+0xa0>)
 800a702:	9301      	str	r3, [sp, #4]
 800a704:	f8cd 9020 	str.w	r9, [sp, #32]
 800a708:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a70c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a710:	f001 fee6 	bl	800c4e0 <nan>
 800a714:	f998 3000 	ldrsb.w	r3, [r8]
 800a718:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d104      	bne.n	800a72a <acos+0x72>
 800a720:	f7fd fdb2 	bl	8008288 <__errno>
 800a724:	2321      	movs	r3, #33	; 0x21
 800a726:	6003      	str	r3, [r0, #0]
 800a728:	e004      	b.n	800a734 <acos+0x7c>
 800a72a:	4668      	mov	r0, sp
 800a72c:	f001 fed6 	bl	800c4dc <matherr>
 800a730:	2800      	cmp	r0, #0
 800a732:	d0f5      	beq.n	800a720 <acos+0x68>
 800a734:	9b08      	ldr	r3, [sp, #32]
 800a736:	b11b      	cbz	r3, 800a740 <acos+0x88>
 800a738:	f7fd fda6 	bl	8008288 <__errno>
 800a73c:	9b08      	ldr	r3, [sp, #32]
 800a73e:	6003      	str	r3, [r0, #0]
 800a740:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800a744:	4630      	mov	r0, r6
 800a746:	4639      	mov	r1, r7
 800a748:	b00b      	add	sp, #44	; 0x2c
 800a74a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a74e:	bf00      	nop
 800a750:	3ff00000 	.word	0x3ff00000
 800a754:	0800caae 	.word	0x0800caae
 800a758:	0800c9a1 	.word	0x0800c9a1
 800a75c:	2000020c 	.word	0x2000020c

0800a760 <asin>:
 800a760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a764:	b08b      	sub	sp, #44	; 0x2c
 800a766:	4604      	mov	r4, r0
 800a768:	460d      	mov	r5, r1
 800a76a:	f000 faf1 	bl	800ad50 <__ieee754_asin>
 800a76e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800a804 <asin+0xa4>
 800a772:	4606      	mov	r6, r0
 800a774:	f998 3000 	ldrsb.w	r3, [r8]
 800a778:	460f      	mov	r7, r1
 800a77a:	3301      	adds	r3, #1
 800a77c:	d036      	beq.n	800a7ec <asin+0x8c>
 800a77e:	4622      	mov	r2, r4
 800a780:	462b      	mov	r3, r5
 800a782:	4620      	mov	r0, r4
 800a784:	4629      	mov	r1, r5
 800a786:	f7f6 f941 	bl	8000a0c <__aeabi_dcmpun>
 800a78a:	4681      	mov	r9, r0
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d12d      	bne.n	800a7ec <asin+0x8c>
 800a790:	4620      	mov	r0, r4
 800a792:	4629      	mov	r1, r5
 800a794:	f001 fe9e 	bl	800c4d4 <fabs>
 800a798:	2200      	movs	r2, #0
 800a79a:	4b17      	ldr	r3, [pc, #92]	; (800a7f8 <asin+0x98>)
 800a79c:	f7f6 f92c 	bl	80009f8 <__aeabi_dcmpgt>
 800a7a0:	b320      	cbz	r0, 800a7ec <asin+0x8c>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	4b15      	ldr	r3, [pc, #84]	; (800a7fc <asin+0x9c>)
 800a7a8:	4815      	ldr	r0, [pc, #84]	; (800a800 <asin+0xa0>)
 800a7aa:	9301      	str	r3, [sp, #4]
 800a7ac:	f8cd 9020 	str.w	r9, [sp, #32]
 800a7b0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a7b4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a7b8:	f001 fe92 	bl	800c4e0 <nan>
 800a7bc:	f998 3000 	ldrsb.w	r3, [r8]
 800a7c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	d104      	bne.n	800a7d2 <asin+0x72>
 800a7c8:	f7fd fd5e 	bl	8008288 <__errno>
 800a7cc:	2321      	movs	r3, #33	; 0x21
 800a7ce:	6003      	str	r3, [r0, #0]
 800a7d0:	e004      	b.n	800a7dc <asin+0x7c>
 800a7d2:	4668      	mov	r0, sp
 800a7d4:	f001 fe82 	bl	800c4dc <matherr>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d0f5      	beq.n	800a7c8 <asin+0x68>
 800a7dc:	9b08      	ldr	r3, [sp, #32]
 800a7de:	b11b      	cbz	r3, 800a7e8 <asin+0x88>
 800a7e0:	f7fd fd52 	bl	8008288 <__errno>
 800a7e4:	9b08      	ldr	r3, [sp, #32]
 800a7e6:	6003      	str	r3, [r0, #0]
 800a7e8:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	4639      	mov	r1, r7
 800a7f0:	b00b      	add	sp, #44	; 0x2c
 800a7f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7f6:	bf00      	nop
 800a7f8:	3ff00000 	.word	0x3ff00000
 800a7fc:	0800cab3 	.word	0x0800cab3
 800a800:	0800c9a1 	.word	0x0800c9a1
 800a804:	2000020c 	.word	0x2000020c

0800a808 <atan2>:
 800a808:	f000 bc9e 	b.w	800b148 <__ieee754_atan2>

0800a80c <sqrt>:
 800a80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a810:	b08b      	sub	sp, #44	; 0x2c
 800a812:	4604      	mov	r4, r0
 800a814:	460d      	mov	r5, r1
 800a816:	f000 ff67 	bl	800b6e8 <__ieee754_sqrt>
 800a81a:	4b24      	ldr	r3, [pc, #144]	; (800a8ac <sqrt+0xa0>)
 800a81c:	4680      	mov	r8, r0
 800a81e:	f993 a000 	ldrsb.w	sl, [r3]
 800a822:	4689      	mov	r9, r1
 800a824:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a828:	d02b      	beq.n	800a882 <sqrt+0x76>
 800a82a:	4622      	mov	r2, r4
 800a82c:	462b      	mov	r3, r5
 800a82e:	4620      	mov	r0, r4
 800a830:	4629      	mov	r1, r5
 800a832:	f7f6 f8eb 	bl	8000a0c <__aeabi_dcmpun>
 800a836:	4683      	mov	fp, r0
 800a838:	bb18      	cbnz	r0, 800a882 <sqrt+0x76>
 800a83a:	2600      	movs	r6, #0
 800a83c:	2700      	movs	r7, #0
 800a83e:	4632      	mov	r2, r6
 800a840:	463b      	mov	r3, r7
 800a842:	4620      	mov	r0, r4
 800a844:	4629      	mov	r1, r5
 800a846:	f7f6 f8b9 	bl	80009bc <__aeabi_dcmplt>
 800a84a:	b1d0      	cbz	r0, 800a882 <sqrt+0x76>
 800a84c:	2301      	movs	r3, #1
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	4b17      	ldr	r3, [pc, #92]	; (800a8b0 <sqrt+0xa4>)
 800a852:	f8cd b020 	str.w	fp, [sp, #32]
 800a856:	9301      	str	r3, [sp, #4]
 800a858:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a85c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a860:	f1ba 0f00 	cmp.w	sl, #0
 800a864:	d112      	bne.n	800a88c <sqrt+0x80>
 800a866:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a86a:	4668      	mov	r0, sp
 800a86c:	f001 fe36 	bl	800c4dc <matherr>
 800a870:	b1b8      	cbz	r0, 800a8a2 <sqrt+0x96>
 800a872:	9b08      	ldr	r3, [sp, #32]
 800a874:	b11b      	cbz	r3, 800a87e <sqrt+0x72>
 800a876:	f7fd fd07 	bl	8008288 <__errno>
 800a87a:	9b08      	ldr	r3, [sp, #32]
 800a87c:	6003      	str	r3, [r0, #0]
 800a87e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800a882:	4640      	mov	r0, r8
 800a884:	4649      	mov	r1, r9
 800a886:	b00b      	add	sp, #44	; 0x2c
 800a888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88c:	4632      	mov	r2, r6
 800a88e:	463b      	mov	r3, r7
 800a890:	4630      	mov	r0, r6
 800a892:	4639      	mov	r1, r7
 800a894:	f7f5 ff4a 	bl	800072c <__aeabi_ddiv>
 800a898:	f1ba 0f02 	cmp.w	sl, #2
 800a89c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a8a0:	d1e3      	bne.n	800a86a <sqrt+0x5e>
 800a8a2:	f7fd fcf1 	bl	8008288 <__errno>
 800a8a6:	2321      	movs	r3, #33	; 0x21
 800a8a8:	6003      	str	r3, [r0, #0]
 800a8aa:	e7e2      	b.n	800a872 <sqrt+0x66>
 800a8ac:	2000020c 	.word	0x2000020c
 800a8b0:	0800cab8 	.word	0x0800cab8
 800a8b4:	00000000 	.word	0x00000000

0800a8b8 <__ieee754_acos>:
 800a8b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8bc:	4cb2      	ldr	r4, [pc, #712]	; (800ab88 <__ieee754_acos+0x2d0>)
 800a8be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a8c2:	42a3      	cmp	r3, r4
 800a8c4:	4607      	mov	r7, r0
 800a8c6:	460e      	mov	r6, r1
 800a8c8:	dd16      	ble.n	800a8f8 <__ieee754_acos+0x40>
 800a8ca:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800a8ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a8d2:	4303      	orrs	r3, r0
 800a8d4:	d107      	bne.n	800a8e6 <__ieee754_acos+0x2e>
 800a8d6:	2900      	cmp	r1, #0
 800a8d8:	f300 8202 	bgt.w	800ace0 <__ieee754_acos+0x428>
 800a8dc:	a190      	add	r1, pc, #576	; (adr r1, 800ab20 <__ieee754_acos+0x268>)
 800a8de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	f7f5 fc3d 	bl	8000168 <__aeabi_dsub>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	f7f5 ff1b 	bl	800072c <__aeabi_ddiv>
 800a8f6:	e7f4      	b.n	800a8e2 <__ieee754_acos+0x2a>
 800a8f8:	4ca4      	ldr	r4, [pc, #656]	; (800ab8c <__ieee754_acos+0x2d4>)
 800a8fa:	42a3      	cmp	r3, r4
 800a8fc:	f300 8083 	bgt.w	800aa06 <__ieee754_acos+0x14e>
 800a900:	4aa3      	ldr	r2, [pc, #652]	; (800ab90 <__ieee754_acos+0x2d8>)
 800a902:	4293      	cmp	r3, r2
 800a904:	f340 81ef 	ble.w	800ace6 <__ieee754_acos+0x42e>
 800a908:	4602      	mov	r2, r0
 800a90a:	460b      	mov	r3, r1
 800a90c:	f7f5 fde4 	bl	80004d8 <__aeabi_dmul>
 800a910:	a385      	add	r3, pc, #532	; (adr r3, 800ab28 <__ieee754_acos+0x270>)
 800a912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a916:	4604      	mov	r4, r0
 800a918:	460d      	mov	r5, r1
 800a91a:	f7f5 fddd 	bl	80004d8 <__aeabi_dmul>
 800a91e:	a384      	add	r3, pc, #528	; (adr r3, 800ab30 <__ieee754_acos+0x278>)
 800a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a924:	f7f5 fc22 	bl	800016c <__adddf3>
 800a928:	4622      	mov	r2, r4
 800a92a:	462b      	mov	r3, r5
 800a92c:	f7f5 fdd4 	bl	80004d8 <__aeabi_dmul>
 800a930:	a381      	add	r3, pc, #516	; (adr r3, 800ab38 <__ieee754_acos+0x280>)
 800a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a936:	f7f5 fc17 	bl	8000168 <__aeabi_dsub>
 800a93a:	4622      	mov	r2, r4
 800a93c:	462b      	mov	r3, r5
 800a93e:	f7f5 fdcb 	bl	80004d8 <__aeabi_dmul>
 800a942:	a37f      	add	r3, pc, #508	; (adr r3, 800ab40 <__ieee754_acos+0x288>)
 800a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a948:	f7f5 fc10 	bl	800016c <__adddf3>
 800a94c:	4622      	mov	r2, r4
 800a94e:	462b      	mov	r3, r5
 800a950:	f7f5 fdc2 	bl	80004d8 <__aeabi_dmul>
 800a954:	a37c      	add	r3, pc, #496	; (adr r3, 800ab48 <__ieee754_acos+0x290>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	f7f5 fc05 	bl	8000168 <__aeabi_dsub>
 800a95e:	4622      	mov	r2, r4
 800a960:	462b      	mov	r3, r5
 800a962:	f7f5 fdb9 	bl	80004d8 <__aeabi_dmul>
 800a966:	a37a      	add	r3, pc, #488	; (adr r3, 800ab50 <__ieee754_acos+0x298>)
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	f7f5 fbfe 	bl	800016c <__adddf3>
 800a970:	4622      	mov	r2, r4
 800a972:	462b      	mov	r3, r5
 800a974:	f7f5 fdb0 	bl	80004d8 <__aeabi_dmul>
 800a978:	a377      	add	r3, pc, #476	; (adr r3, 800ab58 <__ieee754_acos+0x2a0>)
 800a97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97e:	4680      	mov	r8, r0
 800a980:	4689      	mov	r9, r1
 800a982:	4620      	mov	r0, r4
 800a984:	4629      	mov	r1, r5
 800a986:	f7f5 fda7 	bl	80004d8 <__aeabi_dmul>
 800a98a:	a375      	add	r3, pc, #468	; (adr r3, 800ab60 <__ieee754_acos+0x2a8>)
 800a98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a990:	f7f5 fbea 	bl	8000168 <__aeabi_dsub>
 800a994:	4622      	mov	r2, r4
 800a996:	462b      	mov	r3, r5
 800a998:	f7f5 fd9e 	bl	80004d8 <__aeabi_dmul>
 800a99c:	a372      	add	r3, pc, #456	; (adr r3, 800ab68 <__ieee754_acos+0x2b0>)
 800a99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a2:	f7f5 fbe3 	bl	800016c <__adddf3>
 800a9a6:	4622      	mov	r2, r4
 800a9a8:	462b      	mov	r3, r5
 800a9aa:	f7f5 fd95 	bl	80004d8 <__aeabi_dmul>
 800a9ae:	a370      	add	r3, pc, #448	; (adr r3, 800ab70 <__ieee754_acos+0x2b8>)
 800a9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b4:	f7f5 fbd8 	bl	8000168 <__aeabi_dsub>
 800a9b8:	4622      	mov	r2, r4
 800a9ba:	462b      	mov	r3, r5
 800a9bc:	f7f5 fd8c 	bl	80004d8 <__aeabi_dmul>
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	4b74      	ldr	r3, [pc, #464]	; (800ab94 <__ieee754_acos+0x2dc>)
 800a9c4:	f7f5 fbd2 	bl	800016c <__adddf3>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	4640      	mov	r0, r8
 800a9ce:	4649      	mov	r1, r9
 800a9d0:	f7f5 feac 	bl	800072c <__aeabi_ddiv>
 800a9d4:	463a      	mov	r2, r7
 800a9d6:	4633      	mov	r3, r6
 800a9d8:	f7f5 fd7e 	bl	80004d8 <__aeabi_dmul>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	a165      	add	r1, pc, #404	; (adr r1, 800ab78 <__ieee754_acos+0x2c0>)
 800a9e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9e6:	f7f5 fbbf 	bl	8000168 <__aeabi_dsub>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	4638      	mov	r0, r7
 800a9f0:	4631      	mov	r1, r6
 800a9f2:	f7f5 fbb9 	bl	8000168 <__aeabi_dsub>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	a161      	add	r1, pc, #388	; (adr r1, 800ab80 <__ieee754_acos+0x2c8>)
 800a9fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa00:	f7f5 fbb2 	bl	8000168 <__aeabi_dsub>
 800aa04:	e76d      	b.n	800a8e2 <__ieee754_acos+0x2a>
 800aa06:	2900      	cmp	r1, #0
 800aa08:	f280 80c8 	bge.w	800ab9c <__ieee754_acos+0x2e4>
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	4b61      	ldr	r3, [pc, #388]	; (800ab94 <__ieee754_acos+0x2dc>)
 800aa10:	f7f5 fbac 	bl	800016c <__adddf3>
 800aa14:	2200      	movs	r2, #0
 800aa16:	4b60      	ldr	r3, [pc, #384]	; (800ab98 <__ieee754_acos+0x2e0>)
 800aa18:	f7f5 fd5e 	bl	80004d8 <__aeabi_dmul>
 800aa1c:	a342      	add	r3, pc, #264	; (adr r3, 800ab28 <__ieee754_acos+0x270>)
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	4604      	mov	r4, r0
 800aa24:	460d      	mov	r5, r1
 800aa26:	f7f5 fd57 	bl	80004d8 <__aeabi_dmul>
 800aa2a:	a341      	add	r3, pc, #260	; (adr r3, 800ab30 <__ieee754_acos+0x278>)
 800aa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa30:	f7f5 fb9c 	bl	800016c <__adddf3>
 800aa34:	4622      	mov	r2, r4
 800aa36:	462b      	mov	r3, r5
 800aa38:	f7f5 fd4e 	bl	80004d8 <__aeabi_dmul>
 800aa3c:	a33e      	add	r3, pc, #248	; (adr r3, 800ab38 <__ieee754_acos+0x280>)
 800aa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa42:	f7f5 fb91 	bl	8000168 <__aeabi_dsub>
 800aa46:	4622      	mov	r2, r4
 800aa48:	462b      	mov	r3, r5
 800aa4a:	f7f5 fd45 	bl	80004d8 <__aeabi_dmul>
 800aa4e:	a33c      	add	r3, pc, #240	; (adr r3, 800ab40 <__ieee754_acos+0x288>)
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	f7f5 fb8a 	bl	800016c <__adddf3>
 800aa58:	4622      	mov	r2, r4
 800aa5a:	462b      	mov	r3, r5
 800aa5c:	f7f5 fd3c 	bl	80004d8 <__aeabi_dmul>
 800aa60:	a339      	add	r3, pc, #228	; (adr r3, 800ab48 <__ieee754_acos+0x290>)
 800aa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa66:	f7f5 fb7f 	bl	8000168 <__aeabi_dsub>
 800aa6a:	4622      	mov	r2, r4
 800aa6c:	462b      	mov	r3, r5
 800aa6e:	f7f5 fd33 	bl	80004d8 <__aeabi_dmul>
 800aa72:	a337      	add	r3, pc, #220	; (adr r3, 800ab50 <__ieee754_acos+0x298>)
 800aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa78:	f7f5 fb78 	bl	800016c <__adddf3>
 800aa7c:	4622      	mov	r2, r4
 800aa7e:	462b      	mov	r3, r5
 800aa80:	f7f5 fd2a 	bl	80004d8 <__aeabi_dmul>
 800aa84:	4680      	mov	r8, r0
 800aa86:	4689      	mov	r9, r1
 800aa88:	4620      	mov	r0, r4
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	f000 fe2c 	bl	800b6e8 <__ieee754_sqrt>
 800aa90:	a331      	add	r3, pc, #196	; (adr r3, 800ab58 <__ieee754_acos+0x2a0>)
 800aa92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa96:	4606      	mov	r6, r0
 800aa98:	460f      	mov	r7, r1
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	4629      	mov	r1, r5
 800aa9e:	f7f5 fd1b 	bl	80004d8 <__aeabi_dmul>
 800aaa2:	a32f      	add	r3, pc, #188	; (adr r3, 800ab60 <__ieee754_acos+0x2a8>)
 800aaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa8:	f7f5 fb5e 	bl	8000168 <__aeabi_dsub>
 800aaac:	4622      	mov	r2, r4
 800aaae:	462b      	mov	r3, r5
 800aab0:	f7f5 fd12 	bl	80004d8 <__aeabi_dmul>
 800aab4:	a32c      	add	r3, pc, #176	; (adr r3, 800ab68 <__ieee754_acos+0x2b0>)
 800aab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaba:	f7f5 fb57 	bl	800016c <__adddf3>
 800aabe:	4622      	mov	r2, r4
 800aac0:	462b      	mov	r3, r5
 800aac2:	f7f5 fd09 	bl	80004d8 <__aeabi_dmul>
 800aac6:	a32a      	add	r3, pc, #168	; (adr r3, 800ab70 <__ieee754_acos+0x2b8>)
 800aac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aacc:	f7f5 fb4c 	bl	8000168 <__aeabi_dsub>
 800aad0:	4622      	mov	r2, r4
 800aad2:	462b      	mov	r3, r5
 800aad4:	f7f5 fd00 	bl	80004d8 <__aeabi_dmul>
 800aad8:	2200      	movs	r2, #0
 800aada:	4b2e      	ldr	r3, [pc, #184]	; (800ab94 <__ieee754_acos+0x2dc>)
 800aadc:	f7f5 fb46 	bl	800016c <__adddf3>
 800aae0:	4602      	mov	r2, r0
 800aae2:	460b      	mov	r3, r1
 800aae4:	4640      	mov	r0, r8
 800aae6:	4649      	mov	r1, r9
 800aae8:	f7f5 fe20 	bl	800072c <__aeabi_ddiv>
 800aaec:	4632      	mov	r2, r6
 800aaee:	463b      	mov	r3, r7
 800aaf0:	f7f5 fcf2 	bl	80004d8 <__aeabi_dmul>
 800aaf4:	a320      	add	r3, pc, #128	; (adr r3, 800ab78 <__ieee754_acos+0x2c0>)
 800aaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafa:	f7f5 fb35 	bl	8000168 <__aeabi_dsub>
 800aafe:	4632      	mov	r2, r6
 800ab00:	463b      	mov	r3, r7
 800ab02:	f7f5 fb33 	bl	800016c <__adddf3>
 800ab06:	4602      	mov	r2, r0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	f7f5 fb2f 	bl	800016c <__adddf3>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	a103      	add	r1, pc, #12	; (adr r1, 800ab20 <__ieee754_acos+0x268>)
 800ab14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab18:	e772      	b.n	800aa00 <__ieee754_acos+0x148>
 800ab1a:	bf00      	nop
 800ab1c:	f3af 8000 	nop.w
 800ab20:	54442d18 	.word	0x54442d18
 800ab24:	400921fb 	.word	0x400921fb
 800ab28:	0dfdf709 	.word	0x0dfdf709
 800ab2c:	3f023de1 	.word	0x3f023de1
 800ab30:	7501b288 	.word	0x7501b288
 800ab34:	3f49efe0 	.word	0x3f49efe0
 800ab38:	b5688f3b 	.word	0xb5688f3b
 800ab3c:	3fa48228 	.word	0x3fa48228
 800ab40:	0e884455 	.word	0x0e884455
 800ab44:	3fc9c155 	.word	0x3fc9c155
 800ab48:	03eb6f7d 	.word	0x03eb6f7d
 800ab4c:	3fd4d612 	.word	0x3fd4d612
 800ab50:	55555555 	.word	0x55555555
 800ab54:	3fc55555 	.word	0x3fc55555
 800ab58:	b12e9282 	.word	0xb12e9282
 800ab5c:	3fb3b8c5 	.word	0x3fb3b8c5
 800ab60:	1b8d0159 	.word	0x1b8d0159
 800ab64:	3fe6066c 	.word	0x3fe6066c
 800ab68:	9c598ac8 	.word	0x9c598ac8
 800ab6c:	40002ae5 	.word	0x40002ae5
 800ab70:	1c8a2d4b 	.word	0x1c8a2d4b
 800ab74:	40033a27 	.word	0x40033a27
 800ab78:	33145c07 	.word	0x33145c07
 800ab7c:	3c91a626 	.word	0x3c91a626
 800ab80:	54442d18 	.word	0x54442d18
 800ab84:	3ff921fb 	.word	0x3ff921fb
 800ab88:	3fefffff 	.word	0x3fefffff
 800ab8c:	3fdfffff 	.word	0x3fdfffff
 800ab90:	3c600000 	.word	0x3c600000
 800ab94:	3ff00000 	.word	0x3ff00000
 800ab98:	3fe00000 	.word	0x3fe00000
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	2000      	movs	r0, #0
 800aba2:	4969      	ldr	r1, [pc, #420]	; (800ad48 <__ieee754_acos+0x490>)
 800aba4:	f7f5 fae0 	bl	8000168 <__aeabi_dsub>
 800aba8:	2200      	movs	r2, #0
 800abaa:	4b68      	ldr	r3, [pc, #416]	; (800ad4c <__ieee754_acos+0x494>)
 800abac:	f7f5 fc94 	bl	80004d8 <__aeabi_dmul>
 800abb0:	4604      	mov	r4, r0
 800abb2:	460d      	mov	r5, r1
 800abb4:	f000 fd98 	bl	800b6e8 <__ieee754_sqrt>
 800abb8:	a34d      	add	r3, pc, #308	; (adr r3, 800acf0 <__ieee754_acos+0x438>)
 800abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbe:	4689      	mov	r9, r1
 800abc0:	4680      	mov	r8, r0
 800abc2:	4629      	mov	r1, r5
 800abc4:	4620      	mov	r0, r4
 800abc6:	f7f5 fc87 	bl	80004d8 <__aeabi_dmul>
 800abca:	a34b      	add	r3, pc, #300	; (adr r3, 800acf8 <__ieee754_acos+0x440>)
 800abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd0:	f7f5 facc 	bl	800016c <__adddf3>
 800abd4:	4622      	mov	r2, r4
 800abd6:	462b      	mov	r3, r5
 800abd8:	f7f5 fc7e 	bl	80004d8 <__aeabi_dmul>
 800abdc:	a348      	add	r3, pc, #288	; (adr r3, 800ad00 <__ieee754_acos+0x448>)
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	f7f5 fac1 	bl	8000168 <__aeabi_dsub>
 800abe6:	4622      	mov	r2, r4
 800abe8:	462b      	mov	r3, r5
 800abea:	f7f5 fc75 	bl	80004d8 <__aeabi_dmul>
 800abee:	a346      	add	r3, pc, #280	; (adr r3, 800ad08 <__ieee754_acos+0x450>)
 800abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf4:	f7f5 faba 	bl	800016c <__adddf3>
 800abf8:	4622      	mov	r2, r4
 800abfa:	462b      	mov	r3, r5
 800abfc:	f7f5 fc6c 	bl	80004d8 <__aeabi_dmul>
 800ac00:	a343      	add	r3, pc, #268	; (adr r3, 800ad10 <__ieee754_acos+0x458>)
 800ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac06:	f7f5 faaf 	bl	8000168 <__aeabi_dsub>
 800ac0a:	4622      	mov	r2, r4
 800ac0c:	462b      	mov	r3, r5
 800ac0e:	f7f5 fc63 	bl	80004d8 <__aeabi_dmul>
 800ac12:	a341      	add	r3, pc, #260	; (adr r3, 800ad18 <__ieee754_acos+0x460>)
 800ac14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac18:	f7f5 faa8 	bl	800016c <__adddf3>
 800ac1c:	4622      	mov	r2, r4
 800ac1e:	462b      	mov	r3, r5
 800ac20:	f7f5 fc5a 	bl	80004d8 <__aeabi_dmul>
 800ac24:	a33e      	add	r3, pc, #248	; (adr r3, 800ad20 <__ieee754_acos+0x468>)
 800ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2a:	4682      	mov	sl, r0
 800ac2c:	468b      	mov	fp, r1
 800ac2e:	4620      	mov	r0, r4
 800ac30:	4629      	mov	r1, r5
 800ac32:	f7f5 fc51 	bl	80004d8 <__aeabi_dmul>
 800ac36:	a33c      	add	r3, pc, #240	; (adr r3, 800ad28 <__ieee754_acos+0x470>)
 800ac38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3c:	f7f5 fa94 	bl	8000168 <__aeabi_dsub>
 800ac40:	4622      	mov	r2, r4
 800ac42:	462b      	mov	r3, r5
 800ac44:	f7f5 fc48 	bl	80004d8 <__aeabi_dmul>
 800ac48:	a339      	add	r3, pc, #228	; (adr r3, 800ad30 <__ieee754_acos+0x478>)
 800ac4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4e:	f7f5 fa8d 	bl	800016c <__adddf3>
 800ac52:	4622      	mov	r2, r4
 800ac54:	462b      	mov	r3, r5
 800ac56:	f7f5 fc3f 	bl	80004d8 <__aeabi_dmul>
 800ac5a:	a337      	add	r3, pc, #220	; (adr r3, 800ad38 <__ieee754_acos+0x480>)
 800ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac60:	f7f5 fa82 	bl	8000168 <__aeabi_dsub>
 800ac64:	4622      	mov	r2, r4
 800ac66:	462b      	mov	r3, r5
 800ac68:	f7f5 fc36 	bl	80004d8 <__aeabi_dmul>
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	4b36      	ldr	r3, [pc, #216]	; (800ad48 <__ieee754_acos+0x490>)
 800ac70:	f7f5 fa7c 	bl	800016c <__adddf3>
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	4650      	mov	r0, sl
 800ac7a:	4659      	mov	r1, fp
 800ac7c:	f7f5 fd56 	bl	800072c <__aeabi_ddiv>
 800ac80:	4642      	mov	r2, r8
 800ac82:	464b      	mov	r3, r9
 800ac84:	f7f5 fc28 	bl	80004d8 <__aeabi_dmul>
 800ac88:	2600      	movs	r6, #0
 800ac8a:	4682      	mov	sl, r0
 800ac8c:	468b      	mov	fp, r1
 800ac8e:	4632      	mov	r2, r6
 800ac90:	464b      	mov	r3, r9
 800ac92:	4630      	mov	r0, r6
 800ac94:	4649      	mov	r1, r9
 800ac96:	f7f5 fc1f 	bl	80004d8 <__aeabi_dmul>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	4620      	mov	r0, r4
 800aca0:	4629      	mov	r1, r5
 800aca2:	f7f5 fa61 	bl	8000168 <__aeabi_dsub>
 800aca6:	4632      	mov	r2, r6
 800aca8:	4604      	mov	r4, r0
 800acaa:	460d      	mov	r5, r1
 800acac:	464b      	mov	r3, r9
 800acae:	4640      	mov	r0, r8
 800acb0:	4649      	mov	r1, r9
 800acb2:	f7f5 fa5b 	bl	800016c <__adddf3>
 800acb6:	4602      	mov	r2, r0
 800acb8:	460b      	mov	r3, r1
 800acba:	4620      	mov	r0, r4
 800acbc:	4629      	mov	r1, r5
 800acbe:	f7f5 fd35 	bl	800072c <__aeabi_ddiv>
 800acc2:	4602      	mov	r2, r0
 800acc4:	460b      	mov	r3, r1
 800acc6:	4650      	mov	r0, sl
 800acc8:	4659      	mov	r1, fp
 800acca:	f7f5 fa4f 	bl	800016c <__adddf3>
 800acce:	4632      	mov	r2, r6
 800acd0:	464b      	mov	r3, r9
 800acd2:	f7f5 fa4b 	bl	800016c <__adddf3>
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	f7f5 fa47 	bl	800016c <__adddf3>
 800acde:	e600      	b.n	800a8e2 <__ieee754_acos+0x2a>
 800ace0:	2000      	movs	r0, #0
 800ace2:	2100      	movs	r1, #0
 800ace4:	e5fd      	b.n	800a8e2 <__ieee754_acos+0x2a>
 800ace6:	a116      	add	r1, pc, #88	; (adr r1, 800ad40 <__ieee754_acos+0x488>)
 800ace8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acec:	e5f9      	b.n	800a8e2 <__ieee754_acos+0x2a>
 800acee:	bf00      	nop
 800acf0:	0dfdf709 	.word	0x0dfdf709
 800acf4:	3f023de1 	.word	0x3f023de1
 800acf8:	7501b288 	.word	0x7501b288
 800acfc:	3f49efe0 	.word	0x3f49efe0
 800ad00:	b5688f3b 	.word	0xb5688f3b
 800ad04:	3fa48228 	.word	0x3fa48228
 800ad08:	0e884455 	.word	0x0e884455
 800ad0c:	3fc9c155 	.word	0x3fc9c155
 800ad10:	03eb6f7d 	.word	0x03eb6f7d
 800ad14:	3fd4d612 	.word	0x3fd4d612
 800ad18:	55555555 	.word	0x55555555
 800ad1c:	3fc55555 	.word	0x3fc55555
 800ad20:	b12e9282 	.word	0xb12e9282
 800ad24:	3fb3b8c5 	.word	0x3fb3b8c5
 800ad28:	1b8d0159 	.word	0x1b8d0159
 800ad2c:	3fe6066c 	.word	0x3fe6066c
 800ad30:	9c598ac8 	.word	0x9c598ac8
 800ad34:	40002ae5 	.word	0x40002ae5
 800ad38:	1c8a2d4b 	.word	0x1c8a2d4b
 800ad3c:	40033a27 	.word	0x40033a27
 800ad40:	54442d18 	.word	0x54442d18
 800ad44:	3ff921fb 	.word	0x3ff921fb
 800ad48:	3ff00000 	.word	0x3ff00000
 800ad4c:	3fe00000 	.word	0x3fe00000

0800ad50 <__ieee754_asin>:
 800ad50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad54:	4bc4      	ldr	r3, [pc, #784]	; (800b068 <__ieee754_asin+0x318>)
 800ad56:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800ad5a:	b087      	sub	sp, #28
 800ad5c:	429f      	cmp	r7, r3
 800ad5e:	4604      	mov	r4, r0
 800ad60:	460d      	mov	r5, r1
 800ad62:	9103      	str	r1, [sp, #12]
 800ad64:	dd2a      	ble.n	800adbc <__ieee754_asin+0x6c>
 800ad66:	4603      	mov	r3, r0
 800ad68:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800ad6c:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800ad70:	433b      	orrs	r3, r7
 800ad72:	d114      	bne.n	800ad9e <__ieee754_asin+0x4e>
 800ad74:	a3a2      	add	r3, pc, #648	; (adr r3, 800b000 <__ieee754_asin+0x2b0>)
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	f7f5 fbad 	bl	80004d8 <__aeabi_dmul>
 800ad7e:	a3a2      	add	r3, pc, #648	; (adr r3, 800b008 <__ieee754_asin+0x2b8>)
 800ad80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad84:	4606      	mov	r6, r0
 800ad86:	460f      	mov	r7, r1
 800ad88:	4620      	mov	r0, r4
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	f7f5 fba4 	bl	80004d8 <__aeabi_dmul>
 800ad90:	4602      	mov	r2, r0
 800ad92:	460b      	mov	r3, r1
 800ad94:	4630      	mov	r0, r6
 800ad96:	4639      	mov	r1, r7
 800ad98:	f7f5 f9e8 	bl	800016c <__adddf3>
 800ad9c:	e007      	b.n	800adae <__ieee754_asin+0x5e>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	460b      	mov	r3, r1
 800ada2:	f7f5 f9e1 	bl	8000168 <__aeabi_dsub>
 800ada6:	4602      	mov	r2, r0
 800ada8:	460b      	mov	r3, r1
 800adaa:	f7f5 fcbf 	bl	800072c <__aeabi_ddiv>
 800adae:	4604      	mov	r4, r0
 800adb0:	460d      	mov	r5, r1
 800adb2:	4620      	mov	r0, r4
 800adb4:	4629      	mov	r1, r5
 800adb6:	b007      	add	sp, #28
 800adb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adbc:	4bab      	ldr	r3, [pc, #684]	; (800b06c <__ieee754_asin+0x31c>)
 800adbe:	429f      	cmp	r7, r3
 800adc0:	dc0e      	bgt.n	800ade0 <__ieee754_asin+0x90>
 800adc2:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800adc6:	f280 80ab 	bge.w	800af20 <__ieee754_asin+0x1d0>
 800adca:	a391      	add	r3, pc, #580	; (adr r3, 800b010 <__ieee754_asin+0x2c0>)
 800adcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add0:	f7f5 f9cc 	bl	800016c <__adddf3>
 800add4:	2200      	movs	r2, #0
 800add6:	4ba6      	ldr	r3, [pc, #664]	; (800b070 <__ieee754_asin+0x320>)
 800add8:	f7f5 fe0e 	bl	80009f8 <__aeabi_dcmpgt>
 800addc:	2800      	cmp	r0, #0
 800adde:	d1e8      	bne.n	800adb2 <__ieee754_asin+0x62>
 800ade0:	4620      	mov	r0, r4
 800ade2:	4629      	mov	r1, r5
 800ade4:	f001 fb76 	bl	800c4d4 <fabs>
 800ade8:	4602      	mov	r2, r0
 800adea:	460b      	mov	r3, r1
 800adec:	2000      	movs	r0, #0
 800adee:	49a0      	ldr	r1, [pc, #640]	; (800b070 <__ieee754_asin+0x320>)
 800adf0:	f7f5 f9ba 	bl	8000168 <__aeabi_dsub>
 800adf4:	2200      	movs	r2, #0
 800adf6:	4b9f      	ldr	r3, [pc, #636]	; (800b074 <__ieee754_asin+0x324>)
 800adf8:	f7f5 fb6e 	bl	80004d8 <__aeabi_dmul>
 800adfc:	a386      	add	r3, pc, #536	; (adr r3, 800b018 <__ieee754_asin+0x2c8>)
 800adfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae02:	4604      	mov	r4, r0
 800ae04:	460d      	mov	r5, r1
 800ae06:	f7f5 fb67 	bl	80004d8 <__aeabi_dmul>
 800ae0a:	a385      	add	r3, pc, #532	; (adr r3, 800b020 <__ieee754_asin+0x2d0>)
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	f7f5 f9ac 	bl	800016c <__adddf3>
 800ae14:	4622      	mov	r2, r4
 800ae16:	462b      	mov	r3, r5
 800ae18:	f7f5 fb5e 	bl	80004d8 <__aeabi_dmul>
 800ae1c:	a382      	add	r3, pc, #520	; (adr r3, 800b028 <__ieee754_asin+0x2d8>)
 800ae1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae22:	f7f5 f9a1 	bl	8000168 <__aeabi_dsub>
 800ae26:	4622      	mov	r2, r4
 800ae28:	462b      	mov	r3, r5
 800ae2a:	f7f5 fb55 	bl	80004d8 <__aeabi_dmul>
 800ae2e:	a380      	add	r3, pc, #512	; (adr r3, 800b030 <__ieee754_asin+0x2e0>)
 800ae30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae34:	f7f5 f99a 	bl	800016c <__adddf3>
 800ae38:	4622      	mov	r2, r4
 800ae3a:	462b      	mov	r3, r5
 800ae3c:	f7f5 fb4c 	bl	80004d8 <__aeabi_dmul>
 800ae40:	a37d      	add	r3, pc, #500	; (adr r3, 800b038 <__ieee754_asin+0x2e8>)
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	f7f5 f98f 	bl	8000168 <__aeabi_dsub>
 800ae4a:	4622      	mov	r2, r4
 800ae4c:	462b      	mov	r3, r5
 800ae4e:	f7f5 fb43 	bl	80004d8 <__aeabi_dmul>
 800ae52:	a37b      	add	r3, pc, #492	; (adr r3, 800b040 <__ieee754_asin+0x2f0>)
 800ae54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae58:	f7f5 f988 	bl	800016c <__adddf3>
 800ae5c:	4622      	mov	r2, r4
 800ae5e:	462b      	mov	r3, r5
 800ae60:	f7f5 fb3a 	bl	80004d8 <__aeabi_dmul>
 800ae64:	a378      	add	r3, pc, #480	; (adr r3, 800b048 <__ieee754_asin+0x2f8>)
 800ae66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6a:	4680      	mov	r8, r0
 800ae6c:	4689      	mov	r9, r1
 800ae6e:	4620      	mov	r0, r4
 800ae70:	4629      	mov	r1, r5
 800ae72:	f7f5 fb31 	bl	80004d8 <__aeabi_dmul>
 800ae76:	a376      	add	r3, pc, #472	; (adr r3, 800b050 <__ieee754_asin+0x300>)
 800ae78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7c:	f7f5 f974 	bl	8000168 <__aeabi_dsub>
 800ae80:	4622      	mov	r2, r4
 800ae82:	462b      	mov	r3, r5
 800ae84:	f7f5 fb28 	bl	80004d8 <__aeabi_dmul>
 800ae88:	a373      	add	r3, pc, #460	; (adr r3, 800b058 <__ieee754_asin+0x308>)
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	f7f5 f96d 	bl	800016c <__adddf3>
 800ae92:	4622      	mov	r2, r4
 800ae94:	462b      	mov	r3, r5
 800ae96:	f7f5 fb1f 	bl	80004d8 <__aeabi_dmul>
 800ae9a:	a371      	add	r3, pc, #452	; (adr r3, 800b060 <__ieee754_asin+0x310>)
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	f7f5 f962 	bl	8000168 <__aeabi_dsub>
 800aea4:	4622      	mov	r2, r4
 800aea6:	462b      	mov	r3, r5
 800aea8:	f7f5 fb16 	bl	80004d8 <__aeabi_dmul>
 800aeac:	4b70      	ldr	r3, [pc, #448]	; (800b070 <__ieee754_asin+0x320>)
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f7f5 f95c 	bl	800016c <__adddf3>
 800aeb4:	e9cd 0100 	strd	r0, r1, [sp]
 800aeb8:	4620      	mov	r0, r4
 800aeba:	4629      	mov	r1, r5
 800aebc:	f000 fc14 	bl	800b6e8 <__ieee754_sqrt>
 800aec0:	4b6d      	ldr	r3, [pc, #436]	; (800b078 <__ieee754_asin+0x328>)
 800aec2:	4682      	mov	sl, r0
 800aec4:	429f      	cmp	r7, r3
 800aec6:	468b      	mov	fp, r1
 800aec8:	f340 80d8 	ble.w	800b07c <__ieee754_asin+0x32c>
 800aecc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aed0:	4640      	mov	r0, r8
 800aed2:	4649      	mov	r1, r9
 800aed4:	f7f5 fc2a 	bl	800072c <__aeabi_ddiv>
 800aed8:	4652      	mov	r2, sl
 800aeda:	465b      	mov	r3, fp
 800aedc:	f7f5 fafc 	bl	80004d8 <__aeabi_dmul>
 800aee0:	4652      	mov	r2, sl
 800aee2:	465b      	mov	r3, fp
 800aee4:	f7f5 f942 	bl	800016c <__adddf3>
 800aee8:	4602      	mov	r2, r0
 800aeea:	460b      	mov	r3, r1
 800aeec:	f7f5 f93e 	bl	800016c <__adddf3>
 800aef0:	a345      	add	r3, pc, #276	; (adr r3, 800b008 <__ieee754_asin+0x2b8>)
 800aef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef6:	f7f5 f937 	bl	8000168 <__aeabi_dsub>
 800aefa:	4602      	mov	r2, r0
 800aefc:	460b      	mov	r3, r1
 800aefe:	a140      	add	r1, pc, #256	; (adr r1, 800b000 <__ieee754_asin+0x2b0>)
 800af00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af04:	f7f5 f930 	bl	8000168 <__aeabi_dsub>
 800af08:	9b03      	ldr	r3, [sp, #12]
 800af0a:	4604      	mov	r4, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	bfdc      	itt	le
 800af10:	4602      	movle	r2, r0
 800af12:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800af16:	460d      	mov	r5, r1
 800af18:	bfdc      	itt	le
 800af1a:	4614      	movle	r4, r2
 800af1c:	461d      	movle	r5, r3
 800af1e:	e748      	b.n	800adb2 <__ieee754_asin+0x62>
 800af20:	4602      	mov	r2, r0
 800af22:	460b      	mov	r3, r1
 800af24:	f7f5 fad8 	bl	80004d8 <__aeabi_dmul>
 800af28:	a33b      	add	r3, pc, #236	; (adr r3, 800b018 <__ieee754_asin+0x2c8>)
 800af2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2e:	4606      	mov	r6, r0
 800af30:	460f      	mov	r7, r1
 800af32:	f7f5 fad1 	bl	80004d8 <__aeabi_dmul>
 800af36:	a33a      	add	r3, pc, #232	; (adr r3, 800b020 <__ieee754_asin+0x2d0>)
 800af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3c:	f7f5 f916 	bl	800016c <__adddf3>
 800af40:	4632      	mov	r2, r6
 800af42:	463b      	mov	r3, r7
 800af44:	f7f5 fac8 	bl	80004d8 <__aeabi_dmul>
 800af48:	a337      	add	r3, pc, #220	; (adr r3, 800b028 <__ieee754_asin+0x2d8>)
 800af4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4e:	f7f5 f90b 	bl	8000168 <__aeabi_dsub>
 800af52:	4632      	mov	r2, r6
 800af54:	463b      	mov	r3, r7
 800af56:	f7f5 fabf 	bl	80004d8 <__aeabi_dmul>
 800af5a:	a335      	add	r3, pc, #212	; (adr r3, 800b030 <__ieee754_asin+0x2e0>)
 800af5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af60:	f7f5 f904 	bl	800016c <__adddf3>
 800af64:	4632      	mov	r2, r6
 800af66:	463b      	mov	r3, r7
 800af68:	f7f5 fab6 	bl	80004d8 <__aeabi_dmul>
 800af6c:	a332      	add	r3, pc, #200	; (adr r3, 800b038 <__ieee754_asin+0x2e8>)
 800af6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af72:	f7f5 f8f9 	bl	8000168 <__aeabi_dsub>
 800af76:	4632      	mov	r2, r6
 800af78:	463b      	mov	r3, r7
 800af7a:	f7f5 faad 	bl	80004d8 <__aeabi_dmul>
 800af7e:	a330      	add	r3, pc, #192	; (adr r3, 800b040 <__ieee754_asin+0x2f0>)
 800af80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af84:	f7f5 f8f2 	bl	800016c <__adddf3>
 800af88:	4632      	mov	r2, r6
 800af8a:	463b      	mov	r3, r7
 800af8c:	f7f5 faa4 	bl	80004d8 <__aeabi_dmul>
 800af90:	a32d      	add	r3, pc, #180	; (adr r3, 800b048 <__ieee754_asin+0x2f8>)
 800af92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af96:	4680      	mov	r8, r0
 800af98:	4689      	mov	r9, r1
 800af9a:	4630      	mov	r0, r6
 800af9c:	4639      	mov	r1, r7
 800af9e:	f7f5 fa9b 	bl	80004d8 <__aeabi_dmul>
 800afa2:	a32b      	add	r3, pc, #172	; (adr r3, 800b050 <__ieee754_asin+0x300>)
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	f7f5 f8de 	bl	8000168 <__aeabi_dsub>
 800afac:	4632      	mov	r2, r6
 800afae:	463b      	mov	r3, r7
 800afb0:	f7f5 fa92 	bl	80004d8 <__aeabi_dmul>
 800afb4:	a328      	add	r3, pc, #160	; (adr r3, 800b058 <__ieee754_asin+0x308>)
 800afb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afba:	f7f5 f8d7 	bl	800016c <__adddf3>
 800afbe:	4632      	mov	r2, r6
 800afc0:	463b      	mov	r3, r7
 800afc2:	f7f5 fa89 	bl	80004d8 <__aeabi_dmul>
 800afc6:	a326      	add	r3, pc, #152	; (adr r3, 800b060 <__ieee754_asin+0x310>)
 800afc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afcc:	f7f5 f8cc 	bl	8000168 <__aeabi_dsub>
 800afd0:	4632      	mov	r2, r6
 800afd2:	463b      	mov	r3, r7
 800afd4:	f7f5 fa80 	bl	80004d8 <__aeabi_dmul>
 800afd8:	2200      	movs	r2, #0
 800afda:	4b25      	ldr	r3, [pc, #148]	; (800b070 <__ieee754_asin+0x320>)
 800afdc:	f7f5 f8c6 	bl	800016c <__adddf3>
 800afe0:	4602      	mov	r2, r0
 800afe2:	460b      	mov	r3, r1
 800afe4:	4640      	mov	r0, r8
 800afe6:	4649      	mov	r1, r9
 800afe8:	f7f5 fba0 	bl	800072c <__aeabi_ddiv>
 800afec:	4622      	mov	r2, r4
 800afee:	462b      	mov	r3, r5
 800aff0:	f7f5 fa72 	bl	80004d8 <__aeabi_dmul>
 800aff4:	4602      	mov	r2, r0
 800aff6:	460b      	mov	r3, r1
 800aff8:	4620      	mov	r0, r4
 800affa:	4629      	mov	r1, r5
 800affc:	e6cc      	b.n	800ad98 <__ieee754_asin+0x48>
 800affe:	bf00      	nop
 800b000:	54442d18 	.word	0x54442d18
 800b004:	3ff921fb 	.word	0x3ff921fb
 800b008:	33145c07 	.word	0x33145c07
 800b00c:	3c91a626 	.word	0x3c91a626
 800b010:	8800759c 	.word	0x8800759c
 800b014:	7e37e43c 	.word	0x7e37e43c
 800b018:	0dfdf709 	.word	0x0dfdf709
 800b01c:	3f023de1 	.word	0x3f023de1
 800b020:	7501b288 	.word	0x7501b288
 800b024:	3f49efe0 	.word	0x3f49efe0
 800b028:	b5688f3b 	.word	0xb5688f3b
 800b02c:	3fa48228 	.word	0x3fa48228
 800b030:	0e884455 	.word	0x0e884455
 800b034:	3fc9c155 	.word	0x3fc9c155
 800b038:	03eb6f7d 	.word	0x03eb6f7d
 800b03c:	3fd4d612 	.word	0x3fd4d612
 800b040:	55555555 	.word	0x55555555
 800b044:	3fc55555 	.word	0x3fc55555
 800b048:	b12e9282 	.word	0xb12e9282
 800b04c:	3fb3b8c5 	.word	0x3fb3b8c5
 800b050:	1b8d0159 	.word	0x1b8d0159
 800b054:	3fe6066c 	.word	0x3fe6066c
 800b058:	9c598ac8 	.word	0x9c598ac8
 800b05c:	40002ae5 	.word	0x40002ae5
 800b060:	1c8a2d4b 	.word	0x1c8a2d4b
 800b064:	40033a27 	.word	0x40033a27
 800b068:	3fefffff 	.word	0x3fefffff
 800b06c:	3fdfffff 	.word	0x3fdfffff
 800b070:	3ff00000 	.word	0x3ff00000
 800b074:	3fe00000 	.word	0x3fe00000
 800b078:	3fef3332 	.word	0x3fef3332
 800b07c:	4602      	mov	r2, r0
 800b07e:	460b      	mov	r3, r1
 800b080:	460f      	mov	r7, r1
 800b082:	f7f5 f873 	bl	800016c <__adddf3>
 800b086:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b08a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b08e:	4640      	mov	r0, r8
 800b090:	4649      	mov	r1, r9
 800b092:	f7f5 fb4b 	bl	800072c <__aeabi_ddiv>
 800b096:	4602      	mov	r2, r0
 800b098:	460b      	mov	r3, r1
 800b09a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b09e:	f7f5 fa1b 	bl	80004d8 <__aeabi_dmul>
 800b0a2:	2600      	movs	r6, #0
 800b0a4:	4680      	mov	r8, r0
 800b0a6:	4689      	mov	r9, r1
 800b0a8:	4632      	mov	r2, r6
 800b0aa:	465b      	mov	r3, fp
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	4659      	mov	r1, fp
 800b0b0:	f7f5 fa12 	bl	80004d8 <__aeabi_dmul>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	f7f5 f854 	bl	8000168 <__aeabi_dsub>
 800b0c0:	4632      	mov	r2, r6
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	460d      	mov	r5, r1
 800b0c6:	465b      	mov	r3, fp
 800b0c8:	4650      	mov	r0, sl
 800b0ca:	4659      	mov	r1, fp
 800b0cc:	f7f5 f84e 	bl	800016c <__adddf3>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	4629      	mov	r1, r5
 800b0d8:	f7f5 fb28 	bl	800072c <__aeabi_ddiv>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	f7f5 f844 	bl	800016c <__adddf3>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	a113      	add	r1, pc, #76	; (adr r1, 800b138 <__ieee754_asin+0x3e8>)
 800b0ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0ee:	f7f5 f83b 	bl	8000168 <__aeabi_dsub>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	4640      	mov	r0, r8
 800b0f8:	4649      	mov	r1, r9
 800b0fa:	f7f5 f835 	bl	8000168 <__aeabi_dsub>
 800b0fe:	4632      	mov	r2, r6
 800b100:	4604      	mov	r4, r0
 800b102:	460d      	mov	r5, r1
 800b104:	465b      	mov	r3, fp
 800b106:	4630      	mov	r0, r6
 800b108:	4639      	mov	r1, r7
 800b10a:	f7f5 f82f 	bl	800016c <__adddf3>
 800b10e:	4602      	mov	r2, r0
 800b110:	460b      	mov	r3, r1
 800b112:	a10b      	add	r1, pc, #44	; (adr r1, 800b140 <__ieee754_asin+0x3f0>)
 800b114:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b118:	f7f5 f826 	bl	8000168 <__aeabi_dsub>
 800b11c:	4602      	mov	r2, r0
 800b11e:	460b      	mov	r3, r1
 800b120:	4620      	mov	r0, r4
 800b122:	4629      	mov	r1, r5
 800b124:	f7f5 f820 	bl	8000168 <__aeabi_dsub>
 800b128:	4602      	mov	r2, r0
 800b12a:	460b      	mov	r3, r1
 800b12c:	a104      	add	r1, pc, #16	; (adr r1, 800b140 <__ieee754_asin+0x3f0>)
 800b12e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b132:	e6e7      	b.n	800af04 <__ieee754_asin+0x1b4>
 800b134:	f3af 8000 	nop.w
 800b138:	33145c07 	.word	0x33145c07
 800b13c:	3c91a626 	.word	0x3c91a626
 800b140:	54442d18 	.word	0x54442d18
 800b144:	3fe921fb 	.word	0x3fe921fb

0800b148 <__ieee754_atan2>:
 800b148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	4256      	negs	r6, r2
 800b14e:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800b152:	4316      	orrs	r6, r2
 800b154:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800b300 <__ieee754_atan2+0x1b8>
 800b158:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800b15c:	454e      	cmp	r6, r9
 800b15e:	4604      	mov	r4, r0
 800b160:	460d      	mov	r5, r1
 800b162:	469e      	mov	lr, r3
 800b164:	d808      	bhi.n	800b178 <__ieee754_atan2+0x30>
 800b166:	4246      	negs	r6, r0
 800b168:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b16c:	4306      	orrs	r6, r0
 800b16e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800b172:	454e      	cmp	r6, r9
 800b174:	4688      	mov	r8, r1
 800b176:	d906      	bls.n	800b186 <__ieee754_atan2+0x3e>
 800b178:	4620      	mov	r0, r4
 800b17a:	4629      	mov	r1, r5
 800b17c:	f7f4 fff6 	bl	800016c <__adddf3>
 800b180:	4604      	mov	r4, r0
 800b182:	460d      	mov	r5, r1
 800b184:	e030      	b.n	800b1e8 <__ieee754_atan2+0xa0>
 800b186:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800b18a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800b18e:	4316      	orrs	r6, r2
 800b190:	d103      	bne.n	800b19a <__ieee754_atan2+0x52>
 800b192:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b196:	f001 b813 	b.w	800c1c0 <atan>
 800b19a:	179e      	asrs	r6, r3, #30
 800b19c:	f006 0602 	and.w	r6, r6, #2
 800b1a0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800b1a4:	ea57 0100 	orrs.w	r1, r7, r0
 800b1a8:	d107      	bne.n	800b1ba <__ieee754_atan2+0x72>
 800b1aa:	2e02      	cmp	r6, #2
 800b1ac:	d079      	beq.n	800b2a2 <__ieee754_atan2+0x15a>
 800b1ae:	2e03      	cmp	r6, #3
 800b1b0:	d11a      	bne.n	800b1e8 <__ieee754_atan2+0xa0>
 800b1b2:	a541      	add	r5, pc, #260	; (adr r5, 800b2b8 <__ieee754_atan2+0x170>)
 800b1b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b1b8:	e016      	b.n	800b1e8 <__ieee754_atan2+0xa0>
 800b1ba:	ea5c 0102 	orrs.w	r1, ip, r2
 800b1be:	d106      	bne.n	800b1ce <__ieee754_atan2+0x86>
 800b1c0:	f1b8 0f00 	cmp.w	r8, #0
 800b1c4:	da71      	bge.n	800b2aa <__ieee754_atan2+0x162>
 800b1c6:	a53e      	add	r5, pc, #248	; (adr r5, 800b2c0 <__ieee754_atan2+0x178>)
 800b1c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b1cc:	e00c      	b.n	800b1e8 <__ieee754_atan2+0xa0>
 800b1ce:	45cc      	cmp	ip, r9
 800b1d0:	d123      	bne.n	800b21a <__ieee754_atan2+0xd2>
 800b1d2:	4567      	cmp	r7, ip
 800b1d4:	d114      	bne.n	800b200 <__ieee754_atan2+0xb8>
 800b1d6:	2e02      	cmp	r6, #2
 800b1d8:	d00a      	beq.n	800b1f0 <__ieee754_atan2+0xa8>
 800b1da:	2e03      	cmp	r6, #3
 800b1dc:	d00c      	beq.n	800b1f8 <__ieee754_atan2+0xb0>
 800b1de:	2e01      	cmp	r6, #1
 800b1e0:	d15b      	bne.n	800b29a <__ieee754_atan2+0x152>
 800b1e2:	a539      	add	r5, pc, #228	; (adr r5, 800b2c8 <__ieee754_atan2+0x180>)
 800b1e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	4629      	mov	r1, r5
 800b1ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f0:	a537      	add	r5, pc, #220	; (adr r5, 800b2d0 <__ieee754_atan2+0x188>)
 800b1f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b1f6:	e7f7      	b.n	800b1e8 <__ieee754_atan2+0xa0>
 800b1f8:	a537      	add	r5, pc, #220	; (adr r5, 800b2d8 <__ieee754_atan2+0x190>)
 800b1fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b1fe:	e7f3      	b.n	800b1e8 <__ieee754_atan2+0xa0>
 800b200:	2e02      	cmp	r6, #2
 800b202:	d04e      	beq.n	800b2a2 <__ieee754_atan2+0x15a>
 800b204:	2e03      	cmp	r6, #3
 800b206:	d0d4      	beq.n	800b1b2 <__ieee754_atan2+0x6a>
 800b208:	2e01      	cmp	r6, #1
 800b20a:	f04f 0400 	mov.w	r4, #0
 800b20e:	d102      	bne.n	800b216 <__ieee754_atan2+0xce>
 800b210:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800b214:	e7e8      	b.n	800b1e8 <__ieee754_atan2+0xa0>
 800b216:	2500      	movs	r5, #0
 800b218:	e7e6      	b.n	800b1e8 <__ieee754_atan2+0xa0>
 800b21a:	454f      	cmp	r7, r9
 800b21c:	d0d0      	beq.n	800b1c0 <__ieee754_atan2+0x78>
 800b21e:	eba7 070c 	sub.w	r7, r7, ip
 800b222:	153f      	asrs	r7, r7, #20
 800b224:	2f3c      	cmp	r7, #60	; 0x3c
 800b226:	dc1e      	bgt.n	800b266 <__ieee754_atan2+0x11e>
 800b228:	2b00      	cmp	r3, #0
 800b22a:	da01      	bge.n	800b230 <__ieee754_atan2+0xe8>
 800b22c:	373c      	adds	r7, #60	; 0x3c
 800b22e:	db1e      	blt.n	800b26e <__ieee754_atan2+0x126>
 800b230:	4620      	mov	r0, r4
 800b232:	4629      	mov	r1, r5
 800b234:	f7f5 fa7a 	bl	800072c <__aeabi_ddiv>
 800b238:	f001 f94c 	bl	800c4d4 <fabs>
 800b23c:	f000 ffc0 	bl	800c1c0 <atan>
 800b240:	4604      	mov	r4, r0
 800b242:	460d      	mov	r5, r1
 800b244:	2e01      	cmp	r6, #1
 800b246:	d015      	beq.n	800b274 <__ieee754_atan2+0x12c>
 800b248:	2e02      	cmp	r6, #2
 800b24a:	d017      	beq.n	800b27c <__ieee754_atan2+0x134>
 800b24c:	2e00      	cmp	r6, #0
 800b24e:	d0cb      	beq.n	800b1e8 <__ieee754_atan2+0xa0>
 800b250:	a323      	add	r3, pc, #140	; (adr r3, 800b2e0 <__ieee754_atan2+0x198>)
 800b252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b256:	4620      	mov	r0, r4
 800b258:	4629      	mov	r1, r5
 800b25a:	f7f4 ff85 	bl	8000168 <__aeabi_dsub>
 800b25e:	a322      	add	r3, pc, #136	; (adr r3, 800b2e8 <__ieee754_atan2+0x1a0>)
 800b260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b264:	e016      	b.n	800b294 <__ieee754_atan2+0x14c>
 800b266:	a522      	add	r5, pc, #136	; (adr r5, 800b2f0 <__ieee754_atan2+0x1a8>)
 800b268:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b26c:	e7ea      	b.n	800b244 <__ieee754_atan2+0xfc>
 800b26e:	2400      	movs	r4, #0
 800b270:	2500      	movs	r5, #0
 800b272:	e7e7      	b.n	800b244 <__ieee754_atan2+0xfc>
 800b274:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b278:	461d      	mov	r5, r3
 800b27a:	e7b5      	b.n	800b1e8 <__ieee754_atan2+0xa0>
 800b27c:	a318      	add	r3, pc, #96	; (adr r3, 800b2e0 <__ieee754_atan2+0x198>)
 800b27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b282:	4620      	mov	r0, r4
 800b284:	4629      	mov	r1, r5
 800b286:	f7f4 ff6f 	bl	8000168 <__aeabi_dsub>
 800b28a:	4602      	mov	r2, r0
 800b28c:	460b      	mov	r3, r1
 800b28e:	a116      	add	r1, pc, #88	; (adr r1, 800b2e8 <__ieee754_atan2+0x1a0>)
 800b290:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b294:	f7f4 ff68 	bl	8000168 <__aeabi_dsub>
 800b298:	e772      	b.n	800b180 <__ieee754_atan2+0x38>
 800b29a:	a517      	add	r5, pc, #92	; (adr r5, 800b2f8 <__ieee754_atan2+0x1b0>)
 800b29c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b2a0:	e7a2      	b.n	800b1e8 <__ieee754_atan2+0xa0>
 800b2a2:	a511      	add	r5, pc, #68	; (adr r5, 800b2e8 <__ieee754_atan2+0x1a0>)
 800b2a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b2a8:	e79e      	b.n	800b1e8 <__ieee754_atan2+0xa0>
 800b2aa:	a511      	add	r5, pc, #68	; (adr r5, 800b2f0 <__ieee754_atan2+0x1a8>)
 800b2ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b2b0:	e79a      	b.n	800b1e8 <__ieee754_atan2+0xa0>
 800b2b2:	bf00      	nop
 800b2b4:	f3af 8000 	nop.w
 800b2b8:	54442d18 	.word	0x54442d18
 800b2bc:	c00921fb 	.word	0xc00921fb
 800b2c0:	54442d18 	.word	0x54442d18
 800b2c4:	bff921fb 	.word	0xbff921fb
 800b2c8:	54442d18 	.word	0x54442d18
 800b2cc:	bfe921fb 	.word	0xbfe921fb
 800b2d0:	7f3321d2 	.word	0x7f3321d2
 800b2d4:	4002d97c 	.word	0x4002d97c
 800b2d8:	7f3321d2 	.word	0x7f3321d2
 800b2dc:	c002d97c 	.word	0xc002d97c
 800b2e0:	33145c07 	.word	0x33145c07
 800b2e4:	3ca1a626 	.word	0x3ca1a626
 800b2e8:	54442d18 	.word	0x54442d18
 800b2ec:	400921fb 	.word	0x400921fb
 800b2f0:	54442d18 	.word	0x54442d18
 800b2f4:	3ff921fb 	.word	0x3ff921fb
 800b2f8:	54442d18 	.word	0x54442d18
 800b2fc:	3fe921fb 	.word	0x3fe921fb
 800b300:	7ff00000 	.word	0x7ff00000
 800b304:	00000000 	.word	0x00000000

0800b308 <__ieee754_rem_pio2>:
 800b308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b30c:	4614      	mov	r4, r2
 800b30e:	4ac2      	ldr	r2, [pc, #776]	; (800b618 <__ieee754_rem_pio2+0x310>)
 800b310:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800b314:	4592      	cmp	sl, r2
 800b316:	b08d      	sub	sp, #52	; 0x34
 800b318:	468b      	mov	fp, r1
 800b31a:	dc07      	bgt.n	800b32c <__ieee754_rem_pio2+0x24>
 800b31c:	2200      	movs	r2, #0
 800b31e:	2300      	movs	r3, #0
 800b320:	e9c4 0100 	strd	r0, r1, [r4]
 800b324:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b328:	2500      	movs	r5, #0
 800b32a:	e023      	b.n	800b374 <__ieee754_rem_pio2+0x6c>
 800b32c:	4abb      	ldr	r2, [pc, #748]	; (800b61c <__ieee754_rem_pio2+0x314>)
 800b32e:	4592      	cmp	sl, r2
 800b330:	dc71      	bgt.n	800b416 <__ieee754_rem_pio2+0x10e>
 800b332:	a3ab      	add	r3, pc, #684	; (adr r3, 800b5e0 <__ieee754_rem_pio2+0x2d8>)
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	2900      	cmp	r1, #0
 800b33a:	4db9      	ldr	r5, [pc, #740]	; (800b620 <__ieee754_rem_pio2+0x318>)
 800b33c:	dd36      	ble.n	800b3ac <__ieee754_rem_pio2+0xa4>
 800b33e:	f7f4 ff13 	bl	8000168 <__aeabi_dsub>
 800b342:	45aa      	cmp	sl, r5
 800b344:	4606      	mov	r6, r0
 800b346:	460f      	mov	r7, r1
 800b348:	d018      	beq.n	800b37c <__ieee754_rem_pio2+0x74>
 800b34a:	a3a7      	add	r3, pc, #668	; (adr r3, 800b5e8 <__ieee754_rem_pio2+0x2e0>)
 800b34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b350:	f7f4 ff0a 	bl	8000168 <__aeabi_dsub>
 800b354:	4602      	mov	r2, r0
 800b356:	460b      	mov	r3, r1
 800b358:	4630      	mov	r0, r6
 800b35a:	e9c4 2300 	strd	r2, r3, [r4]
 800b35e:	4639      	mov	r1, r7
 800b360:	f7f4 ff02 	bl	8000168 <__aeabi_dsub>
 800b364:	a3a0      	add	r3, pc, #640	; (adr r3, 800b5e8 <__ieee754_rem_pio2+0x2e0>)
 800b366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36a:	f7f4 fefd 	bl	8000168 <__aeabi_dsub>
 800b36e:	2501      	movs	r5, #1
 800b370:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b374:	4628      	mov	r0, r5
 800b376:	b00d      	add	sp, #52	; 0x34
 800b378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37c:	a39c      	add	r3, pc, #624	; (adr r3, 800b5f0 <__ieee754_rem_pio2+0x2e8>)
 800b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b382:	f7f4 fef1 	bl	8000168 <__aeabi_dsub>
 800b386:	a39c      	add	r3, pc, #624	; (adr r3, 800b5f8 <__ieee754_rem_pio2+0x2f0>)
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	4606      	mov	r6, r0
 800b38e:	460f      	mov	r7, r1
 800b390:	f7f4 feea 	bl	8000168 <__aeabi_dsub>
 800b394:	4602      	mov	r2, r0
 800b396:	460b      	mov	r3, r1
 800b398:	4630      	mov	r0, r6
 800b39a:	e9c4 2300 	strd	r2, r3, [r4]
 800b39e:	4639      	mov	r1, r7
 800b3a0:	f7f4 fee2 	bl	8000168 <__aeabi_dsub>
 800b3a4:	a394      	add	r3, pc, #592	; (adr r3, 800b5f8 <__ieee754_rem_pio2+0x2f0>)
 800b3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3aa:	e7de      	b.n	800b36a <__ieee754_rem_pio2+0x62>
 800b3ac:	f7f4 fede 	bl	800016c <__adddf3>
 800b3b0:	45aa      	cmp	sl, r5
 800b3b2:	4606      	mov	r6, r0
 800b3b4:	460f      	mov	r7, r1
 800b3b6:	d016      	beq.n	800b3e6 <__ieee754_rem_pio2+0xde>
 800b3b8:	a38b      	add	r3, pc, #556	; (adr r3, 800b5e8 <__ieee754_rem_pio2+0x2e0>)
 800b3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3be:	f7f4 fed5 	bl	800016c <__adddf3>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	e9c4 2300 	strd	r2, r3, [r4]
 800b3cc:	4639      	mov	r1, r7
 800b3ce:	f7f4 fecb 	bl	8000168 <__aeabi_dsub>
 800b3d2:	a385      	add	r3, pc, #532	; (adr r3, 800b5e8 <__ieee754_rem_pio2+0x2e0>)
 800b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d8:	f7f4 fec8 	bl	800016c <__adddf3>
 800b3dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b3e0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b3e4:	e7c6      	b.n	800b374 <__ieee754_rem_pio2+0x6c>
 800b3e6:	a382      	add	r3, pc, #520	; (adr r3, 800b5f0 <__ieee754_rem_pio2+0x2e8>)
 800b3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ec:	f7f4 febe 	bl	800016c <__adddf3>
 800b3f0:	a381      	add	r3, pc, #516	; (adr r3, 800b5f8 <__ieee754_rem_pio2+0x2f0>)
 800b3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	460f      	mov	r7, r1
 800b3fa:	f7f4 feb7 	bl	800016c <__adddf3>
 800b3fe:	4602      	mov	r2, r0
 800b400:	460b      	mov	r3, r1
 800b402:	4630      	mov	r0, r6
 800b404:	e9c4 2300 	strd	r2, r3, [r4]
 800b408:	4639      	mov	r1, r7
 800b40a:	f7f4 fead 	bl	8000168 <__aeabi_dsub>
 800b40e:	a37a      	add	r3, pc, #488	; (adr r3, 800b5f8 <__ieee754_rem_pio2+0x2f0>)
 800b410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b414:	e7e0      	b.n	800b3d8 <__ieee754_rem_pio2+0xd0>
 800b416:	4a83      	ldr	r2, [pc, #524]	; (800b624 <__ieee754_rem_pio2+0x31c>)
 800b418:	4592      	cmp	sl, r2
 800b41a:	f300 80d2 	bgt.w	800b5c2 <__ieee754_rem_pio2+0x2ba>
 800b41e:	f001 f859 	bl	800c4d4 <fabs>
 800b422:	a377      	add	r3, pc, #476	; (adr r3, 800b600 <__ieee754_rem_pio2+0x2f8>)
 800b424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b428:	4606      	mov	r6, r0
 800b42a:	460f      	mov	r7, r1
 800b42c:	f7f5 f854 	bl	80004d8 <__aeabi_dmul>
 800b430:	2200      	movs	r2, #0
 800b432:	4b7d      	ldr	r3, [pc, #500]	; (800b628 <__ieee754_rem_pio2+0x320>)
 800b434:	f7f4 fe9a 	bl	800016c <__adddf3>
 800b438:	f7f5 fafe 	bl	8000a38 <__aeabi_d2iz>
 800b43c:	4605      	mov	r5, r0
 800b43e:	f7f4 ffe1 	bl	8000404 <__aeabi_i2d>
 800b442:	a367      	add	r3, pc, #412	; (adr r3, 800b5e0 <__ieee754_rem_pio2+0x2d8>)
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b44c:	f7f5 f844 	bl	80004d8 <__aeabi_dmul>
 800b450:	4602      	mov	r2, r0
 800b452:	460b      	mov	r3, r1
 800b454:	4630      	mov	r0, r6
 800b456:	4639      	mov	r1, r7
 800b458:	f7f4 fe86 	bl	8000168 <__aeabi_dsub>
 800b45c:	a362      	add	r3, pc, #392	; (adr r3, 800b5e8 <__ieee754_rem_pio2+0x2e0>)
 800b45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b462:	4606      	mov	r6, r0
 800b464:	460f      	mov	r7, r1
 800b466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b46a:	f7f5 f835 	bl	80004d8 <__aeabi_dmul>
 800b46e:	2d1f      	cmp	r5, #31
 800b470:	4680      	mov	r8, r0
 800b472:	4689      	mov	r9, r1
 800b474:	dc0e      	bgt.n	800b494 <__ieee754_rem_pio2+0x18c>
 800b476:	4b6d      	ldr	r3, [pc, #436]	; (800b62c <__ieee754_rem_pio2+0x324>)
 800b478:	1e6a      	subs	r2, r5, #1
 800b47a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b47e:	4553      	cmp	r3, sl
 800b480:	d008      	beq.n	800b494 <__ieee754_rem_pio2+0x18c>
 800b482:	4642      	mov	r2, r8
 800b484:	464b      	mov	r3, r9
 800b486:	4630      	mov	r0, r6
 800b488:	4639      	mov	r1, r7
 800b48a:	f7f4 fe6d 	bl	8000168 <__aeabi_dsub>
 800b48e:	e9c4 0100 	strd	r0, r1, [r4]
 800b492:	e011      	b.n	800b4b8 <__ieee754_rem_pio2+0x1b0>
 800b494:	464b      	mov	r3, r9
 800b496:	4642      	mov	r2, r8
 800b498:	4630      	mov	r0, r6
 800b49a:	4639      	mov	r1, r7
 800b49c:	f7f4 fe64 	bl	8000168 <__aeabi_dsub>
 800b4a0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b4a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b4a8:	ebaa 0303 	sub.w	r3, sl, r3
 800b4ac:	2b10      	cmp	r3, #16
 800b4ae:	dc1f      	bgt.n	800b4f0 <__ieee754_rem_pio2+0x1e8>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	e9c4 2300 	strd	r2, r3, [r4]
 800b4b8:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800b4bc:	4630      	mov	r0, r6
 800b4be:	4653      	mov	r3, sl
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	f7f4 fe51 	bl	8000168 <__aeabi_dsub>
 800b4c6:	4642      	mov	r2, r8
 800b4c8:	464b      	mov	r3, r9
 800b4ca:	f7f4 fe4d 	bl	8000168 <__aeabi_dsub>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	f1bb 0f00 	cmp.w	fp, #0
 800b4d6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b4da:	f6bf af4b 	bge.w	800b374 <__ieee754_rem_pio2+0x6c>
 800b4de:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800b4e2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800b4e6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b4ea:	60e1      	str	r1, [r4, #12]
 800b4ec:	426d      	negs	r5, r5
 800b4ee:	e741      	b.n	800b374 <__ieee754_rem_pio2+0x6c>
 800b4f0:	a33f      	add	r3, pc, #252	; (adr r3, 800b5f0 <__ieee754_rem_pio2+0x2e8>)
 800b4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4fa:	f7f4 ffed 	bl	80004d8 <__aeabi_dmul>
 800b4fe:	4680      	mov	r8, r0
 800b500:	4689      	mov	r9, r1
 800b502:	4602      	mov	r2, r0
 800b504:	460b      	mov	r3, r1
 800b506:	4630      	mov	r0, r6
 800b508:	4639      	mov	r1, r7
 800b50a:	f7f4 fe2d 	bl	8000168 <__aeabi_dsub>
 800b50e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b512:	4602      	mov	r2, r0
 800b514:	460b      	mov	r3, r1
 800b516:	4630      	mov	r0, r6
 800b518:	4639      	mov	r1, r7
 800b51a:	f7f4 fe25 	bl	8000168 <__aeabi_dsub>
 800b51e:	4642      	mov	r2, r8
 800b520:	464b      	mov	r3, r9
 800b522:	f7f4 fe21 	bl	8000168 <__aeabi_dsub>
 800b526:	a334      	add	r3, pc, #208	; (adr r3, 800b5f8 <__ieee754_rem_pio2+0x2f0>)
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	4606      	mov	r6, r0
 800b52e:	460f      	mov	r7, r1
 800b530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b534:	f7f4 ffd0 	bl	80004d8 <__aeabi_dmul>
 800b538:	4632      	mov	r2, r6
 800b53a:	463b      	mov	r3, r7
 800b53c:	f7f4 fe14 	bl	8000168 <__aeabi_dsub>
 800b540:	460b      	mov	r3, r1
 800b542:	4602      	mov	r2, r0
 800b544:	4680      	mov	r8, r0
 800b546:	4689      	mov	r9, r1
 800b548:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b54c:	f7f4 fe0c 	bl	8000168 <__aeabi_dsub>
 800b550:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b554:	ebaa 0a03 	sub.w	sl, sl, r3
 800b558:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800b55c:	dc06      	bgt.n	800b56c <__ieee754_rem_pio2+0x264>
 800b55e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800b562:	4602      	mov	r2, r0
 800b564:	460b      	mov	r3, r1
 800b566:	e9c4 2300 	strd	r2, r3, [r4]
 800b56a:	e7a5      	b.n	800b4b8 <__ieee754_rem_pio2+0x1b0>
 800b56c:	a326      	add	r3, pc, #152	; (adr r3, 800b608 <__ieee754_rem_pio2+0x300>)
 800b56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b576:	f7f4 ffaf 	bl	80004d8 <__aeabi_dmul>
 800b57a:	4680      	mov	r8, r0
 800b57c:	4689      	mov	r9, r1
 800b57e:	4602      	mov	r2, r0
 800b580:	460b      	mov	r3, r1
 800b582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b586:	f7f4 fdef 	bl	8000168 <__aeabi_dsub>
 800b58a:	4602      	mov	r2, r0
 800b58c:	460b      	mov	r3, r1
 800b58e:	4606      	mov	r6, r0
 800b590:	460f      	mov	r7, r1
 800b592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b596:	f7f4 fde7 	bl	8000168 <__aeabi_dsub>
 800b59a:	4642      	mov	r2, r8
 800b59c:	464b      	mov	r3, r9
 800b59e:	f7f4 fde3 	bl	8000168 <__aeabi_dsub>
 800b5a2:	a31b      	add	r3, pc, #108	; (adr r3, 800b610 <__ieee754_rem_pio2+0x308>)
 800b5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a8:	4680      	mov	r8, r0
 800b5aa:	4689      	mov	r9, r1
 800b5ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5b0:	f7f4 ff92 	bl	80004d8 <__aeabi_dmul>
 800b5b4:	4642      	mov	r2, r8
 800b5b6:	464b      	mov	r3, r9
 800b5b8:	f7f4 fdd6 	bl	8000168 <__aeabi_dsub>
 800b5bc:	4680      	mov	r8, r0
 800b5be:	4689      	mov	r9, r1
 800b5c0:	e75f      	b.n	800b482 <__ieee754_rem_pio2+0x17a>
 800b5c2:	4a1b      	ldr	r2, [pc, #108]	; (800b630 <__ieee754_rem_pio2+0x328>)
 800b5c4:	4592      	cmp	sl, r2
 800b5c6:	dd35      	ble.n	800b634 <__ieee754_rem_pio2+0x32c>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	f7f4 fdcc 	bl	8000168 <__aeabi_dsub>
 800b5d0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b5d4:	e9c4 0100 	strd	r0, r1, [r4]
 800b5d8:	e6a6      	b.n	800b328 <__ieee754_rem_pio2+0x20>
 800b5da:	bf00      	nop
 800b5dc:	f3af 8000 	nop.w
 800b5e0:	54400000 	.word	0x54400000
 800b5e4:	3ff921fb 	.word	0x3ff921fb
 800b5e8:	1a626331 	.word	0x1a626331
 800b5ec:	3dd0b461 	.word	0x3dd0b461
 800b5f0:	1a600000 	.word	0x1a600000
 800b5f4:	3dd0b461 	.word	0x3dd0b461
 800b5f8:	2e037073 	.word	0x2e037073
 800b5fc:	3ba3198a 	.word	0x3ba3198a
 800b600:	6dc9c883 	.word	0x6dc9c883
 800b604:	3fe45f30 	.word	0x3fe45f30
 800b608:	2e000000 	.word	0x2e000000
 800b60c:	3ba3198a 	.word	0x3ba3198a
 800b610:	252049c1 	.word	0x252049c1
 800b614:	397b839a 	.word	0x397b839a
 800b618:	3fe921fb 	.word	0x3fe921fb
 800b61c:	4002d97b 	.word	0x4002d97b
 800b620:	3ff921fb 	.word	0x3ff921fb
 800b624:	413921fb 	.word	0x413921fb
 800b628:	3fe00000 	.word	0x3fe00000
 800b62c:	0800cac0 	.word	0x0800cac0
 800b630:	7fefffff 	.word	0x7fefffff
 800b634:	ea4f 552a 	mov.w	r5, sl, asr #20
 800b638:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b63c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800b640:	460f      	mov	r7, r1
 800b642:	4606      	mov	r6, r0
 800b644:	f7f5 f9f8 	bl	8000a38 <__aeabi_d2iz>
 800b648:	f7f4 fedc 	bl	8000404 <__aeabi_i2d>
 800b64c:	4602      	mov	r2, r0
 800b64e:	460b      	mov	r3, r1
 800b650:	4630      	mov	r0, r6
 800b652:	4639      	mov	r1, r7
 800b654:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b658:	f7f4 fd86 	bl	8000168 <__aeabi_dsub>
 800b65c:	2200      	movs	r2, #0
 800b65e:	4b20      	ldr	r3, [pc, #128]	; (800b6e0 <__ieee754_rem_pio2+0x3d8>)
 800b660:	f7f4 ff3a 	bl	80004d8 <__aeabi_dmul>
 800b664:	460f      	mov	r7, r1
 800b666:	4606      	mov	r6, r0
 800b668:	f7f5 f9e6 	bl	8000a38 <__aeabi_d2iz>
 800b66c:	f7f4 feca 	bl	8000404 <__aeabi_i2d>
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	4630      	mov	r0, r6
 800b676:	4639      	mov	r1, r7
 800b678:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b67c:	f7f4 fd74 	bl	8000168 <__aeabi_dsub>
 800b680:	2200      	movs	r2, #0
 800b682:	4b17      	ldr	r3, [pc, #92]	; (800b6e0 <__ieee754_rem_pio2+0x3d8>)
 800b684:	f7f4 ff28 	bl	80004d8 <__aeabi_dmul>
 800b688:	f04f 0803 	mov.w	r8, #3
 800b68c:	2600      	movs	r6, #0
 800b68e:	2700      	movs	r7, #0
 800b690:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b694:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b698:	4632      	mov	r2, r6
 800b69a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b69e:	463b      	mov	r3, r7
 800b6a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800b6a4:	f7f5 f980 	bl	80009a8 <__aeabi_dcmpeq>
 800b6a8:	b9b8      	cbnz	r0, 800b6da <__ieee754_rem_pio2+0x3d2>
 800b6aa:	4b0e      	ldr	r3, [pc, #56]	; (800b6e4 <__ieee754_rem_pio2+0x3dc>)
 800b6ac:	462a      	mov	r2, r5
 800b6ae:	9301      	str	r3, [sp, #4]
 800b6b0:	2302      	movs	r3, #2
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	a806      	add	r0, sp, #24
 800b6b8:	4643      	mov	r3, r8
 800b6ba:	f000 f97f 	bl	800b9bc <__kernel_rem_pio2>
 800b6be:	f1bb 0f00 	cmp.w	fp, #0
 800b6c2:	4605      	mov	r5, r0
 800b6c4:	f6bf ae56 	bge.w	800b374 <__ieee754_rem_pio2+0x6c>
 800b6c8:	6863      	ldr	r3, [r4, #4]
 800b6ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b6ce:	6063      	str	r3, [r4, #4]
 800b6d0:	68e3      	ldr	r3, [r4, #12]
 800b6d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b6d6:	60e3      	str	r3, [r4, #12]
 800b6d8:	e708      	b.n	800b4ec <__ieee754_rem_pio2+0x1e4>
 800b6da:	46d0      	mov	r8, sl
 800b6dc:	e7dc      	b.n	800b698 <__ieee754_rem_pio2+0x390>
 800b6de:	bf00      	nop
 800b6e0:	41700000 	.word	0x41700000
 800b6e4:	0800cb40 	.word	0x0800cb40

0800b6e8 <__ieee754_sqrt>:
 800b6e8:	4b54      	ldr	r3, [pc, #336]	; (800b83c <__ieee754_sqrt+0x154>)
 800b6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ee:	438b      	bics	r3, r1
 800b6f0:	4606      	mov	r6, r0
 800b6f2:	460d      	mov	r5, r1
 800b6f4:	460a      	mov	r2, r1
 800b6f6:	460c      	mov	r4, r1
 800b6f8:	d10f      	bne.n	800b71a <__ieee754_sqrt+0x32>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	f7f4 feeb 	bl	80004d8 <__aeabi_dmul>
 800b702:	4602      	mov	r2, r0
 800b704:	460b      	mov	r3, r1
 800b706:	4630      	mov	r0, r6
 800b708:	4629      	mov	r1, r5
 800b70a:	f7f4 fd2f 	bl	800016c <__adddf3>
 800b70e:	4606      	mov	r6, r0
 800b710:	460d      	mov	r5, r1
 800b712:	4630      	mov	r0, r6
 800b714:	4629      	mov	r1, r5
 800b716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b71a:	2900      	cmp	r1, #0
 800b71c:	4607      	mov	r7, r0
 800b71e:	4603      	mov	r3, r0
 800b720:	dc0e      	bgt.n	800b740 <__ieee754_sqrt+0x58>
 800b722:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b726:	ea5c 0707 	orrs.w	r7, ip, r7
 800b72a:	d0f2      	beq.n	800b712 <__ieee754_sqrt+0x2a>
 800b72c:	b141      	cbz	r1, 800b740 <__ieee754_sqrt+0x58>
 800b72e:	4602      	mov	r2, r0
 800b730:	460b      	mov	r3, r1
 800b732:	f7f4 fd19 	bl	8000168 <__aeabi_dsub>
 800b736:	4602      	mov	r2, r0
 800b738:	460b      	mov	r3, r1
 800b73a:	f7f4 fff7 	bl	800072c <__aeabi_ddiv>
 800b73e:	e7e6      	b.n	800b70e <__ieee754_sqrt+0x26>
 800b740:	1512      	asrs	r2, r2, #20
 800b742:	d074      	beq.n	800b82e <__ieee754_sqrt+0x146>
 800b744:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b748:	07d5      	lsls	r5, r2, #31
 800b74a:	f04f 0500 	mov.w	r5, #0
 800b74e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b752:	bf48      	it	mi
 800b754:	0fd9      	lsrmi	r1, r3, #31
 800b756:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800b75a:	bf44      	itt	mi
 800b75c:	005b      	lslmi	r3, r3, #1
 800b75e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800b762:	1051      	asrs	r1, r2, #1
 800b764:	0fda      	lsrs	r2, r3, #31
 800b766:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800b76a:	4628      	mov	r0, r5
 800b76c:	2216      	movs	r2, #22
 800b76e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b772:	005b      	lsls	r3, r3, #1
 800b774:	1987      	adds	r7, r0, r6
 800b776:	42a7      	cmp	r7, r4
 800b778:	bfde      	ittt	le
 800b77a:	19b8      	addle	r0, r7, r6
 800b77c:	1be4      	suble	r4, r4, r7
 800b77e:	19ad      	addle	r5, r5, r6
 800b780:	0fdf      	lsrs	r7, r3, #31
 800b782:	3a01      	subs	r2, #1
 800b784:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800b788:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b78c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b790:	d1f0      	bne.n	800b774 <__ieee754_sqrt+0x8c>
 800b792:	f04f 0c20 	mov.w	ip, #32
 800b796:	4696      	mov	lr, r2
 800b798:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b79c:	4284      	cmp	r4, r0
 800b79e:	eb06 070e 	add.w	r7, r6, lr
 800b7a2:	dc02      	bgt.n	800b7aa <__ieee754_sqrt+0xc2>
 800b7a4:	d112      	bne.n	800b7cc <__ieee754_sqrt+0xe4>
 800b7a6:	429f      	cmp	r7, r3
 800b7a8:	d810      	bhi.n	800b7cc <__ieee754_sqrt+0xe4>
 800b7aa:	2f00      	cmp	r7, #0
 800b7ac:	eb07 0e06 	add.w	lr, r7, r6
 800b7b0:	da42      	bge.n	800b838 <__ieee754_sqrt+0x150>
 800b7b2:	f1be 0f00 	cmp.w	lr, #0
 800b7b6:	db3f      	blt.n	800b838 <__ieee754_sqrt+0x150>
 800b7b8:	f100 0801 	add.w	r8, r0, #1
 800b7bc:	1a24      	subs	r4, r4, r0
 800b7be:	4640      	mov	r0, r8
 800b7c0:	429f      	cmp	r7, r3
 800b7c2:	bf88      	it	hi
 800b7c4:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800b7c8:	1bdb      	subs	r3, r3, r7
 800b7ca:	4432      	add	r2, r6
 800b7cc:	0064      	lsls	r4, r4, #1
 800b7ce:	f1bc 0c01 	subs.w	ip, ip, #1
 800b7d2:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800b7d6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b7da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b7de:	d1dd      	bne.n	800b79c <__ieee754_sqrt+0xb4>
 800b7e0:	4323      	orrs	r3, r4
 800b7e2:	d006      	beq.n	800b7f2 <__ieee754_sqrt+0x10a>
 800b7e4:	1c54      	adds	r4, r2, #1
 800b7e6:	bf0b      	itete	eq
 800b7e8:	4662      	moveq	r2, ip
 800b7ea:	3201      	addne	r2, #1
 800b7ec:	3501      	addeq	r5, #1
 800b7ee:	f022 0201 	bicne.w	r2, r2, #1
 800b7f2:	106b      	asrs	r3, r5, #1
 800b7f4:	0852      	lsrs	r2, r2, #1
 800b7f6:	07e8      	lsls	r0, r5, #31
 800b7f8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b7fc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b800:	bf48      	it	mi
 800b802:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b806:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800b80a:	4616      	mov	r6, r2
 800b80c:	e781      	b.n	800b712 <__ieee754_sqrt+0x2a>
 800b80e:	0adc      	lsrs	r4, r3, #11
 800b810:	3915      	subs	r1, #21
 800b812:	055b      	lsls	r3, r3, #21
 800b814:	2c00      	cmp	r4, #0
 800b816:	d0fa      	beq.n	800b80e <__ieee754_sqrt+0x126>
 800b818:	02e6      	lsls	r6, r4, #11
 800b81a:	d50a      	bpl.n	800b832 <__ieee754_sqrt+0x14a>
 800b81c:	f1c2 0020 	rsb	r0, r2, #32
 800b820:	fa23 f000 	lsr.w	r0, r3, r0
 800b824:	1e55      	subs	r5, r2, #1
 800b826:	4093      	lsls	r3, r2
 800b828:	4304      	orrs	r4, r0
 800b82a:	1b4a      	subs	r2, r1, r5
 800b82c:	e78a      	b.n	800b744 <__ieee754_sqrt+0x5c>
 800b82e:	4611      	mov	r1, r2
 800b830:	e7f0      	b.n	800b814 <__ieee754_sqrt+0x12c>
 800b832:	0064      	lsls	r4, r4, #1
 800b834:	3201      	adds	r2, #1
 800b836:	e7ef      	b.n	800b818 <__ieee754_sqrt+0x130>
 800b838:	4680      	mov	r8, r0
 800b83a:	e7bf      	b.n	800b7bc <__ieee754_sqrt+0xd4>
 800b83c:	7ff00000 	.word	0x7ff00000

0800b840 <__kernel_cos>:
 800b840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b844:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b848:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b84c:	4680      	mov	r8, r0
 800b84e:	460f      	mov	r7, r1
 800b850:	e9cd 2300 	strd	r2, r3, [sp]
 800b854:	da04      	bge.n	800b860 <__kernel_cos+0x20>
 800b856:	f7f5 f8ef 	bl	8000a38 <__aeabi_d2iz>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	f000 8086 	beq.w	800b96c <__kernel_cos+0x12c>
 800b860:	4642      	mov	r2, r8
 800b862:	463b      	mov	r3, r7
 800b864:	4640      	mov	r0, r8
 800b866:	4639      	mov	r1, r7
 800b868:	f7f4 fe36 	bl	80004d8 <__aeabi_dmul>
 800b86c:	2200      	movs	r2, #0
 800b86e:	4b4e      	ldr	r3, [pc, #312]	; (800b9a8 <__kernel_cos+0x168>)
 800b870:	4604      	mov	r4, r0
 800b872:	460d      	mov	r5, r1
 800b874:	f7f4 fe30 	bl	80004d8 <__aeabi_dmul>
 800b878:	a33f      	add	r3, pc, #252	; (adr r3, 800b978 <__kernel_cos+0x138>)
 800b87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87e:	4682      	mov	sl, r0
 800b880:	468b      	mov	fp, r1
 800b882:	4620      	mov	r0, r4
 800b884:	4629      	mov	r1, r5
 800b886:	f7f4 fe27 	bl	80004d8 <__aeabi_dmul>
 800b88a:	a33d      	add	r3, pc, #244	; (adr r3, 800b980 <__kernel_cos+0x140>)
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	f7f4 fc6c 	bl	800016c <__adddf3>
 800b894:	4622      	mov	r2, r4
 800b896:	462b      	mov	r3, r5
 800b898:	f7f4 fe1e 	bl	80004d8 <__aeabi_dmul>
 800b89c:	a33a      	add	r3, pc, #232	; (adr r3, 800b988 <__kernel_cos+0x148>)
 800b89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a2:	f7f4 fc61 	bl	8000168 <__aeabi_dsub>
 800b8a6:	4622      	mov	r2, r4
 800b8a8:	462b      	mov	r3, r5
 800b8aa:	f7f4 fe15 	bl	80004d8 <__aeabi_dmul>
 800b8ae:	a338      	add	r3, pc, #224	; (adr r3, 800b990 <__kernel_cos+0x150>)
 800b8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b4:	f7f4 fc5a 	bl	800016c <__adddf3>
 800b8b8:	4622      	mov	r2, r4
 800b8ba:	462b      	mov	r3, r5
 800b8bc:	f7f4 fe0c 	bl	80004d8 <__aeabi_dmul>
 800b8c0:	a335      	add	r3, pc, #212	; (adr r3, 800b998 <__kernel_cos+0x158>)
 800b8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c6:	f7f4 fc4f 	bl	8000168 <__aeabi_dsub>
 800b8ca:	4622      	mov	r2, r4
 800b8cc:	462b      	mov	r3, r5
 800b8ce:	f7f4 fe03 	bl	80004d8 <__aeabi_dmul>
 800b8d2:	a333      	add	r3, pc, #204	; (adr r3, 800b9a0 <__kernel_cos+0x160>)
 800b8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d8:	f7f4 fc48 	bl	800016c <__adddf3>
 800b8dc:	4622      	mov	r2, r4
 800b8de:	462b      	mov	r3, r5
 800b8e0:	f7f4 fdfa 	bl	80004d8 <__aeabi_dmul>
 800b8e4:	4622      	mov	r2, r4
 800b8e6:	462b      	mov	r3, r5
 800b8e8:	f7f4 fdf6 	bl	80004d8 <__aeabi_dmul>
 800b8ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	460d      	mov	r5, r1
 800b8f4:	4640      	mov	r0, r8
 800b8f6:	4639      	mov	r1, r7
 800b8f8:	f7f4 fdee 	bl	80004d8 <__aeabi_dmul>
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	4602      	mov	r2, r0
 800b900:	4629      	mov	r1, r5
 800b902:	4620      	mov	r0, r4
 800b904:	f7f4 fc30 	bl	8000168 <__aeabi_dsub>
 800b908:	4b28      	ldr	r3, [pc, #160]	; (800b9ac <__kernel_cos+0x16c>)
 800b90a:	4680      	mov	r8, r0
 800b90c:	429e      	cmp	r6, r3
 800b90e:	4689      	mov	r9, r1
 800b910:	dc0e      	bgt.n	800b930 <__kernel_cos+0xf0>
 800b912:	4602      	mov	r2, r0
 800b914:	460b      	mov	r3, r1
 800b916:	4650      	mov	r0, sl
 800b918:	4659      	mov	r1, fp
 800b91a:	f7f4 fc25 	bl	8000168 <__aeabi_dsub>
 800b91e:	4602      	mov	r2, r0
 800b920:	2000      	movs	r0, #0
 800b922:	460b      	mov	r3, r1
 800b924:	4922      	ldr	r1, [pc, #136]	; (800b9b0 <__kernel_cos+0x170>)
 800b926:	f7f4 fc1f 	bl	8000168 <__aeabi_dsub>
 800b92a:	b003      	add	sp, #12
 800b92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b930:	2400      	movs	r4, #0
 800b932:	4b20      	ldr	r3, [pc, #128]	; (800b9b4 <__kernel_cos+0x174>)
 800b934:	4622      	mov	r2, r4
 800b936:	429e      	cmp	r6, r3
 800b938:	bfcc      	ite	gt
 800b93a:	4d1f      	ldrgt	r5, [pc, #124]	; (800b9b8 <__kernel_cos+0x178>)
 800b93c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b940:	462b      	mov	r3, r5
 800b942:	2000      	movs	r0, #0
 800b944:	491a      	ldr	r1, [pc, #104]	; (800b9b0 <__kernel_cos+0x170>)
 800b946:	f7f4 fc0f 	bl	8000168 <__aeabi_dsub>
 800b94a:	4622      	mov	r2, r4
 800b94c:	4606      	mov	r6, r0
 800b94e:	460f      	mov	r7, r1
 800b950:	462b      	mov	r3, r5
 800b952:	4650      	mov	r0, sl
 800b954:	4659      	mov	r1, fp
 800b956:	f7f4 fc07 	bl	8000168 <__aeabi_dsub>
 800b95a:	4642      	mov	r2, r8
 800b95c:	464b      	mov	r3, r9
 800b95e:	f7f4 fc03 	bl	8000168 <__aeabi_dsub>
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
 800b966:	4630      	mov	r0, r6
 800b968:	4639      	mov	r1, r7
 800b96a:	e7dc      	b.n	800b926 <__kernel_cos+0xe6>
 800b96c:	2000      	movs	r0, #0
 800b96e:	4910      	ldr	r1, [pc, #64]	; (800b9b0 <__kernel_cos+0x170>)
 800b970:	e7db      	b.n	800b92a <__kernel_cos+0xea>
 800b972:	bf00      	nop
 800b974:	f3af 8000 	nop.w
 800b978:	be8838d4 	.word	0xbe8838d4
 800b97c:	bda8fae9 	.word	0xbda8fae9
 800b980:	bdb4b1c4 	.word	0xbdb4b1c4
 800b984:	3e21ee9e 	.word	0x3e21ee9e
 800b988:	809c52ad 	.word	0x809c52ad
 800b98c:	3e927e4f 	.word	0x3e927e4f
 800b990:	19cb1590 	.word	0x19cb1590
 800b994:	3efa01a0 	.word	0x3efa01a0
 800b998:	16c15177 	.word	0x16c15177
 800b99c:	3f56c16c 	.word	0x3f56c16c
 800b9a0:	5555554c 	.word	0x5555554c
 800b9a4:	3fa55555 	.word	0x3fa55555
 800b9a8:	3fe00000 	.word	0x3fe00000
 800b9ac:	3fd33332 	.word	0x3fd33332
 800b9b0:	3ff00000 	.word	0x3ff00000
 800b9b4:	3fe90000 	.word	0x3fe90000
 800b9b8:	3fd20000 	.word	0x3fd20000

0800b9bc <__kernel_rem_pio2>:
 800b9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b9c4:	9307      	str	r3, [sp, #28]
 800b9c6:	9104      	str	r1, [sp, #16]
 800b9c8:	4bbf      	ldr	r3, [pc, #764]	; (800bcc8 <__kernel_rem_pio2+0x30c>)
 800b9ca:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b9cc:	1ed4      	subs	r4, r2, #3
 800b9ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b9d2:	2500      	movs	r5, #0
 800b9d4:	9302      	str	r3, [sp, #8]
 800b9d6:	9b07      	ldr	r3, [sp, #28]
 800b9d8:	9008      	str	r0, [sp, #32]
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	9306      	str	r3, [sp, #24]
 800b9de:	2318      	movs	r3, #24
 800b9e0:	fb94 f4f3 	sdiv	r4, r4, r3
 800b9e4:	f06f 0317 	mvn.w	r3, #23
 800b9e8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b9ec:	fb04 3303 	mla	r3, r4, r3, r3
 800b9f0:	eb03 0a02 	add.w	sl, r3, r2
 800b9f4:	9a06      	ldr	r2, [sp, #24]
 800b9f6:	9b02      	ldr	r3, [sp, #8]
 800b9f8:	1aa7      	subs	r7, r4, r2
 800b9fa:	eb03 0802 	add.w	r8, r3, r2
 800b9fe:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ba00:	2200      	movs	r2, #0
 800ba02:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ba06:	2300      	movs	r3, #0
 800ba08:	ae1e      	add	r6, sp, #120	; 0x78
 800ba0a:	4545      	cmp	r5, r8
 800ba0c:	dd14      	ble.n	800ba38 <__kernel_rem_pio2+0x7c>
 800ba0e:	2600      	movs	r6, #0
 800ba10:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800ba14:	9b02      	ldr	r3, [sp, #8]
 800ba16:	429e      	cmp	r6, r3
 800ba18:	dc39      	bgt.n	800ba8e <__kernel_rem_pio2+0xd2>
 800ba1a:	9b08      	ldr	r3, [sp, #32]
 800ba1c:	f04f 0800 	mov.w	r8, #0
 800ba20:	3b08      	subs	r3, #8
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	9b07      	ldr	r3, [sp, #28]
 800ba26:	f04f 0900 	mov.w	r9, #0
 800ba2a:	199d      	adds	r5, r3, r6
 800ba2c:	ab20      	add	r3, sp, #128	; 0x80
 800ba2e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ba32:	9305      	str	r3, [sp, #20]
 800ba34:	2700      	movs	r7, #0
 800ba36:	e023      	b.n	800ba80 <__kernel_rem_pio2+0xc4>
 800ba38:	42ef      	cmn	r7, r5
 800ba3a:	d40b      	bmi.n	800ba54 <__kernel_rem_pio2+0x98>
 800ba3c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ba40:	e9cd 2300 	strd	r2, r3, [sp]
 800ba44:	f7f4 fcde 	bl	8000404 <__aeabi_i2d>
 800ba48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba4c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800ba50:	3501      	adds	r5, #1
 800ba52:	e7da      	b.n	800ba0a <__kernel_rem_pio2+0x4e>
 800ba54:	4610      	mov	r0, r2
 800ba56:	4619      	mov	r1, r3
 800ba58:	e7f8      	b.n	800ba4c <__kernel_rem_pio2+0x90>
 800ba5a:	9905      	ldr	r1, [sp, #20]
 800ba5c:	9d00      	ldr	r5, [sp, #0]
 800ba5e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800ba62:	9105      	str	r1, [sp, #20]
 800ba64:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800ba68:	9500      	str	r5, [sp, #0]
 800ba6a:	f7f4 fd35 	bl	80004d8 <__aeabi_dmul>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	460b      	mov	r3, r1
 800ba72:	4640      	mov	r0, r8
 800ba74:	4649      	mov	r1, r9
 800ba76:	f7f4 fb79 	bl	800016c <__adddf3>
 800ba7a:	4680      	mov	r8, r0
 800ba7c:	4689      	mov	r9, r1
 800ba7e:	3701      	adds	r7, #1
 800ba80:	9b06      	ldr	r3, [sp, #24]
 800ba82:	429f      	cmp	r7, r3
 800ba84:	dde9      	ble.n	800ba5a <__kernel_rem_pio2+0x9e>
 800ba86:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800ba8a:	3601      	adds	r6, #1
 800ba8c:	e7c2      	b.n	800ba14 <__kernel_rem_pio2+0x58>
 800ba8e:	9b02      	ldr	r3, [sp, #8]
 800ba90:	aa0c      	add	r2, sp, #48	; 0x30
 800ba92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba96:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba98:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ba9a:	9f02      	ldr	r7, [sp, #8]
 800ba9c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800baa0:	930a      	str	r3, [sp, #40]	; 0x28
 800baa2:	2600      	movs	r6, #0
 800baa4:	ab98      	add	r3, sp, #608	; 0x260
 800baa6:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800baaa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800baae:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bab2:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800bab6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800baba:	ab98      	add	r3, sp, #608	; 0x260
 800babc:	445b      	add	r3, fp
 800babe:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800bac2:	1bbb      	subs	r3, r7, r6
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	dc71      	bgt.n	800bbac <__kernel_rem_pio2+0x1f0>
 800bac8:	4652      	mov	r2, sl
 800baca:	4640      	mov	r0, r8
 800bacc:	4649      	mov	r1, r9
 800bace:	f000 fd0f 	bl	800c4f0 <scalbn>
 800bad2:	2200      	movs	r2, #0
 800bad4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bad8:	4604      	mov	r4, r0
 800bada:	460d      	mov	r5, r1
 800badc:	f7f4 fcfc 	bl	80004d8 <__aeabi_dmul>
 800bae0:	f7fe fce6 	bl	800a4b0 <floor>
 800bae4:	2200      	movs	r2, #0
 800bae6:	4b79      	ldr	r3, [pc, #484]	; (800bccc <__kernel_rem_pio2+0x310>)
 800bae8:	f7f4 fcf6 	bl	80004d8 <__aeabi_dmul>
 800baec:	4602      	mov	r2, r0
 800baee:	460b      	mov	r3, r1
 800baf0:	4620      	mov	r0, r4
 800baf2:	4629      	mov	r1, r5
 800baf4:	f7f4 fb38 	bl	8000168 <__aeabi_dsub>
 800baf8:	460d      	mov	r5, r1
 800bafa:	4604      	mov	r4, r0
 800bafc:	f7f4 ff9c 	bl	8000a38 <__aeabi_d2iz>
 800bb00:	9005      	str	r0, [sp, #20]
 800bb02:	f7f4 fc7f 	bl	8000404 <__aeabi_i2d>
 800bb06:	4602      	mov	r2, r0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	4629      	mov	r1, r5
 800bb0e:	f7f4 fb2b 	bl	8000168 <__aeabi_dsub>
 800bb12:	f1ba 0f00 	cmp.w	sl, #0
 800bb16:	4680      	mov	r8, r0
 800bb18:	4689      	mov	r9, r1
 800bb1a:	dd6c      	ble.n	800bbf6 <__kernel_rem_pio2+0x23a>
 800bb1c:	1e7a      	subs	r2, r7, #1
 800bb1e:	ab0c      	add	r3, sp, #48	; 0x30
 800bb20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bb24:	f1ca 0118 	rsb	r1, sl, #24
 800bb28:	9c05      	ldr	r4, [sp, #20]
 800bb2a:	fa40 f301 	asr.w	r3, r0, r1
 800bb2e:	441c      	add	r4, r3
 800bb30:	408b      	lsls	r3, r1
 800bb32:	1ac0      	subs	r0, r0, r3
 800bb34:	ab0c      	add	r3, sp, #48	; 0x30
 800bb36:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bb3a:	f1ca 0317 	rsb	r3, sl, #23
 800bb3e:	9405      	str	r4, [sp, #20]
 800bb40:	fa40 f303 	asr.w	r3, r0, r3
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	9b00      	ldr	r3, [sp, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	dd62      	ble.n	800bc12 <__kernel_rem_pio2+0x256>
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bb52:	4614      	mov	r4, r2
 800bb54:	9b05      	ldr	r3, [sp, #20]
 800bb56:	3301      	adds	r3, #1
 800bb58:	9305      	str	r3, [sp, #20]
 800bb5a:	4297      	cmp	r7, r2
 800bb5c:	f300 809f 	bgt.w	800bc9e <__kernel_rem_pio2+0x2e2>
 800bb60:	f1ba 0f00 	cmp.w	sl, #0
 800bb64:	dd07      	ble.n	800bb76 <__kernel_rem_pio2+0x1ba>
 800bb66:	f1ba 0f01 	cmp.w	sl, #1
 800bb6a:	f000 80bb 	beq.w	800bce4 <__kernel_rem_pio2+0x328>
 800bb6e:	f1ba 0f02 	cmp.w	sl, #2
 800bb72:	f000 80c1 	beq.w	800bcf8 <__kernel_rem_pio2+0x33c>
 800bb76:	9b00      	ldr	r3, [sp, #0]
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	d14a      	bne.n	800bc12 <__kernel_rem_pio2+0x256>
 800bb7c:	4642      	mov	r2, r8
 800bb7e:	464b      	mov	r3, r9
 800bb80:	2000      	movs	r0, #0
 800bb82:	4953      	ldr	r1, [pc, #332]	; (800bcd0 <__kernel_rem_pio2+0x314>)
 800bb84:	f7f4 faf0 	bl	8000168 <__aeabi_dsub>
 800bb88:	4680      	mov	r8, r0
 800bb8a:	4689      	mov	r9, r1
 800bb8c:	2c00      	cmp	r4, #0
 800bb8e:	d040      	beq.n	800bc12 <__kernel_rem_pio2+0x256>
 800bb90:	4652      	mov	r2, sl
 800bb92:	2000      	movs	r0, #0
 800bb94:	494e      	ldr	r1, [pc, #312]	; (800bcd0 <__kernel_rem_pio2+0x314>)
 800bb96:	f000 fcab 	bl	800c4f0 <scalbn>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	4640      	mov	r0, r8
 800bba0:	4649      	mov	r1, r9
 800bba2:	f7f4 fae1 	bl	8000168 <__aeabi_dsub>
 800bba6:	4680      	mov	r8, r0
 800bba8:	4689      	mov	r9, r1
 800bbaa:	e032      	b.n	800bc12 <__kernel_rem_pio2+0x256>
 800bbac:	2200      	movs	r2, #0
 800bbae:	4b49      	ldr	r3, [pc, #292]	; (800bcd4 <__kernel_rem_pio2+0x318>)
 800bbb0:	4640      	mov	r0, r8
 800bbb2:	4649      	mov	r1, r9
 800bbb4:	f7f4 fc90 	bl	80004d8 <__aeabi_dmul>
 800bbb8:	f7f4 ff3e 	bl	8000a38 <__aeabi_d2iz>
 800bbbc:	f7f4 fc22 	bl	8000404 <__aeabi_i2d>
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	4b45      	ldr	r3, [pc, #276]	; (800bcd8 <__kernel_rem_pio2+0x31c>)
 800bbc4:	e9cd 0100 	strd	r0, r1, [sp]
 800bbc8:	f7f4 fc86 	bl	80004d8 <__aeabi_dmul>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4640      	mov	r0, r8
 800bbd2:	4649      	mov	r1, r9
 800bbd4:	f7f4 fac8 	bl	8000168 <__aeabi_dsub>
 800bbd8:	f7f4 ff2e 	bl	8000a38 <__aeabi_d2iz>
 800bbdc:	ab0c      	add	r3, sp, #48	; 0x30
 800bbde:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800bbe2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bbe6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbea:	f7f4 fabf 	bl	800016c <__adddf3>
 800bbee:	3601      	adds	r6, #1
 800bbf0:	4680      	mov	r8, r0
 800bbf2:	4689      	mov	r9, r1
 800bbf4:	e765      	b.n	800bac2 <__kernel_rem_pio2+0x106>
 800bbf6:	d105      	bne.n	800bc04 <__kernel_rem_pio2+0x248>
 800bbf8:	1e7b      	subs	r3, r7, #1
 800bbfa:	aa0c      	add	r2, sp, #48	; 0x30
 800bbfc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bc00:	15c3      	asrs	r3, r0, #23
 800bc02:	e79f      	b.n	800bb44 <__kernel_rem_pio2+0x188>
 800bc04:	2200      	movs	r2, #0
 800bc06:	4b35      	ldr	r3, [pc, #212]	; (800bcdc <__kernel_rem_pio2+0x320>)
 800bc08:	f7f4 feec 	bl	80009e4 <__aeabi_dcmpge>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d143      	bne.n	800bc98 <__kernel_rem_pio2+0x2dc>
 800bc10:	9000      	str	r0, [sp, #0]
 800bc12:	2200      	movs	r2, #0
 800bc14:	2300      	movs	r3, #0
 800bc16:	4640      	mov	r0, r8
 800bc18:	4649      	mov	r1, r9
 800bc1a:	f7f4 fec5 	bl	80009a8 <__aeabi_dcmpeq>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	f000 80c3 	beq.w	800bdaa <__kernel_rem_pio2+0x3ee>
 800bc24:	1e7c      	subs	r4, r7, #1
 800bc26:	4623      	mov	r3, r4
 800bc28:	2200      	movs	r2, #0
 800bc2a:	9902      	ldr	r1, [sp, #8]
 800bc2c:	428b      	cmp	r3, r1
 800bc2e:	da6a      	bge.n	800bd06 <__kernel_rem_pio2+0x34a>
 800bc30:	2a00      	cmp	r2, #0
 800bc32:	f000 8084 	beq.w	800bd3e <__kernel_rem_pio2+0x382>
 800bc36:	ab0c      	add	r3, sp, #48	; 0x30
 800bc38:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bc3c:	f1aa 0a18 	sub.w	sl, sl, #24
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	f000 80b0 	beq.w	800bda6 <__kernel_rem_pio2+0x3ea>
 800bc46:	4652      	mov	r2, sl
 800bc48:	2000      	movs	r0, #0
 800bc4a:	4921      	ldr	r1, [pc, #132]	; (800bcd0 <__kernel_rem_pio2+0x314>)
 800bc4c:	f000 fc50 	bl	800c4f0 <scalbn>
 800bc50:	4625      	mov	r5, r4
 800bc52:	4606      	mov	r6, r0
 800bc54:	460f      	mov	r7, r1
 800bc56:	f04f 0a00 	mov.w	sl, #0
 800bc5a:	00e3      	lsls	r3, r4, #3
 800bc5c:	aa98      	add	r2, sp, #608	; 0x260
 800bc5e:	eb02 0803 	add.w	r8, r2, r3
 800bc62:	f8df b070 	ldr.w	fp, [pc, #112]	; 800bcd4 <__kernel_rem_pio2+0x318>
 800bc66:	9306      	str	r3, [sp, #24]
 800bc68:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800bc6c:	2d00      	cmp	r5, #0
 800bc6e:	f280 80d2 	bge.w	800be16 <__kernel_rem_pio2+0x45a>
 800bc72:	2500      	movs	r5, #0
 800bc74:	9a06      	ldr	r2, [sp, #24]
 800bc76:	ab98      	add	r3, sp, #608	; 0x260
 800bc78:	189e      	adds	r6, r3, r2
 800bc7a:	3ea8      	subs	r6, #168	; 0xa8
 800bc7c:	1b63      	subs	r3, r4, r5
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f2c0 80f9 	blt.w	800be76 <__kernel_rem_pio2+0x4ba>
 800bc84:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800bce0 <__kernel_rem_pio2+0x324>
 800bc88:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800bc8c:	f04f 0a00 	mov.w	sl, #0
 800bc90:	f04f 0b00 	mov.w	fp, #0
 800bc94:	2700      	movs	r7, #0
 800bc96:	e0e2      	b.n	800be5e <__kernel_rem_pio2+0x4a2>
 800bc98:	2302      	movs	r3, #2
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	e756      	b.n	800bb4c <__kernel_rem_pio2+0x190>
 800bc9e:	ab0c      	add	r3, sp, #48	; 0x30
 800bca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bca4:	b94c      	cbnz	r4, 800bcba <__kernel_rem_pio2+0x2fe>
 800bca6:	b12b      	cbz	r3, 800bcb4 <__kernel_rem_pio2+0x2f8>
 800bca8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bcac:	a80c      	add	r0, sp, #48	; 0x30
 800bcae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	3201      	adds	r2, #1
 800bcb6:	461c      	mov	r4, r3
 800bcb8:	e74f      	b.n	800bb5a <__kernel_rem_pio2+0x19e>
 800bcba:	1acb      	subs	r3, r1, r3
 800bcbc:	a80c      	add	r0, sp, #48	; 0x30
 800bcbe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800bcc2:	4623      	mov	r3, r4
 800bcc4:	e7f6      	b.n	800bcb4 <__kernel_rem_pio2+0x2f8>
 800bcc6:	bf00      	nop
 800bcc8:	0800cc88 	.word	0x0800cc88
 800bccc:	40200000 	.word	0x40200000
 800bcd0:	3ff00000 	.word	0x3ff00000
 800bcd4:	3e700000 	.word	0x3e700000
 800bcd8:	41700000 	.word	0x41700000
 800bcdc:	3fe00000 	.word	0x3fe00000
 800bce0:	0800cc40 	.word	0x0800cc40
 800bce4:	1e7a      	subs	r2, r7, #1
 800bce6:	ab0c      	add	r3, sp, #48	; 0x30
 800bce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bcf0:	a90c      	add	r1, sp, #48	; 0x30
 800bcf2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bcf6:	e73e      	b.n	800bb76 <__kernel_rem_pio2+0x1ba>
 800bcf8:	1e7a      	subs	r2, r7, #1
 800bcfa:	ab0c      	add	r3, sp, #48	; 0x30
 800bcfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bd04:	e7f4      	b.n	800bcf0 <__kernel_rem_pio2+0x334>
 800bd06:	a90c      	add	r1, sp, #48	; 0x30
 800bd08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	430a      	orrs	r2, r1
 800bd10:	e78b      	b.n	800bc2a <__kernel_rem_pio2+0x26e>
 800bd12:	3401      	adds	r4, #1
 800bd14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bd18:	2a00      	cmp	r2, #0
 800bd1a:	d0fa      	beq.n	800bd12 <__kernel_rem_pio2+0x356>
 800bd1c:	ab98      	add	r3, sp, #608	; 0x260
 800bd1e:	449b      	add	fp, r3
 800bd20:	9b07      	ldr	r3, [sp, #28]
 800bd22:	1c7e      	adds	r6, r7, #1
 800bd24:	19dd      	adds	r5, r3, r7
 800bd26:	ab98      	add	r3, sp, #608	; 0x260
 800bd28:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bd2c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800bd30:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800bd34:	443c      	add	r4, r7
 800bd36:	42b4      	cmp	r4, r6
 800bd38:	da04      	bge.n	800bd44 <__kernel_rem_pio2+0x388>
 800bd3a:	4627      	mov	r7, r4
 800bd3c:	e6b1      	b.n	800baa2 <__kernel_rem_pio2+0xe6>
 800bd3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd40:	2401      	movs	r4, #1
 800bd42:	e7e7      	b.n	800bd14 <__kernel_rem_pio2+0x358>
 800bd44:	f105 0308 	add.w	r3, r5, #8
 800bd48:	9309      	str	r3, [sp, #36]	; 0x24
 800bd4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd4c:	2700      	movs	r7, #0
 800bd4e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bd52:	f7f4 fb57 	bl	8000404 <__aeabi_i2d>
 800bd56:	f04f 0800 	mov.w	r8, #0
 800bd5a:	f04f 0900 	mov.w	r9, #0
 800bd5e:	9b08      	ldr	r3, [sp, #32]
 800bd60:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800bd64:	3b08      	subs	r3, #8
 800bd66:	9300      	str	r3, [sp, #0]
 800bd68:	f105 0310 	add.w	r3, r5, #16
 800bd6c:	9305      	str	r3, [sp, #20]
 800bd6e:	9b06      	ldr	r3, [sp, #24]
 800bd70:	429f      	cmp	r7, r3
 800bd72:	dd04      	ble.n	800bd7e <__kernel_rem_pio2+0x3c2>
 800bd74:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800bd78:	3601      	adds	r6, #1
 800bd7a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bd7c:	e7db      	b.n	800bd36 <__kernel_rem_pio2+0x37a>
 800bd7e:	9905      	ldr	r1, [sp, #20]
 800bd80:	9d00      	ldr	r5, [sp, #0]
 800bd82:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800bd86:	9105      	str	r1, [sp, #20]
 800bd88:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800bd8c:	9500      	str	r5, [sp, #0]
 800bd8e:	f7f4 fba3 	bl	80004d8 <__aeabi_dmul>
 800bd92:	4602      	mov	r2, r0
 800bd94:	460b      	mov	r3, r1
 800bd96:	4640      	mov	r0, r8
 800bd98:	4649      	mov	r1, r9
 800bd9a:	f7f4 f9e7 	bl	800016c <__adddf3>
 800bd9e:	3701      	adds	r7, #1
 800bda0:	4680      	mov	r8, r0
 800bda2:	4689      	mov	r9, r1
 800bda4:	e7e3      	b.n	800bd6e <__kernel_rem_pio2+0x3b2>
 800bda6:	3c01      	subs	r4, #1
 800bda8:	e745      	b.n	800bc36 <__kernel_rem_pio2+0x27a>
 800bdaa:	f1ca 0200 	rsb	r2, sl, #0
 800bdae:	4640      	mov	r0, r8
 800bdb0:	4649      	mov	r1, r9
 800bdb2:	f000 fb9d 	bl	800c4f0 <scalbn>
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	4ba3      	ldr	r3, [pc, #652]	; (800c048 <__kernel_rem_pio2+0x68c>)
 800bdba:	4604      	mov	r4, r0
 800bdbc:	460d      	mov	r5, r1
 800bdbe:	f7f4 fe11 	bl	80009e4 <__aeabi_dcmpge>
 800bdc2:	b1f8      	cbz	r0, 800be04 <__kernel_rem_pio2+0x448>
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	4ba1      	ldr	r3, [pc, #644]	; (800c04c <__kernel_rem_pio2+0x690>)
 800bdc8:	4620      	mov	r0, r4
 800bdca:	4629      	mov	r1, r5
 800bdcc:	f7f4 fb84 	bl	80004d8 <__aeabi_dmul>
 800bdd0:	f7f4 fe32 	bl	8000a38 <__aeabi_d2iz>
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	f7f4 fb15 	bl	8000404 <__aeabi_i2d>
 800bdda:	2200      	movs	r2, #0
 800bddc:	4b9a      	ldr	r3, [pc, #616]	; (800c048 <__kernel_rem_pio2+0x68c>)
 800bdde:	f7f4 fb7b 	bl	80004d8 <__aeabi_dmul>
 800bde2:	460b      	mov	r3, r1
 800bde4:	4602      	mov	r2, r0
 800bde6:	4629      	mov	r1, r5
 800bde8:	4620      	mov	r0, r4
 800bdea:	f7f4 f9bd 	bl	8000168 <__aeabi_dsub>
 800bdee:	f7f4 fe23 	bl	8000a38 <__aeabi_d2iz>
 800bdf2:	1c7c      	adds	r4, r7, #1
 800bdf4:	ab0c      	add	r3, sp, #48	; 0x30
 800bdf6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bdfa:	f10a 0a18 	add.w	sl, sl, #24
 800bdfe:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800be02:	e720      	b.n	800bc46 <__kernel_rem_pio2+0x28a>
 800be04:	4620      	mov	r0, r4
 800be06:	4629      	mov	r1, r5
 800be08:	f7f4 fe16 	bl	8000a38 <__aeabi_d2iz>
 800be0c:	ab0c      	add	r3, sp, #48	; 0x30
 800be0e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800be12:	463c      	mov	r4, r7
 800be14:	e717      	b.n	800bc46 <__kernel_rem_pio2+0x28a>
 800be16:	ab0c      	add	r3, sp, #48	; 0x30
 800be18:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be1c:	f7f4 faf2 	bl	8000404 <__aeabi_i2d>
 800be20:	4632      	mov	r2, r6
 800be22:	463b      	mov	r3, r7
 800be24:	f7f4 fb58 	bl	80004d8 <__aeabi_dmul>
 800be28:	4652      	mov	r2, sl
 800be2a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800be2e:	465b      	mov	r3, fp
 800be30:	4630      	mov	r0, r6
 800be32:	4639      	mov	r1, r7
 800be34:	f7f4 fb50 	bl	80004d8 <__aeabi_dmul>
 800be38:	3d01      	subs	r5, #1
 800be3a:	4606      	mov	r6, r0
 800be3c:	460f      	mov	r7, r1
 800be3e:	e715      	b.n	800bc6c <__kernel_rem_pio2+0x2b0>
 800be40:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800be44:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800be48:	f7f4 fb46 	bl	80004d8 <__aeabi_dmul>
 800be4c:	4602      	mov	r2, r0
 800be4e:	460b      	mov	r3, r1
 800be50:	4650      	mov	r0, sl
 800be52:	4659      	mov	r1, fp
 800be54:	f7f4 f98a 	bl	800016c <__adddf3>
 800be58:	4682      	mov	sl, r0
 800be5a:	468b      	mov	fp, r1
 800be5c:	3701      	adds	r7, #1
 800be5e:	9b02      	ldr	r3, [sp, #8]
 800be60:	429f      	cmp	r7, r3
 800be62:	dc01      	bgt.n	800be68 <__kernel_rem_pio2+0x4ac>
 800be64:	42bd      	cmp	r5, r7
 800be66:	daeb      	bge.n	800be40 <__kernel_rem_pio2+0x484>
 800be68:	ab48      	add	r3, sp, #288	; 0x120
 800be6a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800be6e:	e9c3 ab00 	strd	sl, fp, [r3]
 800be72:	3501      	adds	r5, #1
 800be74:	e702      	b.n	800bc7c <__kernel_rem_pio2+0x2c0>
 800be76:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800be78:	2b03      	cmp	r3, #3
 800be7a:	d86c      	bhi.n	800bf56 <__kernel_rem_pio2+0x59a>
 800be7c:	e8df f003 	tbb	[pc, r3]
 800be80:	022f2f59 	.word	0x022f2f59
 800be84:	9a06      	ldr	r2, [sp, #24]
 800be86:	ab48      	add	r3, sp, #288	; 0x120
 800be88:	189d      	adds	r5, r3, r2
 800be8a:	46aa      	mov	sl, r5
 800be8c:	46a3      	mov	fp, r4
 800be8e:	f1bb 0f00 	cmp.w	fp, #0
 800be92:	f300 8087 	bgt.w	800bfa4 <__kernel_rem_pio2+0x5e8>
 800be96:	46a2      	mov	sl, r4
 800be98:	f1ba 0f01 	cmp.w	sl, #1
 800be9c:	f300 809f 	bgt.w	800bfde <__kernel_rem_pio2+0x622>
 800bea0:	2700      	movs	r7, #0
 800bea2:	463e      	mov	r6, r7
 800bea4:	9d06      	ldr	r5, [sp, #24]
 800bea6:	ab48      	add	r3, sp, #288	; 0x120
 800bea8:	3508      	adds	r5, #8
 800beaa:	441d      	add	r5, r3
 800beac:	2c01      	cmp	r4, #1
 800beae:	f300 80b3 	bgt.w	800c018 <__kernel_rem_pio2+0x65c>
 800beb2:	9b00      	ldr	r3, [sp, #0]
 800beb4:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800beb6:	9849      	ldr	r0, [sp, #292]	; 0x124
 800beb8:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800beba:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f040 80b5 	bne.w	800c02c <__kernel_rem_pio2+0x670>
 800bec2:	4603      	mov	r3, r0
 800bec4:	462a      	mov	r2, r5
 800bec6:	9804      	ldr	r0, [sp, #16]
 800bec8:	e9c0 2300 	strd	r2, r3, [r0]
 800becc:	4622      	mov	r2, r4
 800bece:	460b      	mov	r3, r1
 800bed0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bed4:	463a      	mov	r2, r7
 800bed6:	4633      	mov	r3, r6
 800bed8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bedc:	e03b      	b.n	800bf56 <__kernel_rem_pio2+0x59a>
 800bede:	f04f 0c00 	mov.w	ip, #0
 800bee2:	4626      	mov	r6, r4
 800bee4:	4667      	mov	r7, ip
 800bee6:	9d06      	ldr	r5, [sp, #24]
 800bee8:	ab48      	add	r3, sp, #288	; 0x120
 800beea:	3508      	adds	r5, #8
 800beec:	441d      	add	r5, r3
 800beee:	2e00      	cmp	r6, #0
 800bef0:	da42      	bge.n	800bf78 <__kernel_rem_pio2+0x5bc>
 800bef2:	9b00      	ldr	r3, [sp, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d049      	beq.n	800bf8c <__kernel_rem_pio2+0x5d0>
 800bef8:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800befc:	4662      	mov	r2, ip
 800befe:	460b      	mov	r3, r1
 800bf00:	9904      	ldr	r1, [sp, #16]
 800bf02:	2601      	movs	r6, #1
 800bf04:	e9c1 2300 	strd	r2, r3, [r1]
 800bf08:	a948      	add	r1, sp, #288	; 0x120
 800bf0a:	463b      	mov	r3, r7
 800bf0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf10:	f7f4 f92a 	bl	8000168 <__aeabi_dsub>
 800bf14:	4684      	mov	ip, r0
 800bf16:	460f      	mov	r7, r1
 800bf18:	ad48      	add	r5, sp, #288	; 0x120
 800bf1a:	42b4      	cmp	r4, r6
 800bf1c:	da38      	bge.n	800bf90 <__kernel_rem_pio2+0x5d4>
 800bf1e:	9b00      	ldr	r3, [sp, #0]
 800bf20:	b10b      	cbz	r3, 800bf26 <__kernel_rem_pio2+0x56a>
 800bf22:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bf26:	4662      	mov	r2, ip
 800bf28:	463b      	mov	r3, r7
 800bf2a:	9904      	ldr	r1, [sp, #16]
 800bf2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800bf30:	e011      	b.n	800bf56 <__kernel_rem_pio2+0x59a>
 800bf32:	2700      	movs	r7, #0
 800bf34:	463d      	mov	r5, r7
 800bf36:	9b06      	ldr	r3, [sp, #24]
 800bf38:	aa98      	add	r2, sp, #608	; 0x260
 800bf3a:	4413      	add	r3, r2
 800bf3c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800bf40:	2c00      	cmp	r4, #0
 800bf42:	da0f      	bge.n	800bf64 <__kernel_rem_pio2+0x5a8>
 800bf44:	9b00      	ldr	r3, [sp, #0]
 800bf46:	b10b      	cbz	r3, 800bf4c <__kernel_rem_pio2+0x590>
 800bf48:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800bf4c:	463a      	mov	r2, r7
 800bf4e:	462b      	mov	r3, r5
 800bf50:	9904      	ldr	r1, [sp, #16]
 800bf52:	e9c1 2300 	strd	r2, r3, [r1]
 800bf56:	9b05      	ldr	r3, [sp, #20]
 800bf58:	f003 0007 	and.w	r0, r3, #7
 800bf5c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bf60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf64:	4638      	mov	r0, r7
 800bf66:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800bf6a:	4629      	mov	r1, r5
 800bf6c:	f7f4 f8fe 	bl	800016c <__adddf3>
 800bf70:	3c01      	subs	r4, #1
 800bf72:	4607      	mov	r7, r0
 800bf74:	460d      	mov	r5, r1
 800bf76:	e7e3      	b.n	800bf40 <__kernel_rem_pio2+0x584>
 800bf78:	4660      	mov	r0, ip
 800bf7a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bf7e:	4639      	mov	r1, r7
 800bf80:	f7f4 f8f4 	bl	800016c <__adddf3>
 800bf84:	3e01      	subs	r6, #1
 800bf86:	4684      	mov	ip, r0
 800bf88:	460f      	mov	r7, r1
 800bf8a:	e7b0      	b.n	800beee <__kernel_rem_pio2+0x532>
 800bf8c:	4639      	mov	r1, r7
 800bf8e:	e7b5      	b.n	800befc <__kernel_rem_pio2+0x540>
 800bf90:	4660      	mov	r0, ip
 800bf92:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800bf96:	4639      	mov	r1, r7
 800bf98:	f7f4 f8e8 	bl	800016c <__adddf3>
 800bf9c:	3601      	adds	r6, #1
 800bf9e:	4684      	mov	ip, r0
 800bfa0:	460f      	mov	r7, r1
 800bfa2:	e7ba      	b.n	800bf1a <__kernel_rem_pio2+0x55e>
 800bfa4:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800bfa8:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800bfac:	4640      	mov	r0, r8
 800bfae:	4649      	mov	r1, r9
 800bfb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfb4:	f7f4 f8da 	bl	800016c <__adddf3>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	460b      	mov	r3, r1
 800bfbc:	4606      	mov	r6, r0
 800bfbe:	460f      	mov	r7, r1
 800bfc0:	4640      	mov	r0, r8
 800bfc2:	4649      	mov	r1, r9
 800bfc4:	f7f4 f8d0 	bl	8000168 <__aeabi_dsub>
 800bfc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfcc:	f7f4 f8ce 	bl	800016c <__adddf3>
 800bfd0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bfd4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bfd8:	e9ca 6700 	strd	r6, r7, [sl]
 800bfdc:	e757      	b.n	800be8e <__kernel_rem_pio2+0x4d2>
 800bfde:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800bfe2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	4639      	mov	r1, r7
 800bfea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfee:	f7f4 f8bd 	bl	800016c <__adddf3>
 800bff2:	4602      	mov	r2, r0
 800bff4:	460b      	mov	r3, r1
 800bff6:	4680      	mov	r8, r0
 800bff8:	4689      	mov	r9, r1
 800bffa:	4630      	mov	r0, r6
 800bffc:	4639      	mov	r1, r7
 800bffe:	f7f4 f8b3 	bl	8000168 <__aeabi_dsub>
 800c002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c006:	f7f4 f8b1 	bl	800016c <__adddf3>
 800c00a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c00e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c012:	e9c5 8900 	strd	r8, r9, [r5]
 800c016:	e73f      	b.n	800be98 <__kernel_rem_pio2+0x4dc>
 800c018:	4638      	mov	r0, r7
 800c01a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c01e:	4631      	mov	r1, r6
 800c020:	f7f4 f8a4 	bl	800016c <__adddf3>
 800c024:	3c01      	subs	r4, #1
 800c026:	4607      	mov	r7, r0
 800c028:	460e      	mov	r6, r1
 800c02a:	e73f      	b.n	800beac <__kernel_rem_pio2+0x4f0>
 800c02c:	9b04      	ldr	r3, [sp, #16]
 800c02e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c032:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c036:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c03a:	601d      	str	r5, [r3, #0]
 800c03c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800c040:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800c044:	615e      	str	r6, [r3, #20]
 800c046:	e786      	b.n	800bf56 <__kernel_rem_pio2+0x59a>
 800c048:	41700000 	.word	0x41700000
 800c04c:	3e700000 	.word	0x3e700000

0800c050 <__kernel_sin>:
 800c050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c054:	b086      	sub	sp, #24
 800c056:	e9cd 2300 	strd	r2, r3, [sp]
 800c05a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c05e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c062:	4682      	mov	sl, r0
 800c064:	460c      	mov	r4, r1
 800c066:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c068:	da03      	bge.n	800c072 <__kernel_sin+0x22>
 800c06a:	f7f4 fce5 	bl	8000a38 <__aeabi_d2iz>
 800c06e:	2800      	cmp	r0, #0
 800c070:	d050      	beq.n	800c114 <__kernel_sin+0xc4>
 800c072:	4652      	mov	r2, sl
 800c074:	4623      	mov	r3, r4
 800c076:	4650      	mov	r0, sl
 800c078:	4621      	mov	r1, r4
 800c07a:	f7f4 fa2d 	bl	80004d8 <__aeabi_dmul>
 800c07e:	4606      	mov	r6, r0
 800c080:	460f      	mov	r7, r1
 800c082:	4602      	mov	r2, r0
 800c084:	460b      	mov	r3, r1
 800c086:	4650      	mov	r0, sl
 800c088:	4621      	mov	r1, r4
 800c08a:	f7f4 fa25 	bl	80004d8 <__aeabi_dmul>
 800c08e:	a33e      	add	r3, pc, #248	; (adr r3, 800c188 <__kernel_sin+0x138>)
 800c090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c094:	4680      	mov	r8, r0
 800c096:	4689      	mov	r9, r1
 800c098:	4630      	mov	r0, r6
 800c09a:	4639      	mov	r1, r7
 800c09c:	f7f4 fa1c 	bl	80004d8 <__aeabi_dmul>
 800c0a0:	a33b      	add	r3, pc, #236	; (adr r3, 800c190 <__kernel_sin+0x140>)
 800c0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a6:	f7f4 f85f 	bl	8000168 <__aeabi_dsub>
 800c0aa:	4632      	mov	r2, r6
 800c0ac:	463b      	mov	r3, r7
 800c0ae:	f7f4 fa13 	bl	80004d8 <__aeabi_dmul>
 800c0b2:	a339      	add	r3, pc, #228	; (adr r3, 800c198 <__kernel_sin+0x148>)
 800c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b8:	f7f4 f858 	bl	800016c <__adddf3>
 800c0bc:	4632      	mov	r2, r6
 800c0be:	463b      	mov	r3, r7
 800c0c0:	f7f4 fa0a 	bl	80004d8 <__aeabi_dmul>
 800c0c4:	a336      	add	r3, pc, #216	; (adr r3, 800c1a0 <__kernel_sin+0x150>)
 800c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ca:	f7f4 f84d 	bl	8000168 <__aeabi_dsub>
 800c0ce:	4632      	mov	r2, r6
 800c0d0:	463b      	mov	r3, r7
 800c0d2:	f7f4 fa01 	bl	80004d8 <__aeabi_dmul>
 800c0d6:	a334      	add	r3, pc, #208	; (adr r3, 800c1a8 <__kernel_sin+0x158>)
 800c0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0dc:	f7f4 f846 	bl	800016c <__adddf3>
 800c0e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0e4:	b9dd      	cbnz	r5, 800c11e <__kernel_sin+0xce>
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	4639      	mov	r1, r7
 800c0ee:	f7f4 f9f3 	bl	80004d8 <__aeabi_dmul>
 800c0f2:	a32f      	add	r3, pc, #188	; (adr r3, 800c1b0 <__kernel_sin+0x160>)
 800c0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f8:	f7f4 f836 	bl	8000168 <__aeabi_dsub>
 800c0fc:	4642      	mov	r2, r8
 800c0fe:	464b      	mov	r3, r9
 800c100:	f7f4 f9ea 	bl	80004d8 <__aeabi_dmul>
 800c104:	4602      	mov	r2, r0
 800c106:	460b      	mov	r3, r1
 800c108:	4650      	mov	r0, sl
 800c10a:	4621      	mov	r1, r4
 800c10c:	f7f4 f82e 	bl	800016c <__adddf3>
 800c110:	4682      	mov	sl, r0
 800c112:	460c      	mov	r4, r1
 800c114:	4650      	mov	r0, sl
 800c116:	4621      	mov	r1, r4
 800c118:	b006      	add	sp, #24
 800c11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c11e:	2200      	movs	r2, #0
 800c120:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c124:	4b24      	ldr	r3, [pc, #144]	; (800c1b8 <__kernel_sin+0x168>)
 800c126:	f7f4 f9d7 	bl	80004d8 <__aeabi_dmul>
 800c12a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c12e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c132:	4640      	mov	r0, r8
 800c134:	4649      	mov	r1, r9
 800c136:	f7f4 f9cf 	bl	80004d8 <__aeabi_dmul>
 800c13a:	4602      	mov	r2, r0
 800c13c:	460b      	mov	r3, r1
 800c13e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c142:	f7f4 f811 	bl	8000168 <__aeabi_dsub>
 800c146:	4632      	mov	r2, r6
 800c148:	463b      	mov	r3, r7
 800c14a:	f7f4 f9c5 	bl	80004d8 <__aeabi_dmul>
 800c14e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c152:	f7f4 f809 	bl	8000168 <__aeabi_dsub>
 800c156:	a316      	add	r3, pc, #88	; (adr r3, 800c1b0 <__kernel_sin+0x160>)
 800c158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15c:	4606      	mov	r6, r0
 800c15e:	460f      	mov	r7, r1
 800c160:	4640      	mov	r0, r8
 800c162:	4649      	mov	r1, r9
 800c164:	f7f4 f9b8 	bl	80004d8 <__aeabi_dmul>
 800c168:	4602      	mov	r2, r0
 800c16a:	460b      	mov	r3, r1
 800c16c:	4630      	mov	r0, r6
 800c16e:	4639      	mov	r1, r7
 800c170:	f7f3 fffc 	bl	800016c <__adddf3>
 800c174:	4602      	mov	r2, r0
 800c176:	460b      	mov	r3, r1
 800c178:	4650      	mov	r0, sl
 800c17a:	4621      	mov	r1, r4
 800c17c:	f7f3 fff4 	bl	8000168 <__aeabi_dsub>
 800c180:	e7c6      	b.n	800c110 <__kernel_sin+0xc0>
 800c182:	bf00      	nop
 800c184:	f3af 8000 	nop.w
 800c188:	5acfd57c 	.word	0x5acfd57c
 800c18c:	3de5d93a 	.word	0x3de5d93a
 800c190:	8a2b9ceb 	.word	0x8a2b9ceb
 800c194:	3e5ae5e6 	.word	0x3e5ae5e6
 800c198:	57b1fe7d 	.word	0x57b1fe7d
 800c19c:	3ec71de3 	.word	0x3ec71de3
 800c1a0:	19c161d5 	.word	0x19c161d5
 800c1a4:	3f2a01a0 	.word	0x3f2a01a0
 800c1a8:	1110f8a6 	.word	0x1110f8a6
 800c1ac:	3f811111 	.word	0x3f811111
 800c1b0:	55555549 	.word	0x55555549
 800c1b4:	3fc55555 	.word	0x3fc55555
 800c1b8:	3fe00000 	.word	0x3fe00000
 800c1bc:	00000000 	.word	0x00000000

0800c1c0 <atan>:
 800c1c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c4:	4bb6      	ldr	r3, [pc, #728]	; (800c4a0 <atan+0x2e0>)
 800c1c6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c1ca:	429e      	cmp	r6, r3
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	460d      	mov	r5, r1
 800c1d0:	468b      	mov	fp, r1
 800c1d2:	dd17      	ble.n	800c204 <atan+0x44>
 800c1d4:	4bb3      	ldr	r3, [pc, #716]	; (800c4a4 <atan+0x2e4>)
 800c1d6:	429e      	cmp	r6, r3
 800c1d8:	dc01      	bgt.n	800c1de <atan+0x1e>
 800c1da:	d109      	bne.n	800c1f0 <atan+0x30>
 800c1dc:	b140      	cbz	r0, 800c1f0 <atan+0x30>
 800c1de:	4622      	mov	r2, r4
 800c1e0:	462b      	mov	r3, r5
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	f7f3 ffc1 	bl	800016c <__adddf3>
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	460d      	mov	r5, r1
 800c1ee:	e005      	b.n	800c1fc <atan+0x3c>
 800c1f0:	f1bb 0f00 	cmp.w	fp, #0
 800c1f4:	4cac      	ldr	r4, [pc, #688]	; (800c4a8 <atan+0x2e8>)
 800c1f6:	f340 8121 	ble.w	800c43c <atan+0x27c>
 800c1fa:	4dac      	ldr	r5, [pc, #688]	; (800c4ac <atan+0x2ec>)
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	4629      	mov	r1, r5
 800c200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c204:	4baa      	ldr	r3, [pc, #680]	; (800c4b0 <atan+0x2f0>)
 800c206:	429e      	cmp	r6, r3
 800c208:	dc11      	bgt.n	800c22e <atan+0x6e>
 800c20a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c20e:	429e      	cmp	r6, r3
 800c210:	dc0a      	bgt.n	800c228 <atan+0x68>
 800c212:	a38b      	add	r3, pc, #556	; (adr r3, 800c440 <atan+0x280>)
 800c214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c218:	f7f3 ffa8 	bl	800016c <__adddf3>
 800c21c:	2200      	movs	r2, #0
 800c21e:	4ba5      	ldr	r3, [pc, #660]	; (800c4b4 <atan+0x2f4>)
 800c220:	f7f4 fbea 	bl	80009f8 <__aeabi_dcmpgt>
 800c224:	2800      	cmp	r0, #0
 800c226:	d1e9      	bne.n	800c1fc <atan+0x3c>
 800c228:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c22c:	e027      	b.n	800c27e <atan+0xbe>
 800c22e:	f000 f951 	bl	800c4d4 <fabs>
 800c232:	4ba1      	ldr	r3, [pc, #644]	; (800c4b8 <atan+0x2f8>)
 800c234:	4604      	mov	r4, r0
 800c236:	429e      	cmp	r6, r3
 800c238:	460d      	mov	r5, r1
 800c23a:	f300 80b8 	bgt.w	800c3ae <atan+0x1ee>
 800c23e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c242:	429e      	cmp	r6, r3
 800c244:	f300 809c 	bgt.w	800c380 <atan+0x1c0>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	f7f3 ff8e 	bl	800016c <__adddf3>
 800c250:	2200      	movs	r2, #0
 800c252:	4b98      	ldr	r3, [pc, #608]	; (800c4b4 <atan+0x2f4>)
 800c254:	f7f3 ff88 	bl	8000168 <__aeabi_dsub>
 800c258:	2200      	movs	r2, #0
 800c25a:	4606      	mov	r6, r0
 800c25c:	460f      	mov	r7, r1
 800c25e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c262:	4620      	mov	r0, r4
 800c264:	4629      	mov	r1, r5
 800c266:	f7f3 ff81 	bl	800016c <__adddf3>
 800c26a:	4602      	mov	r2, r0
 800c26c:	460b      	mov	r3, r1
 800c26e:	4630      	mov	r0, r6
 800c270:	4639      	mov	r1, r7
 800c272:	f7f4 fa5b 	bl	800072c <__aeabi_ddiv>
 800c276:	f04f 0a00 	mov.w	sl, #0
 800c27a:	4604      	mov	r4, r0
 800c27c:	460d      	mov	r5, r1
 800c27e:	4622      	mov	r2, r4
 800c280:	462b      	mov	r3, r5
 800c282:	4620      	mov	r0, r4
 800c284:	4629      	mov	r1, r5
 800c286:	f7f4 f927 	bl	80004d8 <__aeabi_dmul>
 800c28a:	4602      	mov	r2, r0
 800c28c:	460b      	mov	r3, r1
 800c28e:	4680      	mov	r8, r0
 800c290:	4689      	mov	r9, r1
 800c292:	f7f4 f921 	bl	80004d8 <__aeabi_dmul>
 800c296:	a36c      	add	r3, pc, #432	; (adr r3, 800c448 <atan+0x288>)
 800c298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29c:	4606      	mov	r6, r0
 800c29e:	460f      	mov	r7, r1
 800c2a0:	f7f4 f91a 	bl	80004d8 <__aeabi_dmul>
 800c2a4:	a36a      	add	r3, pc, #424	; (adr r3, 800c450 <atan+0x290>)
 800c2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2aa:	f7f3 ff5f 	bl	800016c <__adddf3>
 800c2ae:	4632      	mov	r2, r6
 800c2b0:	463b      	mov	r3, r7
 800c2b2:	f7f4 f911 	bl	80004d8 <__aeabi_dmul>
 800c2b6:	a368      	add	r3, pc, #416	; (adr r3, 800c458 <atan+0x298>)
 800c2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2bc:	f7f3 ff56 	bl	800016c <__adddf3>
 800c2c0:	4632      	mov	r2, r6
 800c2c2:	463b      	mov	r3, r7
 800c2c4:	f7f4 f908 	bl	80004d8 <__aeabi_dmul>
 800c2c8:	a365      	add	r3, pc, #404	; (adr r3, 800c460 <atan+0x2a0>)
 800c2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ce:	f7f3 ff4d 	bl	800016c <__adddf3>
 800c2d2:	4632      	mov	r2, r6
 800c2d4:	463b      	mov	r3, r7
 800c2d6:	f7f4 f8ff 	bl	80004d8 <__aeabi_dmul>
 800c2da:	a363      	add	r3, pc, #396	; (adr r3, 800c468 <atan+0x2a8>)
 800c2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e0:	f7f3 ff44 	bl	800016c <__adddf3>
 800c2e4:	4632      	mov	r2, r6
 800c2e6:	463b      	mov	r3, r7
 800c2e8:	f7f4 f8f6 	bl	80004d8 <__aeabi_dmul>
 800c2ec:	a360      	add	r3, pc, #384	; (adr r3, 800c470 <atan+0x2b0>)
 800c2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f2:	f7f3 ff3b 	bl	800016c <__adddf3>
 800c2f6:	4642      	mov	r2, r8
 800c2f8:	464b      	mov	r3, r9
 800c2fa:	f7f4 f8ed 	bl	80004d8 <__aeabi_dmul>
 800c2fe:	a35e      	add	r3, pc, #376	; (adr r3, 800c478 <atan+0x2b8>)
 800c300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c304:	4680      	mov	r8, r0
 800c306:	4689      	mov	r9, r1
 800c308:	4630      	mov	r0, r6
 800c30a:	4639      	mov	r1, r7
 800c30c:	f7f4 f8e4 	bl	80004d8 <__aeabi_dmul>
 800c310:	a35b      	add	r3, pc, #364	; (adr r3, 800c480 <atan+0x2c0>)
 800c312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c316:	f7f3 ff27 	bl	8000168 <__aeabi_dsub>
 800c31a:	4632      	mov	r2, r6
 800c31c:	463b      	mov	r3, r7
 800c31e:	f7f4 f8db 	bl	80004d8 <__aeabi_dmul>
 800c322:	a359      	add	r3, pc, #356	; (adr r3, 800c488 <atan+0x2c8>)
 800c324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c328:	f7f3 ff1e 	bl	8000168 <__aeabi_dsub>
 800c32c:	4632      	mov	r2, r6
 800c32e:	463b      	mov	r3, r7
 800c330:	f7f4 f8d2 	bl	80004d8 <__aeabi_dmul>
 800c334:	a356      	add	r3, pc, #344	; (adr r3, 800c490 <atan+0x2d0>)
 800c336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33a:	f7f3 ff15 	bl	8000168 <__aeabi_dsub>
 800c33e:	4632      	mov	r2, r6
 800c340:	463b      	mov	r3, r7
 800c342:	f7f4 f8c9 	bl	80004d8 <__aeabi_dmul>
 800c346:	a354      	add	r3, pc, #336	; (adr r3, 800c498 <atan+0x2d8>)
 800c348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34c:	f7f3 ff0c 	bl	8000168 <__aeabi_dsub>
 800c350:	4632      	mov	r2, r6
 800c352:	463b      	mov	r3, r7
 800c354:	f7f4 f8c0 	bl	80004d8 <__aeabi_dmul>
 800c358:	4602      	mov	r2, r0
 800c35a:	460b      	mov	r3, r1
 800c35c:	4640      	mov	r0, r8
 800c35e:	4649      	mov	r1, r9
 800c360:	f7f3 ff04 	bl	800016c <__adddf3>
 800c364:	4622      	mov	r2, r4
 800c366:	462b      	mov	r3, r5
 800c368:	f7f4 f8b6 	bl	80004d8 <__aeabi_dmul>
 800c36c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	d144      	bne.n	800c400 <atan+0x240>
 800c376:	4620      	mov	r0, r4
 800c378:	4629      	mov	r1, r5
 800c37a:	f7f3 fef5 	bl	8000168 <__aeabi_dsub>
 800c37e:	e734      	b.n	800c1ea <atan+0x2a>
 800c380:	2200      	movs	r2, #0
 800c382:	4b4c      	ldr	r3, [pc, #304]	; (800c4b4 <atan+0x2f4>)
 800c384:	f7f3 fef0 	bl	8000168 <__aeabi_dsub>
 800c388:	2200      	movs	r2, #0
 800c38a:	4606      	mov	r6, r0
 800c38c:	460f      	mov	r7, r1
 800c38e:	4b49      	ldr	r3, [pc, #292]	; (800c4b4 <atan+0x2f4>)
 800c390:	4620      	mov	r0, r4
 800c392:	4629      	mov	r1, r5
 800c394:	f7f3 feea 	bl	800016c <__adddf3>
 800c398:	4602      	mov	r2, r0
 800c39a:	460b      	mov	r3, r1
 800c39c:	4630      	mov	r0, r6
 800c39e:	4639      	mov	r1, r7
 800c3a0:	f7f4 f9c4 	bl	800072c <__aeabi_ddiv>
 800c3a4:	f04f 0a01 	mov.w	sl, #1
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	460d      	mov	r5, r1
 800c3ac:	e767      	b.n	800c27e <atan+0xbe>
 800c3ae:	4b43      	ldr	r3, [pc, #268]	; (800c4bc <atan+0x2fc>)
 800c3b0:	429e      	cmp	r6, r3
 800c3b2:	dc1a      	bgt.n	800c3ea <atan+0x22a>
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	4b42      	ldr	r3, [pc, #264]	; (800c4c0 <atan+0x300>)
 800c3b8:	f7f3 fed6 	bl	8000168 <__aeabi_dsub>
 800c3bc:	2200      	movs	r2, #0
 800c3be:	4606      	mov	r6, r0
 800c3c0:	460f      	mov	r7, r1
 800c3c2:	4b3f      	ldr	r3, [pc, #252]	; (800c4c0 <atan+0x300>)
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	4629      	mov	r1, r5
 800c3c8:	f7f4 f886 	bl	80004d8 <__aeabi_dmul>
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	4b39      	ldr	r3, [pc, #228]	; (800c4b4 <atan+0x2f4>)
 800c3d0:	f7f3 fecc 	bl	800016c <__adddf3>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	4630      	mov	r0, r6
 800c3da:	4639      	mov	r1, r7
 800c3dc:	f7f4 f9a6 	bl	800072c <__aeabi_ddiv>
 800c3e0:	f04f 0a02 	mov.w	sl, #2
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	460d      	mov	r5, r1
 800c3e8:	e749      	b.n	800c27e <atan+0xbe>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	2000      	movs	r0, #0
 800c3f0:	4934      	ldr	r1, [pc, #208]	; (800c4c4 <atan+0x304>)
 800c3f2:	f7f4 f99b 	bl	800072c <__aeabi_ddiv>
 800c3f6:	f04f 0a03 	mov.w	sl, #3
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	460d      	mov	r5, r1
 800c3fe:	e73e      	b.n	800c27e <atan+0xbe>
 800c400:	4b31      	ldr	r3, [pc, #196]	; (800c4c8 <atan+0x308>)
 800c402:	4e32      	ldr	r6, [pc, #200]	; (800c4cc <atan+0x30c>)
 800c404:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c408:	4456      	add	r6, sl
 800c40a:	449a      	add	sl, r3
 800c40c:	e9da 2300 	ldrd	r2, r3, [sl]
 800c410:	f7f3 feaa 	bl	8000168 <__aeabi_dsub>
 800c414:	4622      	mov	r2, r4
 800c416:	462b      	mov	r3, r5
 800c418:	f7f3 fea6 	bl	8000168 <__aeabi_dsub>
 800c41c:	4602      	mov	r2, r0
 800c41e:	460b      	mov	r3, r1
 800c420:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c424:	f7f3 fea0 	bl	8000168 <__aeabi_dsub>
 800c428:	f1bb 0f00 	cmp.w	fp, #0
 800c42c:	4604      	mov	r4, r0
 800c42e:	460d      	mov	r5, r1
 800c430:	f6bf aee4 	bge.w	800c1fc <atan+0x3c>
 800c434:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c438:	461d      	mov	r5, r3
 800c43a:	e6df      	b.n	800c1fc <atan+0x3c>
 800c43c:	4d24      	ldr	r5, [pc, #144]	; (800c4d0 <atan+0x310>)
 800c43e:	e6dd      	b.n	800c1fc <atan+0x3c>
 800c440:	8800759c 	.word	0x8800759c
 800c444:	7e37e43c 	.word	0x7e37e43c
 800c448:	e322da11 	.word	0xe322da11
 800c44c:	3f90ad3a 	.word	0x3f90ad3a
 800c450:	24760deb 	.word	0x24760deb
 800c454:	3fa97b4b 	.word	0x3fa97b4b
 800c458:	a0d03d51 	.word	0xa0d03d51
 800c45c:	3fb10d66 	.word	0x3fb10d66
 800c460:	c54c206e 	.word	0xc54c206e
 800c464:	3fb745cd 	.word	0x3fb745cd
 800c468:	920083ff 	.word	0x920083ff
 800c46c:	3fc24924 	.word	0x3fc24924
 800c470:	5555550d 	.word	0x5555550d
 800c474:	3fd55555 	.word	0x3fd55555
 800c478:	2c6a6c2f 	.word	0x2c6a6c2f
 800c47c:	bfa2b444 	.word	0xbfa2b444
 800c480:	52defd9a 	.word	0x52defd9a
 800c484:	3fadde2d 	.word	0x3fadde2d
 800c488:	af749a6d 	.word	0xaf749a6d
 800c48c:	3fb3b0f2 	.word	0x3fb3b0f2
 800c490:	fe231671 	.word	0xfe231671
 800c494:	3fbc71c6 	.word	0x3fbc71c6
 800c498:	9998ebc4 	.word	0x9998ebc4
 800c49c:	3fc99999 	.word	0x3fc99999
 800c4a0:	440fffff 	.word	0x440fffff
 800c4a4:	7ff00000 	.word	0x7ff00000
 800c4a8:	54442d18 	.word	0x54442d18
 800c4ac:	3ff921fb 	.word	0x3ff921fb
 800c4b0:	3fdbffff 	.word	0x3fdbffff
 800c4b4:	3ff00000 	.word	0x3ff00000
 800c4b8:	3ff2ffff 	.word	0x3ff2ffff
 800c4bc:	40037fff 	.word	0x40037fff
 800c4c0:	3ff80000 	.word	0x3ff80000
 800c4c4:	bff00000 	.word	0xbff00000
 800c4c8:	0800ccb8 	.word	0x0800ccb8
 800c4cc:	0800cc98 	.word	0x0800cc98
 800c4d0:	bff921fb 	.word	0xbff921fb

0800c4d4 <fabs>:
 800c4d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c4d8:	4619      	mov	r1, r3
 800c4da:	4770      	bx	lr

0800c4dc <matherr>:
 800c4dc:	2000      	movs	r0, #0
 800c4de:	4770      	bx	lr

0800c4e0 <nan>:
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	4901      	ldr	r1, [pc, #4]	; (800c4e8 <nan+0x8>)
 800c4e4:	4770      	bx	lr
 800c4e6:	bf00      	nop
 800c4e8:	7ff80000 	.word	0x7ff80000
 800c4ec:	00000000 	.word	0x00000000

0800c4f0 <scalbn>:
 800c4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4f2:	4616      	mov	r6, r2
 800c4f4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	460d      	mov	r5, r1
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	b982      	cbnz	r2, 800c522 <scalbn+0x32>
 800c500:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c504:	4303      	orrs	r3, r0
 800c506:	d034      	beq.n	800c572 <scalbn+0x82>
 800c508:	4b2d      	ldr	r3, [pc, #180]	; (800c5c0 <scalbn+0xd0>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	f7f3 ffe4 	bl	80004d8 <__aeabi_dmul>
 800c510:	4b2c      	ldr	r3, [pc, #176]	; (800c5c4 <scalbn+0xd4>)
 800c512:	4604      	mov	r4, r0
 800c514:	429e      	cmp	r6, r3
 800c516:	460d      	mov	r5, r1
 800c518:	da0d      	bge.n	800c536 <scalbn+0x46>
 800c51a:	a325      	add	r3, pc, #148	; (adr r3, 800c5b0 <scalbn+0xc0>)
 800c51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c520:	e01c      	b.n	800c55c <scalbn+0x6c>
 800c522:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800c526:	42ba      	cmp	r2, r7
 800c528:	d109      	bne.n	800c53e <scalbn+0x4e>
 800c52a:	4602      	mov	r2, r0
 800c52c:	f7f3 fe1e 	bl	800016c <__adddf3>
 800c530:	4604      	mov	r4, r0
 800c532:	460d      	mov	r5, r1
 800c534:	e01d      	b.n	800c572 <scalbn+0x82>
 800c536:	460b      	mov	r3, r1
 800c538:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c53c:	3a36      	subs	r2, #54	; 0x36
 800c53e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c542:	4432      	add	r2, r6
 800c544:	428a      	cmp	r2, r1
 800c546:	dd0c      	ble.n	800c562 <scalbn+0x72>
 800c548:	4622      	mov	r2, r4
 800c54a:	462b      	mov	r3, r5
 800c54c:	a11a      	add	r1, pc, #104	; (adr r1, 800c5b8 <scalbn+0xc8>)
 800c54e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c552:	f000 f83b 	bl	800c5cc <copysign>
 800c556:	a318      	add	r3, pc, #96	; (adr r3, 800c5b8 <scalbn+0xc8>)
 800c558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55c:	f7f3 ffbc 	bl	80004d8 <__aeabi_dmul>
 800c560:	e7e6      	b.n	800c530 <scalbn+0x40>
 800c562:	2a00      	cmp	r2, #0
 800c564:	dd08      	ble.n	800c578 <scalbn+0x88>
 800c566:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c56a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c56e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c572:	4620      	mov	r0, r4
 800c574:	4629      	mov	r1, r5
 800c576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c578:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c57c:	da0b      	bge.n	800c596 <scalbn+0xa6>
 800c57e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c582:	429e      	cmp	r6, r3
 800c584:	4622      	mov	r2, r4
 800c586:	462b      	mov	r3, r5
 800c588:	dce0      	bgt.n	800c54c <scalbn+0x5c>
 800c58a:	a109      	add	r1, pc, #36	; (adr r1, 800c5b0 <scalbn+0xc0>)
 800c58c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c590:	f000 f81c 	bl	800c5cc <copysign>
 800c594:	e7c1      	b.n	800c51a <scalbn+0x2a>
 800c596:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c59a:	3236      	adds	r2, #54	; 0x36
 800c59c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c5a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	4b07      	ldr	r3, [pc, #28]	; (800c5c8 <scalbn+0xd8>)
 800c5ac:	e7d6      	b.n	800c55c <scalbn+0x6c>
 800c5ae:	bf00      	nop
 800c5b0:	c2f8f359 	.word	0xc2f8f359
 800c5b4:	01a56e1f 	.word	0x01a56e1f
 800c5b8:	8800759c 	.word	0x8800759c
 800c5bc:	7e37e43c 	.word	0x7e37e43c
 800c5c0:	43500000 	.word	0x43500000
 800c5c4:	ffff3cb0 	.word	0xffff3cb0
 800c5c8:	3c900000 	.word	0x3c900000

0800c5cc <copysign>:
 800c5cc:	b530      	push	{r4, r5, lr}
 800c5ce:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c5d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5d6:	ea42 0503 	orr.w	r5, r2, r3
 800c5da:	4629      	mov	r1, r5
 800c5dc:	bd30      	pop	{r4, r5, pc}
	...

0800c5e0 <_init>:
 800c5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e2:	bf00      	nop
 800c5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5e6:	bc08      	pop	{r3}
 800c5e8:	469e      	mov	lr, r3
 800c5ea:	4770      	bx	lr

0800c5ec <_fini>:
 800c5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ee:	bf00      	nop
 800c5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5f2:	bc08      	pop	{r3}
 800c5f4:	469e      	mov	lr, r3
 800c5f6:	4770      	bx	lr
