
Spider.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ff0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08009100  08009100  00019100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092f0  080092f0  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  080092f0  080092f0  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080092f0  080092f0  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092f0  080092f0  000192f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092f4  080092f4  000192f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080092f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  200001f8  080094f0  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  080094f0  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cf5  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b15  00000000  00000000  00034f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001048  00000000  00000000  00037a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f28  00000000  00000000  00038a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ad40  00000000  00000000  000399a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fa7f  00000000  00000000  000546e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090374  00000000  00000000  0006415f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f44d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c78  00000000  00000000  000f4550  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	080090e8 	.word	0x080090e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	080090e8 	.word	0x080090e8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	; 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	d1ed      	bne.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d76:	2afd      	cmp	r2, #253	; 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	; 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	; 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	; 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_f2iz>:
 80010b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b8:	d30f      	bcc.n	80010da <__aeabi_f2iz+0x2a>
 80010ba:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010be:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c2:	d90d      	bls.n	80010e0 <__aeabi_f2iz+0x30>
 80010c4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010cc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010d0:	fa23 f002 	lsr.w	r0, r3, r2
 80010d4:	bf18      	it	ne
 80010d6:	4240      	negne	r0, r0
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr
 80010e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e4:	d101      	bne.n	80010ea <__aeabi_f2iz+0x3a>
 80010e6:	0242      	lsls	r2, r0, #9
 80010e8:	d105      	bne.n	80010f6 <__aeabi_f2iz+0x46>
 80010ea:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ee:	bf08      	it	eq
 80010f0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0000 	mov.w	r0, #0
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2uiz>:
 80010fc:	0042      	lsls	r2, r0, #1
 80010fe:	d20e      	bcs.n	800111e <__aeabi_f2uiz+0x22>
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30b      	bcc.n	800111e <__aeabi_f2uiz+0x22>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d409      	bmi.n	8001124 <__aeabi_f2uiz+0x28>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	fa23 f002 	lsr.w	r0, r3, r2
 800111c:	4770      	bx	lr
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4770      	bx	lr
 8001124:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001128:	d101      	bne.n	800112e <__aeabi_f2uiz+0x32>
 800112a:	0242      	lsls	r2, r0, #9
 800112c:	d102      	bne.n	8001134 <__aeabi_f2uiz+0x38>
 800112e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001132:	4770      	bx	lr
 8001134:	f04f 0000 	mov.w	r0, #0
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_DMA_Init+0x38>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <MX_DMA_Init+0x38>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6153      	str	r3, [r2, #20]
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_DMA_Init+0x38>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	200f      	movs	r0, #15
 8001160:	f002 f8ad 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001164:	200f      	movs	r0, #15
 8001166:	f002 f8c6 	bl	80032f6 <HAL_NVIC_EnableIRQ>

}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000

08001178 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118c:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <MX_GPIO_Init+0xd0>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a2d      	ldr	r2, [pc, #180]	; (8001248 <MX_GPIO_Init+0xd0>)
 8001192:	f043 0310 	orr.w	r3, r3, #16
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <MX_GPIO_Init+0xd0>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a4:	4b28      	ldr	r3, [pc, #160]	; (8001248 <MX_GPIO_Init+0xd0>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a27      	ldr	r2, [pc, #156]	; (8001248 <MX_GPIO_Init+0xd0>)
 80011aa:	f043 0320 	orr.w	r3, r3, #32
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <MX_GPIO_Init+0xd0>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011bc:	4b22      	ldr	r3, [pc, #136]	; (8001248 <MX_GPIO_Init+0xd0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a21      	ldr	r2, [pc, #132]	; (8001248 <MX_GPIO_Init+0xd0>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <MX_GPIO_Init+0xd0>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <MX_GPIO_Init+0xd0>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <MX_GPIO_Init+0xd0>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <MX_GPIO_Init+0xd0>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(START_LED_GPIO_Port, START_LED_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f2:	4816      	ldr	r0, [pc, #88]	; (800124c <MX_GPIO_Init+0xd4>)
 80011f4:	f002 fc58 	bl	8003aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = START_LED_Pin;
 80011f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2302      	movs	r3, #2
 8001208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(START_LED_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	4619      	mov	r1, r3
 8001210:	480e      	ldr	r0, [pc, #56]	; (800124c <MX_GPIO_Init+0xd4>)
 8001212:	f002 faef 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STOP_BUTTON_Pin;
 8001216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_GPIO_Init+0xd8>)
 800121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STOP_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4619      	mov	r1, r3
 800122a:	480a      	ldr	r0, [pc, #40]	; (8001254 <MX_GPIO_Init+0xdc>)
 800122c:	f002 fae2 	bl	80037f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	2028      	movs	r0, #40	; 0x28
 8001236:	f002 f842 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800123a:	2028      	movs	r0, #40	; 0x28
 800123c:	f002 f85b 	bl	80032f6 <HAL_NVIC_EnableIRQ>

}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000
 800124c:	40011000 	.word	0x40011000
 8001250:	10110000 	.word	0x10110000
 8001254:	40010c00 	.word	0x40010c00

08001258 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_I2C1_Init+0x50>)
 800125e:	4a13      	ldr	r2, [pc, #76]	; (80012ac <MX_I2C1_Init+0x54>)
 8001260:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001264:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_I2C1_Init+0x58>)
 8001266:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_I2C1_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001296:	f002 fc51 	bl	8003b3c <HAL_I2C_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a0:	f000 fb10 	bl	80018c4 <Error_Handler>
  }

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000224 	.word	0x20000224
 80012ac:	40005400 	.word	0x40005400
 80012b0:	000186a0 	.word	0x000186a0

080012b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a15      	ldr	r2, [pc, #84]	; (8001324 <HAL_I2C_MspInit+0x70>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d123      	bne.n	800131c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <HAL_I2C_MspInit+0x74>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a13      	ldr	r2, [pc, #76]	; (8001328 <HAL_I2C_MspInit+0x74>)
 80012da:	f043 0308 	orr.w	r3, r3, #8
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <HAL_I2C_MspInit+0x74>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ec:	23c0      	movs	r3, #192	; 0xc0
 80012ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f0:	2312      	movs	r3, #18
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	4619      	mov	r1, r3
 80012fe:	480b      	ldr	r0, [pc, #44]	; (800132c <HAL_I2C_MspInit+0x78>)
 8001300:	f002 fa78 	bl	80037f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_I2C_MspInit+0x74>)
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	4a07      	ldr	r2, [pc, #28]	; (8001328 <HAL_I2C_MspInit+0x74>)
 800130a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800130e:	61d3      	str	r3, [r2, #28]
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_I2C_MspInit+0x74>)
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800131c:	bf00      	nop
 800131e:	3720      	adds	r7, #32
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40005400 	.word	0x40005400
 8001328:	40021000 	.word	0x40021000
 800132c:	40010c00 	.word	0x40010c00

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	b5b0      	push	{r4, r5, r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	REF = NoRef;
 8001336:	4b36      	ldr	r3, [pc, #216]	; (8001410 <main+0xe0>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
	state = STILL;
 800133c:	4b35      	ldr	r3, [pc, #212]	; (8001414 <main+0xe4>)
 800133e:	2209      	movs	r2, #9
 8001340:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001342:	f001 fe83 	bl	800304c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001346:	f000 f879 	bl	800143c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134a:	f7ff ff15 	bl	8001178 <MX_GPIO_Init>
  MX_DMA_Init();
 800134e:	f7ff fef5 	bl	800113c <MX_DMA_Init>
  MX_I2C1_Init();
 8001352:	f7ff ff81 	bl	8001258 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001356:	f001 fdb3 	bl	8002ec0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800135a:	f001 fc7b 	bl	8002c54 <MX_TIM2_Init>
  MX_TIM3_Init();
 800135e:	f001 fced 	bl	8002d3c <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001362:	f000 f8b0 	bl	80014c6 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
//  UARTDMA_Init(&huartdma, &huart1);
  PCA9685_Init(&hi2c1);
 8001366:	482c      	ldr	r0, [pc, #176]	; (8001418 <main+0xe8>)
 8001368:	f000 fca2 	bl	8001cb0 <PCA9685_Init>

  sprintf(USART_TxStream, "SPIDER ROBOT v1.0\n\r");
 800136c:	4a2b      	ldr	r2, [pc, #172]	; (800141c <main+0xec>)
 800136e:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <main+0xf0>)
 8001370:	4615      	mov	r5, r2
 8001372:	461c      	mov	r4, r3
 8001374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001376:	6028      	str	r0, [r5, #0]
 8001378:	6069      	str	r1, [r5, #4]
 800137a:	60aa      	str	r2, [r5, #8]
 800137c:	60eb      	str	r3, [r5, #12]
 800137e:	6820      	ldr	r0, [r4, #0]
 8001380:	6128      	str	r0, [r5, #16]
//  put_string(USART_TxStream);
//  HAL_UART_Abort_IT(&huart1);
  HAL_UART_Transmit(&huart1, (uint8_t*) USART_TxStream, (sizeof(USART_TxStream)-1), 100);
 8001382:	2364      	movs	r3, #100	; 0x64
 8001384:	2227      	movs	r2, #39	; 0x27
 8001386:	4925      	ldr	r1, [pc, #148]	; (800141c <main+0xec>)
 8001388:	4826      	ldr	r0, [pc, #152]	; (8001424 <main+0xf4>)
 800138a:	f005 faf2 	bl	8006972 <HAL_UART_Transmit>
  __HAL_UART_CLEAR_PEFLAG(&huart1);
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <main+0xf4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b22      	ldr	r3, [pc, #136]	; (8001424 <main+0xf4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
  HAL_UART_Receive_DMA(&huart1, USART_RxStream, 1);
 80013a4:	2201      	movs	r2, #1
 80013a6:	4920      	ldr	r1, [pc, #128]	; (8001428 <main+0xf8>)
 80013a8:	481e      	ldr	r0, [pc, #120]	; (8001424 <main+0xf4>)
 80013aa:	f005 fb75 	bl	8006a98 <HAL_UART_Receive_DMA>

  // Start Timer 2 andTimer3
  HAL_TIM_Base_Start_IT(&htim2);
 80013ae:	481f      	ldr	r0, [pc, #124]	; (800142c <main+0xfc>)
 80013b0:	f004 fcbc 	bl	8005d2c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80013b4:	481e      	ldr	r0, [pc, #120]	; (8001430 <main+0x100>)
 80013b6:	f004 fcb9 	bl	8005d2c <HAL_TIM_Base_Start_IT>
//		  PCA9685_SetServoAngle(activeServo, Angle);
//	  }
//	  HAL_Delay(500);
//	  activeServo++;
//	  if (activeServo >= SERVO_COUNT) activeServo = 0;
	  if (REF == Ref)
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <main+0xe0>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d11b      	bne.n	80013fa <main+0xca>
	  {
		  switch (state)
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <main+0xe4>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	2b05      	cmp	r3, #5
 80013ca:	d812      	bhi.n	80013f2 <main+0xc2>
 80013cc:	a201      	add	r2, pc, #4	; (adr r2, 80013d4 <main+0xa4>)
 80013ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d2:	bf00      	nop
 80013d4:	080013ed 	.word	0x080013ed
 80013d8:	080013f3 	.word	0x080013f3
 80013dc:	080013f3 	.word	0x080013f3
 80013e0:	080013f3 	.word	0x080013f3
 80013e4:	080013f3 	.word	0x080013f3
 80013e8:	080013f3 	.word	0x080013f3
////			  //  put_string(USART_TxStream);
////			  //  HAL_UART_Abort_IT(&huart1);
//			  HAL_UART_Transmit(&huart1, (uint8_t*) USART_TxStream, (sizeof(USART_TxStream)-1), 100);
//			  __HAL_UART_CLEAR_PEFLAG(&huart1);
//			  __HAL_UART_FLUSH_DRREGISTER(&huart1);
			  forward_walk();
 80013ec:	f000 fe3a 	bl	8002064 <forward_walk>
			  break;
 80013f0:	e000      	b.n	80013f4 <main+0xc4>
		  case TURNING_RIGHT:
			  break;
		  case TURNING_LEFT:
			  break;
		  default:
			  break;
 80013f2:	bf00      	nop
		  }
		  servoService();
 80013f4:	f000 ff04 	bl	8002200 <servoService>
 80013f8:	e7df      	b.n	80013ba <main+0x8a>
	  }
	  else
	  {
		  // Homing routine
		  homing(anglePos, refAngles);
 80013fa:	490e      	ldr	r1, [pc, #56]	; (8001434 <main+0x104>)
 80013fc:	480e      	ldr	r0, [pc, #56]	; (8001438 <main+0x108>)
 80013fe:	f000 fc77 	bl	8001cf0 <homing>
		  state = HOME;
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <main+0xe4>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
		  REF = Ref;
 8001408:	4b01      	ldr	r3, [pc, #4]	; (8001410 <main+0xe0>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
	  if (REF == Ref)
 800140e:	e7d4      	b.n	80013ba <main+0x8a>
 8001410:	200002c4 	.word	0x200002c4
 8001414:	20000320 	.word	0x20000320
 8001418:	20000224 	.word	0x20000224
 800141c:	20000384 	.word	0x20000384
 8001420:	08009100 	.word	0x08009100
 8001424:	20000484 	.word	0x20000484
 8001428:	20000328 	.word	0x20000328
 800142c:	200003f8 	.word	0x200003f8
 8001430:	200003b0 	.word	0x200003b0
 8001434:	20000000 	.word	0x20000000
 8001438:	200002ac 	.word	0x200002ac

0800143c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b090      	sub	sp, #64	; 0x40
 8001440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001442:	f107 0318 	add.w	r3, r7, #24
 8001446:	2228      	movs	r2, #40	; 0x28
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f005 ff7e 	bl	800734c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800145e:	2301      	movs	r3, #1
 8001460:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001466:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800146c:	2301      	movs	r3, #1
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001470:	2302      	movs	r3, #2
 8001472:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001478:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800147a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800147e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	4618      	mov	r0, r3
 8001486:	f003 ffe5 	bl	8005454 <HAL_RCC_OscConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001490:	f000 fa18 	bl	80018c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001494:	230f      	movs	r3, #15
 8001496:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001498:	2302      	movs	r3, #2
 800149a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2101      	movs	r1, #1
 80014ae:	4618      	mov	r0, r3
 80014b0:	f004 fa50 	bl	8005954 <HAL_RCC_ClockConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014ba:	f000 fa03 	bl	80018c4 <Error_Handler>
  }
}
 80014be:	bf00      	nop
 80014c0:	3740      	adds	r7, #64	; 0x40
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	af00      	add	r7, sp, #0
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2025      	movs	r0, #37	; 0x25
 80014d0:	f001 fef5 	bl	80032be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014d4:	2025      	movs	r0, #37	; 0x25
 80014d6:	f001 ff0e 	bl	80032f6 <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	201c      	movs	r0, #28
 80014e0:	f001 feed 	bl	80032be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014e4:	201c      	movs	r0, #28
 80014e6:	f001 ff06 	bl	80032f6 <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	201d      	movs	r0, #29
 80014f0:	f001 fee5 	bl	80032be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014f4:	201d      	movs	r0, #29
 80014f6:	f001 fefe 	bl	80032f6 <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2028      	movs	r0, #40	; 0x28
 8001500:	f001 fedd 	bl	80032be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001504:	2028      	movs	r0, #40	; 0x28
 8001506:	f001 fef6 	bl	80032f6 <HAL_NVIC_EnableIRQ>
	/* I2C1_ER_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	2020      	movs	r0, #32
 8001510:	f001 fed5 	bl	80032be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001514:	2020      	movs	r0, #32
 8001516:	f001 feee 	bl	80032f6 <HAL_NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <InterpretCmd>:

/* USER CODE BEGIN 4 */
//	Utility Functions
void InterpretCmd()
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
	uint8_t value8 = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	71fb      	strb	r3, [r7, #7]
	uint16_t value16 = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	80bb      	strh	r3, [r7, #4]
//	uint8_t channel;

	switch (command[0])
 800152e:	4b72      	ldr	r3, [pc, #456]	; (80016f8 <InterpretCmd+0x1d8>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	3b3f      	subs	r3, #63	; 0x3f
 8001534:	2b18      	cmp	r3, #24
 8001536:	f200 80d8 	bhi.w	80016ea <InterpretCmd+0x1ca>
 800153a:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <InterpretCmd+0x20>)
 800153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001540:	080016eb 	.word	0x080016eb
 8001544:	080016eb 	.word	0x080016eb
 8001548:	080016eb 	.word	0x080016eb
 800154c:	080016eb 	.word	0x080016eb
 8001550:	080016eb 	.word	0x080016eb
 8001554:	080016eb 	.word	0x080016eb
 8001558:	080016eb 	.word	0x080016eb
 800155c:	080016eb 	.word	0x080016eb
 8001560:	080016eb 	.word	0x080016eb
 8001564:	0800164d 	.word	0x0800164d
 8001568:	080016eb 	.word	0x080016eb
 800156c:	080016eb 	.word	0x080016eb
 8001570:	080016eb 	.word	0x080016eb
 8001574:	080016b7 	.word	0x080016b7
 8001578:	080016eb 	.word	0x080016eb
 800157c:	080016eb 	.word	0x080016eb
 8001580:	080016eb 	.word	0x080016eb
 8001584:	080016eb 	.word	0x080016eb
 8001588:	080016eb 	.word	0x080016eb
 800158c:	080016eb 	.word	0x080016eb
 8001590:	0800165b 	.word	0x0800165b
 8001594:	080016eb 	.word	0x080016eb
 8001598:	080016eb 	.word	0x080016eb
 800159c:	080016eb 	.word	0x080016eb
 80015a0:	080015a5 	.word	0x080015a5
		case 'W':
			//	Walk Mode
			//	Initialize timer 2 to stop movement after a period of 5s.
//			HAL_TIM_Base_Start_IT(&htim2);
//			htim2.Instance->CNT = 0;
			resetTimer(&htim2);
 80015a4:	4855      	ldr	r0, [pc, #340]	; (80016fc <InterpretCmd+0x1dc>)
 80015a6:	f001 fc7d 	bl	8002ea4 <resetTimer>
			switch (command[1])
 80015aa:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <InterpretCmd+0x1d8>)
 80015ac:	785b      	ldrb	r3, [r3, #1]
 80015ae:	3b42      	subs	r3, #66	; 0x42
 80015b0:	2b12      	cmp	r3, #18
 80015b2:	d849      	bhi.n	8001648 <InterpretCmd+0x128>
 80015b4:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <InterpretCmd+0x9c>)
 80015b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ba:	bf00      	nop
 80015bc:	08001611 	.word	0x08001611
 80015c0:	08001649 	.word	0x08001649
 80015c4:	08001649 	.word	0x08001649
 80015c8:	08001649 	.word	0x08001649
 80015cc:	08001609 	.word	0x08001609
 80015d0:	08001649 	.word	0x08001649
 80015d4:	08001649 	.word	0x08001649
 80015d8:	08001649 	.word	0x08001649
 80015dc:	08001649 	.word	0x08001649
 80015e0:	08001649 	.word	0x08001649
 80015e4:	08001621 	.word	0x08001621
 80015e8:	08001649 	.word	0x08001649
 80015ec:	08001649 	.word	0x08001649
 80015f0:	08001649 	.word	0x08001649
 80015f4:	08001649 	.word	0x08001649
 80015f8:	08001649 	.word	0x08001649
 80015fc:	08001619 	.word	0x08001619
 8001600:	08001649 	.word	0x08001649
 8001604:	08001629 	.word	0x08001629
			{
				case 'F':
					//	Move Forwards
					state = WALKING_FORWARD;
 8001608:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <InterpretCmd+0x1e0>)
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
					//	Complete
					break;
 800160e:	e01c      	b.n	800164a <InterpretCmd+0x12a>
				case 'B':
					//	Move Bacjwards
					state = WALKING_BACKWARD;
 8001610:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <InterpretCmd+0x1e0>)
 8001612:	2202      	movs	r2, #2
 8001614:	701a      	strb	r2, [r3, #0]
					//	Complete
					break;
 8001616:	e018      	b.n	800164a <InterpretCmd+0x12a>
				case 'R':
					//	Move Right
					state = WALKING_RIGHT;
 8001618:	4b39      	ldr	r3, [pc, #228]	; (8001700 <InterpretCmd+0x1e0>)
 800161a:	2204      	movs	r2, #4
 800161c:	701a      	strb	r2, [r3, #0]
					//	Complete
					break;
 800161e:	e014      	b.n	800164a <InterpretCmd+0x12a>
				case 'L':
					//	Move Left
					state = WALKING_LEFT;
 8001620:	4b37      	ldr	r3, [pc, #220]	; (8001700 <InterpretCmd+0x1e0>)
 8001622:	2203      	movs	r2, #3
 8001624:	701a      	strb	r2, [r3, #0]
					//	Complete
					break;
 8001626:	e010      	b.n	800164a <InterpretCmd+0x12a>
				case 'T':
					switch (command[2])
 8001628:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <InterpretCmd+0x1d8>)
 800162a:	789b      	ldrb	r3, [r3, #2]
 800162c:	2b4c      	cmp	r3, #76	; 0x4c
 800162e:	d006      	beq.n	800163e <InterpretCmd+0x11e>
 8001630:	2b52      	cmp	r3, #82	; 0x52
 8001632:	d000      	beq.n	8001636 <InterpretCmd+0x116>
							//	Turn Left
							state = TURNING_LEFT;
							//	Complete
							break;
						default:
							break;
 8001634:	e007      	b.n	8001646 <InterpretCmd+0x126>
							state = TURNING_RIGHT;
 8001636:	4b32      	ldr	r3, [pc, #200]	; (8001700 <InterpretCmd+0x1e0>)
 8001638:	2205      	movs	r2, #5
 800163a:	701a      	strb	r2, [r3, #0]
							break;
 800163c:	e003      	b.n	8001646 <InterpretCmd+0x126>
							state = TURNING_LEFT;
 800163e:	4b30      	ldr	r3, [pc, #192]	; (8001700 <InterpretCmd+0x1e0>)
 8001640:	2206      	movs	r2, #6
 8001642:	701a      	strb	r2, [r3, #0]
							break;
 8001644:	bf00      	nop
					}
					break;
 8001646:	e000      	b.n	800164a <InterpretCmd+0x12a>
				default:
					break;
 8001648:	bf00      	nop
			}
			break;
 800164a:	e051      	b.n	80016f0 <InterpretCmd+0x1d0>
		case 'H':
			//	Stop or Halt Command
			stop(anglePos);
 800164c:	482d      	ldr	r0, [pc, #180]	; (8001704 <InterpretCmd+0x1e4>)
 800164e:	f000 fb76 	bl	8001d3e <stop>
			state = STILL;
 8001652:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <InterpretCmd+0x1e0>)
 8001654:	2209      	movs	r2, #9
 8001656:	701a      	strb	r2, [r3, #0]
			break;
 8001658:	e04a      	b.n	80016f0 <InterpretCmd+0x1d0>
		case 'S':
			//	Servo Control Mode
			//	:S#P###
			//	# -> Servo number
			//	### -> Angle
			state = MOVING_JOINT;
 800165a:	4b29      	ldr	r3, [pc, #164]	; (8001700 <InterpretCmd+0x1e0>)
 800165c:	2208      	movs	r2, #8
 800165e:	701a      	strb	r2, [r3, #0]
			if (command[1])
 8001660:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <InterpretCmd+0x1d8>)
 8001662:	785b      	ldrb	r3, [r3, #1]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d004      	beq.n	8001672 <InterpretCmd+0x152>
			{
				value8 = atoi(&command[1]);
 8001668:	4827      	ldr	r0, [pc, #156]	; (8001708 <InterpretCmd+0x1e8>)
 800166a:	f005 fe41 	bl	80072f0 <atoi>
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
			}
			if (command[2] == 'P' && command[3])
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <InterpretCmd+0x1d8>)
 8001674:	789b      	ldrb	r3, [r3, #2]
 8001676:	2b50      	cmp	r3, #80	; 0x50
 8001678:	d109      	bne.n	800168e <InterpretCmd+0x16e>
 800167a:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <InterpretCmd+0x1d8>)
 800167c:	78db      	ldrb	r3, [r3, #3]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <InterpretCmd+0x16e>
			{
				value16 = atoi(&command[3]);
 8001682:	4822      	ldr	r0, [pc, #136]	; (800170c <InterpretCmd+0x1ec>)
 8001684:	f005 fe34 	bl	80072f0 <atoi>
 8001688:	4603      	mov	r3, r0
 800168a:	80bb      	strh	r3, [r7, #4]
 800168c:	e00c      	b.n	80016a8 <InterpretCmd+0x188>
			}
			else if (command[3] == 'P' && command[4])
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <InterpretCmd+0x1d8>)
 8001690:	78db      	ldrb	r3, [r3, #3]
 8001692:	2b50      	cmp	r3, #80	; 0x50
 8001694:	d108      	bne.n	80016a8 <InterpretCmd+0x188>
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <InterpretCmd+0x1d8>)
 8001698:	791b      	ldrb	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d004      	beq.n	80016a8 <InterpretCmd+0x188>
			{
				value16 = atoi(&command[4]);
 800169e:	481c      	ldr	r0, [pc, #112]	; (8001710 <InterpretCmd+0x1f0>)
 80016a0:	f005 fe26 	bl	80072f0 <atoi>
 80016a4:	4603      	mov	r3, r0
 80016a6:	80bb      	strh	r3, [r7, #4]
			}
			servoControl(anglePos, value8, value16);
 80016a8:	88ba      	ldrh	r2, [r7, #4]
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	4619      	mov	r1, r3
 80016ae:	4815      	ldr	r0, [pc, #84]	; (8001704 <InterpretCmd+0x1e4>)
 80016b0:	f000 fb61 	bl	8001d76 <servoControl>

			break;
 80016b4:	e01c      	b.n	80016f0 <InterpretCmd+0x1d0>
		case 'L':
			//	Leg Control MOde
			//	:L#*
			// * -> U: Up, D: Down, R: Right, L: Left
			state = MOVING_LEG;
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <InterpretCmd+0x1e0>)
 80016b8:	2207      	movs	r2, #7
 80016ba:	701a      	strb	r2, [r3, #0]
			char movement;
			if (command[1] && command[2])
 80016bc:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <InterpretCmd+0x1d8>)
 80016be:	785b      	ldrb	r3, [r3, #1]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d014      	beq.n	80016ee <InterpretCmd+0x1ce>
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <InterpretCmd+0x1d8>)
 80016c6:	789b      	ldrb	r3, [r3, #2]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d010      	beq.n	80016ee <InterpretCmd+0x1ce>
			{
				value8 = atoi(&command[1]);
 80016cc:	480e      	ldr	r0, [pc, #56]	; (8001708 <InterpretCmd+0x1e8>)
 80016ce:	f005 fe0f 	bl	80072f0 <atoi>
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
				movement = command[2];
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <InterpretCmd+0x1d8>)
 80016d8:	789b      	ldrb	r3, [r3, #2]
 80016da:	70fb      	strb	r3, [r7, #3]
				legControl(anglePos, value8, movement);
 80016dc:	78fa      	ldrb	r2, [r7, #3]
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	4619      	mov	r1, r3
 80016e2:	4808      	ldr	r0, [pc, #32]	; (8001704 <InterpretCmd+0x1e4>)
 80016e4:	f000 fb5f 	bl	8001da6 <legControl>
			}
			//	Complete
			break;
 80016e8:	e001      	b.n	80016ee <InterpretCmd+0x1ce>
		case '?':
			//	Print Information
			break;
		default:
			break;
 80016ea:	bf00      	nop
 80016ec:	e000      	b.n	80016f0 <InterpretCmd+0x1d0>
			break;
 80016ee:	bf00      	nop
	}
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200002f8 	.word	0x200002f8
 80016fc:	200003f8 	.word	0x200003f8
 8001700:	20000320 	.word	0x20000320
 8001704:	200002ac 	.word	0x200002ac
 8001708:	200002f9 	.word	0x200002f9
 800170c:	200002fb 	.word	0x200002fb
 8001710:	200002fc 	.word	0x200002fc

08001714 <HAL_UART_RxCpltCallback>:

//	Interruptions
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	char data = *USART_RxStream;
 800171c:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <HAL_UART_RxCpltCallback+0xac>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	73fb      	strb	r3, [r7, #15]

	__HAL_UART_CLEAR_PEFLAG(&huart1);
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <HAL_UART_RxCpltCallback+0xb0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <HAL_UART_RxCpltCallback+0xb0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
	__HAL_UART_FLUSH_DRREGISTER(&huart1);
 8001738:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <HAL_UART_RxCpltCallback+0xb0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
	HAL_UART_Receive_DMA(&huart1, USART_RxStream, 1);
 800173e:	2201      	movs	r2, #1
 8001740:	491f      	ldr	r1, [pc, #124]	; (80017c0 <HAL_UART_RxCpltCallback+0xac>)
 8001742:	4820      	ldr	r0, [pc, #128]	; (80017c4 <HAL_UART_RxCpltCallback+0xb0>)
 8001744:	f005 f9a8 	bl	8006a98 <HAL_UART_Receive_DMA>

	switch (data)
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	2b3a      	cmp	r3, #58	; 0x3a
 800174c:	d004      	beq.n	8001758 <HAL_UART_RxCpltCallback+0x44>
 800174e:	2b3b      	cmp	r3, #59	; 0x3b
 8001750:	d009      	beq.n	8001766 <HAL_UART_RxCpltCallback+0x52>
 8001752:	2b0d      	cmp	r3, #13
 8001754:	d007      	beq.n	8001766 <HAL_UART_RxCpltCallback+0x52>
 8001756:	e016      	b.n	8001786 <HAL_UART_RxCpltCallback+0x72>
	{
		case ':':
			indRx = 0;
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HAL_UART_RxCpltCallback+0xb4>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
			flagRx = 1;
 800175e:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_UART_RxCpltCallback+0xb8>)
 8001760:	2201      	movs	r2, #1
 8001762:	701a      	strb	r2, [r3, #0]
			break;
 8001764:	e027      	b.n	80017b6 <HAL_UART_RxCpltCallback+0xa2>
		case '\r':
		case ';':
			if (flagRx)
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_UART_RxCpltCallback+0xb8>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d020      	beq.n	80017b0 <HAL_UART_RxCpltCallback+0x9c>
			{
				flagRx = 0;
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_UART_RxCpltCallback+0xb8>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
				command[indRx] = 0;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_UART_RxCpltCallback+0xb4>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_UART_RxCpltCallback+0xbc>)
 800177c:	2100      	movs	r1, #0
 800177e:	5499      	strb	r1, [r3, r2]
				InterpretCmd();
 8001780:	f7ff fece 	bl	8001520 <InterpretCmd>
			}
			break;
 8001784:	e014      	b.n	80017b0 <HAL_UART_RxCpltCallback+0x9c>
		default:
			if (flagRx)
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_UART_RxCpltCallback+0xb8>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d012      	beq.n	80017b4 <HAL_UART_RxCpltCallback+0xa0>
			{
				command[indRx] = data;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_UART_RxCpltCallback+0xb4>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	4619      	mov	r1, r3
 8001794:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <HAL_UART_RxCpltCallback+0xbc>)
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	5453      	strb	r3, [r2, r1]
				if (indRx < MAX_STRLEN - 1) indRx++;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_UART_RxCpltCallback+0xb4>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b26      	cmp	r3, #38	; 0x26
 80017a0:	d808      	bhi.n	80017b4 <HAL_UART_RxCpltCallback+0xa0>
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_UART_RxCpltCallback+0xb4>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <HAL_UART_RxCpltCallback+0xb4>)
 80017ac:	701a      	strb	r2, [r3, #0]
			}
			break;
 80017ae:	e001      	b.n	80017b4 <HAL_UART_RxCpltCallback+0xa0>
			break;
 80017b0:	bf00      	nop
 80017b2:	e000      	b.n	80017b6 <HAL_UART_RxCpltCallback+0xa2>
			break;
 80017b4:	bf00      	nop
	}
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000328 	.word	0x20000328
 80017c4:	20000484 	.word	0x20000484
 80017c8:	20000215 	.word	0x20000215
 80017cc:	20000214 	.word	0x20000214
 80017d0:	200002f8 	.word	0x200002f8

080017d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a23      	ldr	r2, [pc, #140]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d136      	bne.n	8001852 <HAL_TIM_PeriodElapsedCallback+0x7e>
	{
		if (state != HOME && state != STILL && state != MOVING_JOINT && state != MOVING_LEG)
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d03b      	beq.n	8001864 <HAL_TIM_PeriodElapsedCallback+0x90>
 80017ec:	4b20      	ldr	r3, [pc, #128]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b09      	cmp	r3, #9
 80017f2:	d037      	beq.n	8001864 <HAL_TIM_PeriodElapsedCallback+0x90>
 80017f4:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d033      	beq.n	8001864 <HAL_TIM_PeriodElapsedCallback+0x90>
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b07      	cmp	r3, #7
 8001802:	d02f      	beq.n	8001864 <HAL_TIM_PeriodElapsedCallback+0x90>
		{
			USART_TxStream[0] = 0;
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
			sprintf(USART_TxStream, "TEST_TIMER2\n\r");
 800180a:	4a1a      	ldr	r2, [pc, #104]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800180e:	4614      	mov	r4, r2
 8001810:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001812:	6020      	str	r0, [r4, #0]
 8001814:	6061      	str	r1, [r4, #4]
 8001816:	60a2      	str	r2, [r4, #8]
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	81a3      	strh	r3, [r4, #12]
			HAL_UART_Transmit(&huart1, (uint8_t*) USART_TxStream, (sizeof(USART_TxStream)-1), 100);
 800181c:	2364      	movs	r3, #100	; 0x64
 800181e:	2227      	movs	r2, #39	; 0x27
 8001820:	4914      	ldr	r1, [pc, #80]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001822:	4816      	ldr	r0, [pc, #88]	; (800187c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001824:	f005 f8a5 	bl	8006972 <HAL_UART_Transmit>
			__HAL_UART_CLEAR_PEFLAG(&huart1);
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
			__HAL_UART_FLUSH_DRREGISTER(&huart1);
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685b      	ldr	r3, [r3, #4]

			stop(anglePos);
 8001844:	480e      	ldr	r0, [pc, #56]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001846:	f000 fa7a 	bl	8001d3e <stop>
			state = STILL;
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800184c:	2209      	movs	r2, #9
 800184e:	701a      	strb	r2, [r3, #0]
//		__HAL_UART_CLEAR_PEFLAG(&huart1);
		HAL_GPIO_TogglePin(START_LED_GPIO_Port, START_LED_Pin);
		//	stop(anglePos);
		//	state = STILL;
	}
}
 8001850:	e008      	b.n	8001864 <HAL_TIM_PeriodElapsedCallback+0x90>
	else if (htim == &htim3)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d104      	bne.n	8001864 <HAL_TIM_PeriodElapsedCallback+0x90>
		HAL_GPIO_TogglePin(START_LED_GPIO_Port, START_LED_Pin);
 800185a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185e:	480a      	ldr	r0, [pc, #40]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001860:	f002 f93a 	bl	8003ad8 <HAL_GPIO_TogglePin>
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	200003f8 	.word	0x200003f8
 8001870:	20000320 	.word	0x20000320
 8001874:	20000384 	.word	0x20000384
 8001878:	08009114 	.word	0x08009114
 800187c:	20000484 	.word	0x20000484
 8001880:	200002ac 	.word	0x200002ac
 8001884:	200003b0 	.word	0x200003b0
 8001888:	40011000 	.word	0x40011000

0800188c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
	stop(anglePos);
 8001896:	4808      	ldr	r0, [pc, #32]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001898:	f000 fa51 	bl	8001d3e <stop>
	state = STILL;
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_GPIO_EXTI_Callback+0x30>)
 800189e:	2209      	movs	r2, #9
 80018a0:	701a      	strb	r2, [r3, #0]
	homing(anglePos, refAngles);
 80018a2:	4907      	ldr	r1, [pc, #28]	; (80018c0 <HAL_GPIO_EXTI_Callback+0x34>)
 80018a4:	4804      	ldr	r0, [pc, #16]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80018a6:	f000 fa23 	bl	8001cf0 <homing>
	state = HOME;
 80018aa:	4b04      	ldr	r3, [pc, #16]	; (80018bc <HAL_GPIO_EXTI_Callback+0x30>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200002ac 	.word	0x200002ac
 80018bc:	20000320 	.word	0x20000320
 80018c0:	20000000 	.word	0x20000000

080018c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <PCA9685_SetBit>:


I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af04      	add	r7, sp, #16
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
 80018da:	460b      	mov	r3, r1
 80018dc:	71bb      	strb	r3, [r7, #6]
 80018de:	4613      	mov	r3, r2
 80018e0:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if (Value) Value =1;
 80018e2:	797b      	ldrb	r3, [r7, #5]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <PCA9685_SetBit+0x1c>
 80018e8:	2301      	movs	r3, #1
 80018ea:	717b      	strb	r3, [r7, #5]

	if (HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <PCA9685_SetBit+0xb0>)
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	230a      	movs	r3, #10
 80018f6:	9302      	str	r3, [sp, #8]
 80018f8:	2301      	movs	r3, #1
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	f107 030f 	add.w	r3, r7, #15
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2301      	movs	r3, #1
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	f002 fc49 	bl	800419c <HAL_I2C_Mem_Read>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e031      	b.n	8001978 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1 << PCA9685_MODE1_RESTART_BIT) | (1 << Bit));
 8001914:	79bb      	ldrb	r3, [r7, #6]
 8001916:	2201      	movs	r2, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	b25b      	sxtb	r3, r3
 800191e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001922:	b25b      	sxtb	r3, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	b25a      	sxtb	r2, r3
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	b25b      	sxtb	r3, r3
 800192c:	4013      	ands	r3, r2
 800192e:	b25b      	sxtb	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1) << Bit;
 8001934:	797b      	ldrb	r3, [r7, #5]
 8001936:	f003 0201 	and.w	r2, r3, #1
 800193a:	79bb      	ldrb	r3, [r7, #6]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	b25a      	sxtb	r2, r3
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	b25b      	sxtb	r3, r3
 8001946:	4313      	orrs	r3, r2
 8001948:	b25b      	sxtb	r3, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	73fb      	strb	r3, [r7, #15]

	if (HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <PCA9685_SetBit+0xb0>)
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	b29a      	uxth	r2, r3
 8001956:	230a      	movs	r3, #10
 8001958:	9302      	str	r3, [sp, #8]
 800195a:	2301      	movs	r3, #1
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	f107 030f 	add.w	r3, r7, #15
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2301      	movs	r3, #1
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	f002 fb1e 	bl	8003fa8 <HAL_I2C_Mem_Write>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200003ac 	.word	0x200003ac

08001984 <PCA9685_SoftwareReset>:


PCA9685_STATUS PCA9685_SoftwareReset()
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 800198a:	2306      	movs	r3, #6
 800198c:	71fb      	strb	r3, [r7, #7]
	if (HAL_OK != HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <PCA9685_SoftwareReset+0x30>)
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	1dfa      	adds	r2, r7, #7
 8001994:	230a      	movs	r3, #10
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2301      	movs	r3, #1
 800199a:	2100      	movs	r1, #0
 800199c:	f002 fa06 	bl	8003dac <HAL_I2C_Master_Transmit>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	200003ac 	.word	0x200003ac

080019b8 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	461a      	mov	r2, r3
 80019c6:	2104      	movs	r1, #4
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff ff81 	bl	80018d0 <PCA9685_SetBit>
 80019ce:	4603      	mov	r3, r0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	461a      	mov	r2, r3
 80019e6:	2107      	movs	r1, #7
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff ff71 	bl	80018d0 <PCA9685_SetBit>
 80019ee:	4603      	mov	r3, r0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	461a      	mov	r2, r3
 8001a06:	2105      	movs	r1, #5
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff ff61 	bl	80018d0 <PCA9685_SetBit>
 8001a0e:	4603      	mov	r3, r0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <PCA9685_SetPWMFrequency>:
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_ALLCALL_BIT, Enable);
}

//	Frequency
PCA9685_STATUS PCA9685_SetPWMFrequency(uint16_t Freq)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af04      	add	r7, sp, #16
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if (Freq >= 1526)
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d902      	bls.n	8001a32 <PCA9685_SetPWMFrequency+0x1a>
	{
		Prescale = 0x03;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	72fb      	strb	r3, [r7, #11]
 8001a30:	e043      	b.n	8001aba <PCA9685_SetPWMFrequency+0xa2>
	}
	else if (Freq <= 24)
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	2b18      	cmp	r3, #24
 8001a36:	d802      	bhi.n	8001a3e <PCA9685_SetPWMFrequency+0x26>
	{
		Prescale = 0xFF;
 8001a38:	23ff      	movs	r3, #255	; 0xff
 8001a3a:	72fb      	strb	r3, [r7, #11]
 8001a3c:	e03d      	b.n	8001aba <PCA9685_SetPWMFrequency+0xa2>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Freq)) - 1;
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f917 	bl	8000c74 <__aeabi_ui2f>
 8001a46:	4603      	mov	r3, r0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fce5 	bl	8000418 <__aeabi_f2d>
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <PCA9685_SetPWMFrequency+0xe8>)
 8001a54:	f7fe fd38 	bl	80004c8 <__aeabi_dmul>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	460c      	mov	r4, r1
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4623      	mov	r3, r4
 8001a60:	a125      	add	r1, pc, #148	; (adr r1, 8001af8 <PCA9685_SetPWMFrequency+0xe0>)
 8001a62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a66:	f7fe fe59 	bl	800071c <__aeabi_ddiv>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	460c      	mov	r4, r1
 8001a6e:	4618      	mov	r0, r3
 8001a70:	4621      	mov	r1, r4
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <PCA9685_SetPWMFrequency+0xec>)
 8001a78:	f7fe fb6e 	bl	8000158 <__aeabi_dsub>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	460c      	mov	r4, r1
 8001a80:	4618      	mov	r0, r3
 8001a82:	4621      	mov	r1, r4
 8001a84:	f7fe fff0 	bl	8000a68 <__aeabi_d2f>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f7fe fcc3 	bl	8000418 <__aeabi_f2d>
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <PCA9685_SetPWMFrequency+0xf0>)
 8001a98:	f7fe fb60 	bl	800015c <__adddf3>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	f005 fd10 	bl	80074c8 <floor>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	460c      	mov	r4, r1
 8001aac:	4618      	mov	r0, r3
 8001aae:	4621      	mov	r1, r4
 8001ab0:	f7fe ffba 	bl	8000a28 <__aeabi_d2uiz>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	72fb      	strb	r3, [r7, #11]
	}

	//	To change the frequency, PCA9685 has to be in Sleep Mode
	PCA9685_SleepMode(1);
 8001aba:	2001      	movs	r0, #1
 8001abc:	f7ff ff7c 	bl	80019b8 <PCA9685_SleepMode>
	//	Send Prescale Value to Servo Controller
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10);
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <PCA9685_SetPWMFrequency+0xf4>)
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	230a      	movs	r3, #10
 8001ac6:	9302      	str	r3, [sp, #8]
 8001ac8:	2301      	movs	r3, #1
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	f107 030b 	add.w	r3, r7, #11
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	22fe      	movs	r2, #254	; 0xfe
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	f002 fa66 	bl	8003fa8 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8001adc:	2000      	movs	r0, #0
 8001ade:	f7ff ff6b 	bl	80019b8 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f7ff ff78 	bl	80019d8 <PCA9685_RestartMode>

	return PCA9685_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd90      	pop	{r4, r7, pc}
 8001af2:	bf00      	nop
 8001af4:	f3af 8000 	nop.w
 8001af8:	00000000 	.word	0x00000000
 8001afc:	4177d784 	.word	0x4177d784
 8001b00:	40b00000 	.word	0x40b00000
 8001b04:	3ff00000 	.word	0x3ff00000
 8001b08:	3fe00000 	.word	0x3fe00000
 8001b0c:	200003ac 	.word	0x200003ac

08001b10 <PCA9685_SetPWM>:

PCA9685_STATUS PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af04      	add	r7, sp, #16
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	80bb      	strh	r3, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	3306      	adds	r3, #6
 8001b2a:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8001b2c:	88bb      	ldrh	r3, [r7, #4]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime >> 8;
 8001b32:	88bb      	ldrh	r3, [r7, #4]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8001b3c:	887b      	ldrh	r3, [r7, #2]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime >> 8;
 8001b42:	887b      	ldrh	r3, [r7, #2]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	72fb      	strb	r3, [r7, #11]

	if (HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <PCA9685_SetPWM+0x70>)
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	230a      	movs	r3, #10
 8001b56:	9302      	str	r3, [sp, #8]
 8001b58:	2304      	movs	r3, #4
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	f107 0308 	add.w	r3, r7, #8
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2301      	movs	r3, #1
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	f002 fa1f 	bl	8003fa8 <HAL_I2C_Mem_Write>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <PCA9685_SetPWM+0x64>
	{
		return PCA9685_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <PCA9685_SetPWM+0x66>
	}

	return PCA9685_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200003ac 	.word	0x200003ac

08001b84 <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	80bb      	strh	r3, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	71bb      	strb	r3, [r7, #6]
	if (Value > 4095) Value = 4095;
 8001b96:	88bb      	ldrh	r3, [r7, #4]
 8001b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b9c:	d302      	bcc.n	8001ba4 <PCA9685_SetPin+0x20>
 8001b9e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001ba2:	80bb      	strh	r3, [r7, #4]

	if (Invert) {
 8001ba4:	79bb      	ldrb	r3, [r7, #6]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d025      	beq.n	8001bf6 <PCA9685_SetPin+0x72>
		if (Value == 0) {
 8001baa:	88bb      	ldrh	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d108      	bne.n	8001bc2 <PCA9685_SetPin+0x3e>
			//	Special value for signal fully on
			return PCA9685_SetPWM(Channel, 4096, 0);
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ffa9 	bl	8001b10 <PCA9685_SetPWM>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	e03a      	b.n	8001c38 <PCA9685_SetPin+0xb4>
		}
		else if (Value == 4095)
 8001bc2:	88bb      	ldrh	r3, [r7, #4]
 8001bc4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d108      	bne.n	8001bde <PCA9685_SetPin+0x5a>
		{
			//	Special value for signal fully off
			return PCA9685_SetPWM(Channel, 0, 4096);
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff9b 	bl	8001b10 <PCA9685_SetPWM>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	e02c      	b.n	8001c38 <PCA9685_SetPin+0xb4>
		}
		else
		{
			return PCA9685_SetPWM(Channel, 0, 4095-Value);
 8001bde:	88bb      	ldrh	r3, [r7, #4]
 8001be0:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001be4:	330f      	adds	r3, #15
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff8f 	bl	8001b10 <PCA9685_SetPWM>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	e020      	b.n	8001c38 <PCA9685_SetPin+0xb4>
		}
	}
	else
	{
		if (Value == 4095) {
 8001bf6:	88bb      	ldrh	r3, [r7, #4]
 8001bf8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d108      	bne.n	8001c12 <PCA9685_SetPin+0x8e>
			//	Special value for signal fully on
			return PCA9685_SetPWM(Channel, 4096, 0);
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff81 	bl	8001b10 <PCA9685_SetPWM>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	e012      	b.n	8001c38 <PCA9685_SetPin+0xb4>
		}
		else if (Value == 0)
 8001c12:	88bb      	ldrh	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d108      	bne.n	8001c2a <PCA9685_SetPin+0xa6>
		{
			//	Special value for signal fully off
			return PCA9685_SetPWM(Channel, 0, 4096);
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff75 	bl	8001b10 <PCA9685_SetPWM>
 8001c26:	4603      	mov	r3, r0
 8001c28:	e006      	b.n	8001c38 <PCA9685_SetPin+0xb4>
		}
		else
		{
			return PCA9685_SetPWM(Channel, 0, Value);
 8001c2a:	88ba      	ldrh	r2, [r7, #4]
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff6d 	bl	8001b10 <PCA9685_SetPWM>
 8001c36:	4603      	mov	r3, r0
		}
	}
	return PCA9685_ERROR;
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, uint16_t Angle, uint8_t Invert)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	80bb      	strh	r3, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	71bb      	strb	r3, [r7, #6]
	float Value;
	if (Angle < MIN_ANGLE) Angle = MIN_ANGLE;
	if (Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 8001c52:	88bb      	ldrh	r3, [r7, #4]
 8001c54:	2bb4      	cmp	r3, #180	; 0xb4
 8001c56:	d901      	bls.n	8001c5c <PCA9685_SetServoAngle+0x1c>
 8001c58:	23b4      	movs	r3, #180	; 0xb4
 8001c5a:	80bb      	strh	r3, [r7, #4]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8001c5c:	88bb      	ldrh	r3, [r7, #4]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f80c 	bl	8000c7c <__aeabi_i2f>
 8001c64:	4603      	mov	r3, r0
 8001c66:	490f      	ldr	r1, [pc, #60]	; (8001ca4 <PCA9685_SetServoAngle+0x64>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff f85b 	bl	8000d24 <__aeabi_fmul>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	490d      	ldr	r1, [pc, #52]	; (8001ca8 <PCA9685_SetServoAngle+0x68>)
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff f90a 	bl	8000e8c <__aeabi_fdiv>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	490c      	ldr	r1, [pc, #48]	; (8001cac <PCA9685_SetServoAngle+0x6c>)
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe ff49 	bl	8000b14 <__addsf3>
 8001c82:	4603      	mov	r3, r0
 8001c84:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, Invert);
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f7ff fa38 	bl	80010fc <__aeabi_f2uiz>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	b299      	uxth	r1, r3
 8001c90:	79ba      	ldrb	r2, [r7, #6]
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff75 	bl	8001b84 <PCA9685_SetPin>
 8001c9a:	4603      	mov	r3, r0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	43c30000 	.word	0x43c30000
 8001ca8:	43340000 	.word	0x43340000
 8001cac:	42dc0000 	.word	0x42dc0000

08001cb0 <PCA9685_Init>:
#endif

void PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8001cb8:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <PCA9685_Init+0x3c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]

	PCA9685_STATUS Status;

	Status = PCA9685_SoftwareReset();
 8001cbe:	f7ff fe61 	bl	8001984 <PCA9685_SoftwareReset>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	73fb      	strb	r3, [r7, #15]
#ifdef PCA9685_SERVO_MODE
	Status = PCA9685_SetPWMFrequency(48);
 8001cc6:	2030      	movs	r0, #48	; 0x30
 8001cc8:	f7ff fea6 	bl	8001a18 <PCA9685_SetPWMFrequency>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	73fb      	strb	r3, [r7, #15]
#else
	PCA9685_SetPWMFrequency(1000);
#endif
	//	Set AutoIncrement
	Status = PCA9685_AutoIncrement(1);
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f7ff fe91 	bl	80019f8 <PCA9685_AutoIncrement>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	73fb      	strb	r3, [r7, #15]
	if (Status != PCA9685_OK)
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <PCA9685_Init+0x34>
	{
		Error_Handler();
 8001ce0:	f7ff fdf0 	bl	80018c4 <Error_Handler>
	}
}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200003ac 	.word	0x200003ac

08001cf0 <homing>:
/* Includes ------------------------------------------------------------------*/
#include "spider.h"
#include "pca9685.h"

void homing(uint16_t *angles, uint16_t *refAngles)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
	int servo;
	for (servo = 0; servo < SERVO_COUNT; servo++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	e017      	b.n	8001d30 <homing+0x40>
	{
		//	Set angles for each servo
		PCA9685_SetServoAngle(servo, refAngles[servo], 0);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	b2d8      	uxtb	r0, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	4619      	mov	r1, r3
 8001d12:	f7ff ff95 	bl	8001c40 <PCA9685_SetServoAngle>

		//	Update position values
		angles[servo] = refAngles[servo];
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	441a      	add	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	440b      	add	r3, r1
 8001d26:	8812      	ldrh	r2, [r2, #0]
 8001d28:	801a      	strh	r2, [r3, #0]
	for (servo = 0; servo < SERVO_COUNT; servo++)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b0b      	cmp	r3, #11
 8001d34:	dde4      	ble.n	8001d00 <homing+0x10>
	}
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <stop>:
//		PCA9685_SetServoAngle(middleServo, angles[middleServo], 0);
//	}
//}

void stop(uint16_t *angles)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
	int servo;
	for (servo = 0; servo < SERVO_COUNT; servo++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	e00d      	b.n	8001d68 <stop+0x2a>
	{
		PCA9685_SetServoAngle(servo, angles[servo], 0);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	b2d8      	uxtb	r0, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	4413      	add	r3, r2
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f7ff ff6f 	bl	8001c40 <PCA9685_SetServoAngle>
	for (servo = 0; servo < SERVO_COUNT; servo++)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3301      	adds	r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b0b      	cmp	r3, #11
 8001d6c:	ddee      	ble.n	8001d4c <stop+0xe>
	}
}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <servoControl>:

void servoControl(uint16_t *angles, uint8_t servo, uint16_t angle)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	70fb      	strb	r3, [r7, #3]
 8001d82:	4613      	mov	r3, r2
 8001d84:	803b      	strh	r3, [r7, #0]
	PCA9685_SetServoAngle(servo, angle, 0);
 8001d86:	8839      	ldrh	r1, [r7, #0]
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff57 	bl	8001c40 <PCA9685_SetServoAngle>
	angles[servo] = angle;
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	883a      	ldrh	r2, [r7, #0]
 8001d9c:	801a      	strh	r2, [r3, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <legControl>:

void legControl(uint16_t *angles, uint8_t leg, char movement)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	70fb      	strb	r3, [r7, #3]
 8001db2:	4613      	mov	r3, r2
 8001db4:	70bb      	strb	r3, [r7, #2]
	//	Select the corresponding servos for each leg
	uint8_t bottomServo = (leg * 3) - 3;
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	461a      	mov	r2, r3
 8001dba:	0052      	lsls	r2, r2, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	73fb      	strb	r3, [r7, #15]
	uint8_t middleServo = (leg * 3) - 2;
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	0052      	lsls	r2, r2, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	3b02      	subs	r3, #2
 8001dd0:	73bb      	strb	r3, [r7, #14]
	uint8_t topServo = (leg * 3) - 1;
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	0052      	lsls	r2, r2, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	737b      	strb	r3, [r7, #13]
	if (movement == 'U')
 8001de0:	78bb      	ldrb	r3, [r7, #2]
 8001de2:	2b55      	cmp	r3, #85	; 0x55
 8001de4:	d17a      	bne.n	8001edc <legControl+0x136>
	{
		if (angles[middleServo] < SERVO_MAX && angles[topServo] < SERVO_MAX)
 8001de6:	7bbb      	ldrb	r3, [r7, #14]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001df4:	d238      	bcs.n	8001e68 <legControl+0xc2>
 8001df6:	7b7b      	ldrb	r3, [r7, #13]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e04:	d230      	bcs.n	8001e68 <legControl+0xc2>
		{
			PCA9685_SetServoAngle(middleServo, angles[middleServo] + 20, 0);
 8001e06:	7bbb      	ldrb	r3, [r7, #14]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	3314      	adds	r3, #20
 8001e12:	b299      	uxth	r1, r3
 8001e14:	7bbb      	ldrb	r3, [r7, #14]
 8001e16:	2200      	movs	r2, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff11 	bl	8001c40 <PCA9685_SetServoAngle>
			angles[middleServo] += 20;
 8001e1e:	7bbb      	ldrb	r3, [r7, #14]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	881a      	ldrh	r2, [r3, #0]
 8001e28:	7bbb      	ldrb	r3, [r7, #14]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	440b      	add	r3, r1
 8001e30:	3214      	adds	r2, #20
 8001e32:	b292      	uxth	r2, r2
 8001e34:	801a      	strh	r2, [r3, #0]
			PCA9685_SetServoAngle(topServo, angles[topServo] + 5, 0);
 8001e36:	7b7b      	ldrb	r3, [r7, #13]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	3305      	adds	r3, #5
 8001e42:	b299      	uxth	r1, r3
 8001e44:	7b7b      	ldrb	r3, [r7, #13]
 8001e46:	2200      	movs	r2, #0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fef9 	bl	8001c40 <PCA9685_SetServoAngle>
			angles[topServo] += 5;
 8001e4e:	7b7b      	ldrb	r3, [r7, #13]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	881a      	ldrh	r2, [r3, #0]
 8001e58:	7b7b      	ldrb	r3, [r7, #13]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	440b      	add	r3, r1
 8001e60:	3205      	adds	r2, #5
 8001e62:	b292      	uxth	r2, r2
 8001e64:	801a      	strh	r2, [r3, #0]
 8001e66:	e0f9      	b.n	800205c <legControl+0x2b6>
		}
		else if (angles[middleServo] < SERVO_MAX)
 8001e68:	7bbb      	ldrb	r3, [r7, #14]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e76:	d218      	bcs.n	8001eaa <legControl+0x104>
		{
			PCA9685_SetServoAngle(middleServo, angles[middleServo] + 20, 0);
 8001e78:	7bbb      	ldrb	r3, [r7, #14]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	3314      	adds	r3, #20
 8001e84:	b299      	uxth	r1, r3
 8001e86:	7bbb      	ldrb	r3, [r7, #14]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fed8 	bl	8001c40 <PCA9685_SetServoAngle>
			angles[middleServo] += 20;
 8001e90:	7bbb      	ldrb	r3, [r7, #14]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	4413      	add	r3, r2
 8001e98:	881a      	ldrh	r2, [r3, #0]
 8001e9a:	7bbb      	ldrb	r3, [r7, #14]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3214      	adds	r2, #20
 8001ea4:	b292      	uxth	r2, r2
 8001ea6:	801a      	strh	r2, [r3, #0]
			PCA9685_SetServoAngle(bottomServo, angles[bottomServo] + 20, 0);
			angles[bottomServo] += 20;
		}
	}
//	PCA9685_SetServoAngle(servo, angle, invert);
}
 8001ea8:	e0d8      	b.n	800205c <legControl+0x2b6>
			PCA9685_SetServoAngle(topServo, angles[topServo] + 5, 0);
 8001eaa:	7b7b      	ldrb	r3, [r7, #13]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	3305      	adds	r3, #5
 8001eb6:	b299      	uxth	r1, r3
 8001eb8:	7b7b      	ldrb	r3, [r7, #13]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff febf 	bl	8001c40 <PCA9685_SetServoAngle>
			angles[topServo] += 5;
 8001ec2:	7b7b      	ldrb	r3, [r7, #13]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	881a      	ldrh	r2, [r3, #0]
 8001ecc:	7b7b      	ldrb	r3, [r7, #13]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3205      	adds	r2, #5
 8001ed6:	b292      	uxth	r2, r2
 8001ed8:	801a      	strh	r2, [r3, #0]
}
 8001eda:	e0bf      	b.n	800205c <legControl+0x2b6>
	else if (movement == 'D')
 8001edc:	78bb      	ldrb	r3, [r7, #2]
 8001ede:	2b44      	cmp	r3, #68	; 0x44
 8001ee0:	d178      	bne.n	8001fd4 <legControl+0x22e>
		if (angles[middleServo] > SERVO_MIN && angles[topServo] < SERVO_MIN)
 8001ee2:	7bbb      	ldrb	r3, [r7, #14]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	2b6e      	cmp	r3, #110	; 0x6e
 8001eee:	d937      	bls.n	8001f60 <legControl+0x1ba>
 8001ef0:	7b7b      	ldrb	r3, [r7, #13]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	2b6d      	cmp	r3, #109	; 0x6d
 8001efc:	d830      	bhi.n	8001f60 <legControl+0x1ba>
			PCA9685_SetServoAngle(middleServo, angles[middleServo] - 20, 0);
 8001efe:	7bbb      	ldrb	r3, [r7, #14]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	3b14      	subs	r3, #20
 8001f0a:	b299      	uxth	r1, r3
 8001f0c:	7bbb      	ldrb	r3, [r7, #14]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fe95 	bl	8001c40 <PCA9685_SetServoAngle>
			angles[middleServo] -= 20;
 8001f16:	7bbb      	ldrb	r3, [r7, #14]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	881a      	ldrh	r2, [r3, #0]
 8001f20:	7bbb      	ldrb	r3, [r7, #14]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	440b      	add	r3, r1
 8001f28:	3a14      	subs	r2, #20
 8001f2a:	b292      	uxth	r2, r2
 8001f2c:	801a      	strh	r2, [r3, #0]
			PCA9685_SetServoAngle(topServo, angles[topServo] - 5, 0);
 8001f2e:	7b7b      	ldrb	r3, [r7, #13]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	3b05      	subs	r3, #5
 8001f3a:	b299      	uxth	r1, r3
 8001f3c:	7b7b      	ldrb	r3, [r7, #13]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fe7d 	bl	8001c40 <PCA9685_SetServoAngle>
			angles[topServo] -= 5;
 8001f46:	7b7b      	ldrb	r3, [r7, #13]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	881a      	ldrh	r2, [r3, #0]
 8001f50:	7b7b      	ldrb	r3, [r7, #13]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	440b      	add	r3, r1
 8001f58:	3a05      	subs	r2, #5
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	801a      	strh	r2, [r3, #0]
 8001f5e:	e07d      	b.n	800205c <legControl+0x2b6>
		else if (angles[middleServo] < SERVO_MAX)
 8001f60:	7bbb      	ldrb	r3, [r7, #14]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	4413      	add	r3, r2
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f6e:	d218      	bcs.n	8001fa2 <legControl+0x1fc>
			PCA9685_SetServoAngle(middleServo, angles[middleServo] - 20, 0);
 8001f70:	7bbb      	ldrb	r3, [r7, #14]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	4413      	add	r3, r2
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	3b14      	subs	r3, #20
 8001f7c:	b299      	uxth	r1, r3
 8001f7e:	7bbb      	ldrb	r3, [r7, #14]
 8001f80:	2200      	movs	r2, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fe5c 	bl	8001c40 <PCA9685_SetServoAngle>
			angles[middleServo] -= 20;
 8001f88:	7bbb      	ldrb	r3, [r7, #14]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	881a      	ldrh	r2, [r3, #0]
 8001f92:	7bbb      	ldrb	r3, [r7, #14]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	440b      	add	r3, r1
 8001f9a:	3a14      	subs	r2, #20
 8001f9c:	b292      	uxth	r2, r2
 8001f9e:	801a      	strh	r2, [r3, #0]
}
 8001fa0:	e05c      	b.n	800205c <legControl+0x2b6>
			PCA9685_SetServoAngle(topServo, angles[topServo] - 5, 0);
 8001fa2:	7b7b      	ldrb	r3, [r7, #13]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	3b05      	subs	r3, #5
 8001fae:	b299      	uxth	r1, r3
 8001fb0:	7b7b      	ldrb	r3, [r7, #13]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fe43 	bl	8001c40 <PCA9685_SetServoAngle>
			angles[topServo] -= 5;
 8001fba:	7b7b      	ldrb	r3, [r7, #13]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	881a      	ldrh	r2, [r3, #0]
 8001fc4:	7b7b      	ldrb	r3, [r7, #13]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	440b      	add	r3, r1
 8001fcc:	3a05      	subs	r2, #5
 8001fce:	b292      	uxth	r2, r2
 8001fd0:	801a      	strh	r2, [r3, #0]
}
 8001fd2:	e043      	b.n	800205c <legControl+0x2b6>
	else if (movement == 'R')
 8001fd4:	78bb      	ldrb	r3, [r7, #2]
 8001fd6:	2b52      	cmp	r3, #82	; 0x52
 8001fd8:	d11f      	bne.n	800201a <legControl+0x274>
		if (angles[bottomServo] > SERVO_MIN)
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	2b6e      	cmp	r3, #110	; 0x6e
 8001fe6:	d939      	bls.n	800205c <legControl+0x2b6>
			PCA9685_SetServoAngle(bottomServo, angles[bottomServo] - 20, 0);
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	4413      	add	r3, r2
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	3b14      	subs	r3, #20
 8001ff4:	b299      	uxth	r1, r3
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fe20 	bl	8001c40 <PCA9685_SetServoAngle>
			angles[bottomServo] -= 20;
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	4413      	add	r3, r2
 8002008:	881a      	ldrh	r2, [r3, #0]
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	440b      	add	r3, r1
 8002012:	3a14      	subs	r2, #20
 8002014:	b292      	uxth	r2, r2
 8002016:	801a      	strh	r2, [r3, #0]
}
 8002018:	e020      	b.n	800205c <legControl+0x2b6>
		if (angles[bottomServo] < SERVO_MAX)
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002028:	d218      	bcs.n	800205c <legControl+0x2b6>
			PCA9685_SetServoAngle(bottomServo, angles[bottomServo] + 20, 0);
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	3314      	adds	r3, #20
 8002036:	b299      	uxth	r1, r3
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	2200      	movs	r2, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fdff 	bl	8001c40 <PCA9685_SetServoAngle>
			angles[bottomServo] += 20;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	881a      	ldrh	r2, [r3, #0]
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	440b      	add	r3, r1
 8002054:	3214      	adds	r2, #20
 8002056:	b292      	uxth	r2, r2
 8002058:	801a      	strh	r2, [r3, #0]
}
 800205a:	e7ff      	b.n	800205c <legControl+0x2b6>
 800205c:	bf00      	nop
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <forward_walk>:
  - go forward
  - blocking function
  - parameter step steps wanted to go
   ---------------------------------------------------------------------------*/
void forward_walk()
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	moveSpeed = leg_moveSpeed;
 8002068:	4b5d      	ldr	r3, [pc, #372]	; (80021e0 <forward_walk+0x17c>)
 800206a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800206e:	601a      	str	r2, [r3, #0]
    if (actualPos[2][1] == yStart)
 8002070:	4b5c      	ldr	r3, [pc, #368]	; (80021e4 <forward_walk+0x180>)
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	f04f 0100 	mov.w	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe ffe7 	bl	800104c <__aeabi_fcmpeq>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d055      	beq.n	8002130 <forward_walk+0xcc>
    {
		//leg 2&1 move
		setPosition(2, xDefault + xOffset, yStart, zUp);
 8002084:	4b58      	ldr	r3, [pc, #352]	; (80021e8 <forward_walk+0x184>)
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	4958      	ldr	r1, [pc, #352]	; (80021ec <forward_walk+0x188>)
 800208c:	2002      	movs	r0, #2
 800208e:	f000 f973 	bl	8002378 <setPosition>
		waitAllReach();
 8002092:	f000 fad7 	bl	8002644 <waitAllReach>
		setPosition(2, xDefault + xOffset, yStart + 2 * yStep, zUp);
 8002096:	4b54      	ldr	r3, [pc, #336]	; (80021e8 <forward_walk+0x184>)
 8002098:	4a55      	ldr	r2, [pc, #340]	; (80021f0 <forward_walk+0x18c>)
 800209a:	4954      	ldr	r1, [pc, #336]	; (80021ec <forward_walk+0x188>)
 800209c:	2002      	movs	r0, #2
 800209e:	f000 f96b 	bl	8002378 <setPosition>
		waitAllReach();
 80020a2:	f000 facf 	bl	8002644 <waitAllReach>
		setPosition(2, xDefault + xOffset, yStart + 2 * yStep, zDefault);
 80020a6:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <forward_walk+0x190>)
 80020a8:	4a51      	ldr	r2, [pc, #324]	; (80021f0 <forward_walk+0x18c>)
 80020aa:	4950      	ldr	r1, [pc, #320]	; (80021ec <forward_walk+0x188>)
 80020ac:	2002      	movs	r0, #2
 80020ae:	f000 f963 	bl	8002378 <setPosition>
		waitAllReach();
 80020b2:	f000 fac7 	bl	8002644 <waitAllReach>

		moveSpeed = body_moveSpeed;
 80020b6:	4b4a      	ldr	r3, [pc, #296]	; (80021e0 <forward_walk+0x17c>)
 80020b8:	4a4f      	ldr	r2, [pc, #316]	; (80021f8 <forward_walk+0x194>)
 80020ba:	601a      	str	r2, [r3, #0]

		setPosition(0, xDefault + xOffset, yStart, zDefault);
 80020bc:	4b4d      	ldr	r3, [pc, #308]	; (80021f4 <forward_walk+0x190>)
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	494a      	ldr	r1, [pc, #296]	; (80021ec <forward_walk+0x188>)
 80020c4:	2000      	movs	r0, #0
 80020c6:	f000 f957 	bl	8002378 <setPosition>
		setPosition(1, xDefault + xOffset, yStart + 2 * yStep, zDefault);
 80020ca:	4b4a      	ldr	r3, [pc, #296]	; (80021f4 <forward_walk+0x190>)
 80020cc:	4a48      	ldr	r2, [pc, #288]	; (80021f0 <forward_walk+0x18c>)
 80020ce:	4947      	ldr	r1, [pc, #284]	; (80021ec <forward_walk+0x188>)
 80020d0:	2001      	movs	r0, #1
 80020d2:	f000 f951 	bl	8002378 <setPosition>
		setPosition(2, xDefault - xOffset, yStart + yStep, zDefault);
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <forward_walk+0x190>)
 80020d8:	4a48      	ldr	r2, [pc, #288]	; (80021fc <forward_walk+0x198>)
 80020da:	4944      	ldr	r1, [pc, #272]	; (80021ec <forward_walk+0x188>)
 80020dc:	2002      	movs	r0, #2
 80020de:	f000 f94b 	bl	8002378 <setPosition>
		setPosition(3, xDefault - xOffset, yStart + yStep, zDefault);
 80020e2:	4b44      	ldr	r3, [pc, #272]	; (80021f4 <forward_walk+0x190>)
 80020e4:	4a45      	ldr	r2, [pc, #276]	; (80021fc <forward_walk+0x198>)
 80020e6:	4941      	ldr	r1, [pc, #260]	; (80021ec <forward_walk+0x188>)
 80020e8:	2003      	movs	r0, #3
 80020ea:	f000 f945 	bl	8002378 <setPosition>
		waitAllReach();
 80020ee:	f000 faa9 	bl	8002644 <waitAllReach>

		moveSpeed = leg_moveSpeed;
 80020f2:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <forward_walk+0x17c>)
 80020f4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80020f8:	601a      	str	r2, [r3, #0]

		setPosition(1, xDefault + xOffset, yStart + 2 * yStep, zUp);
 80020fa:	4b3b      	ldr	r3, [pc, #236]	; (80021e8 <forward_walk+0x184>)
 80020fc:	4a3c      	ldr	r2, [pc, #240]	; (80021f0 <forward_walk+0x18c>)
 80020fe:	493b      	ldr	r1, [pc, #236]	; (80021ec <forward_walk+0x188>)
 8002100:	2001      	movs	r0, #1
 8002102:	f000 f939 	bl	8002378 <setPosition>
		waitAllReach();
 8002106:	f000 fa9d 	bl	8002644 <waitAllReach>
		setPosition(1, xDefault + xOffset, yStart, zUp);
 800210a:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <forward_walk+0x184>)
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	4936      	ldr	r1, [pc, #216]	; (80021ec <forward_walk+0x188>)
 8002112:	2001      	movs	r0, #1
 8002114:	f000 f930 	bl	8002378 <setPosition>
		waitAllReach();
 8002118:	f000 fa94 	bl	8002644 <waitAllReach>
		setPosition(1, xDefault + xOffset, yStart, zDefault);
 800211c:	4b35      	ldr	r3, [pc, #212]	; (80021f4 <forward_walk+0x190>)
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	4932      	ldr	r1, [pc, #200]	; (80021ec <forward_walk+0x188>)
 8002124:	2001      	movs	r0, #1
 8002126:	f000 f927 	bl	8002378 <setPosition>
		waitAllReach();
 800212a:	f000 fa8b 	bl	8002644 <waitAllReach>
		setPosition(3, xDefault + xOffset, yStart, zUp);
		waitAllReach();
		setPosition(3, xDefault + xOffset, yStart, zDefault);
		waitAllReach();
    }
}
 800212e:	e054      	b.n	80021da <forward_walk+0x176>
		setPosition(0, xDefault + xOffset, yStart, zUp);
 8002130:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <forward_walk+0x184>)
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	492d      	ldr	r1, [pc, #180]	; (80021ec <forward_walk+0x188>)
 8002138:	2000      	movs	r0, #0
 800213a:	f000 f91d 	bl	8002378 <setPosition>
		waitAllReach();
 800213e:	f000 fa81 	bl	8002644 <waitAllReach>
		setPosition(0, xDefault + xOffset, yStart + 2 * yStep, zUp);
 8002142:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <forward_walk+0x184>)
 8002144:	4a2a      	ldr	r2, [pc, #168]	; (80021f0 <forward_walk+0x18c>)
 8002146:	4929      	ldr	r1, [pc, #164]	; (80021ec <forward_walk+0x188>)
 8002148:	2000      	movs	r0, #0
 800214a:	f000 f915 	bl	8002378 <setPosition>
		waitAllReach();
 800214e:	f000 fa79 	bl	8002644 <waitAllReach>
		setPosition(0, xDefault + xOffset, yStart + 2 * yStep, zDefault);
 8002152:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <forward_walk+0x190>)
 8002154:	4a26      	ldr	r2, [pc, #152]	; (80021f0 <forward_walk+0x18c>)
 8002156:	4925      	ldr	r1, [pc, #148]	; (80021ec <forward_walk+0x188>)
 8002158:	2000      	movs	r0, #0
 800215a:	f000 f90d 	bl	8002378 <setPosition>
		waitAllReach();
 800215e:	f000 fa71 	bl	8002644 <waitAllReach>
		moveSpeed = body_moveSpeed;
 8002162:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <forward_walk+0x17c>)
 8002164:	4a24      	ldr	r2, [pc, #144]	; (80021f8 <forward_walk+0x194>)
 8002166:	601a      	str	r2, [r3, #0]
		setPosition(0, xDefault - xOffset, yStart + yStep, zDefault);
 8002168:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <forward_walk+0x190>)
 800216a:	4a24      	ldr	r2, [pc, #144]	; (80021fc <forward_walk+0x198>)
 800216c:	491f      	ldr	r1, [pc, #124]	; (80021ec <forward_walk+0x188>)
 800216e:	2000      	movs	r0, #0
 8002170:	f000 f902 	bl	8002378 <setPosition>
		setPosition(1, xDefault - xOffset, yStart + yStep, zDefault);
 8002174:	4b1f      	ldr	r3, [pc, #124]	; (80021f4 <forward_walk+0x190>)
 8002176:	4a21      	ldr	r2, [pc, #132]	; (80021fc <forward_walk+0x198>)
 8002178:	491c      	ldr	r1, [pc, #112]	; (80021ec <forward_walk+0x188>)
 800217a:	2001      	movs	r0, #1
 800217c:	f000 f8fc 	bl	8002378 <setPosition>
		setPosition(2, xDefault + xOffset, yStart, zDefault);
 8002180:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <forward_walk+0x190>)
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	4919      	ldr	r1, [pc, #100]	; (80021ec <forward_walk+0x188>)
 8002188:	2002      	movs	r0, #2
 800218a:	f000 f8f5 	bl	8002378 <setPosition>
		setPosition(3, xDefault + xOffset, yStart + 2 * yStep, zDefault);
 800218e:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <forward_walk+0x190>)
 8002190:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <forward_walk+0x18c>)
 8002192:	4916      	ldr	r1, [pc, #88]	; (80021ec <forward_walk+0x188>)
 8002194:	2003      	movs	r0, #3
 8002196:	f000 f8ef 	bl	8002378 <setPosition>
		waitAllReach();
 800219a:	f000 fa53 	bl	8002644 <waitAllReach>
		moveSpeed = leg_moveSpeed;
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <forward_walk+0x17c>)
 80021a0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80021a4:	601a      	str	r2, [r3, #0]
		setPosition(3, xDefault + xOffset, yStart + 2 * yStep, zUp);
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <forward_walk+0x184>)
 80021a8:	4a11      	ldr	r2, [pc, #68]	; (80021f0 <forward_walk+0x18c>)
 80021aa:	4910      	ldr	r1, [pc, #64]	; (80021ec <forward_walk+0x188>)
 80021ac:	2003      	movs	r0, #3
 80021ae:	f000 f8e3 	bl	8002378 <setPosition>
		waitAllReach();
 80021b2:	f000 fa47 	bl	8002644 <waitAllReach>
		setPosition(3, xDefault + xOffset, yStart, zUp);
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <forward_walk+0x184>)
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	490b      	ldr	r1, [pc, #44]	; (80021ec <forward_walk+0x188>)
 80021be:	2003      	movs	r0, #3
 80021c0:	f000 f8da 	bl	8002378 <setPosition>
		waitAllReach();
 80021c4:	f000 fa3e 	bl	8002644 <waitAllReach>
		setPosition(3, xDefault + xOffset, yStart, zDefault);
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <forward_walk+0x190>)
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	4907      	ldr	r1, [pc, #28]	; (80021ec <forward_walk+0x188>)
 80021d0:	2003      	movs	r0, #3
 80021d2:	f000 f8d1 	bl	8002378 <setPosition>
		waitAllReach();
 80021d6:	f000 fa35 	bl	8002644 <waitAllReach>
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000350 	.word	0x20000350
 80021e4:	20000354 	.word	0x20000354
 80021e8:	c1f00000 	.word	0xc1f00000
 80021ec:	42780000 	.word	0x42780000
 80021f0:	42a00000 	.word	0x42a00000
 80021f4:	c2480000 	.word	0xc2480000
 80021f8:	40400000 	.word	0x40400000
 80021fc:	42200000 	.word	0x42200000

08002200 <servoService>:
  - when set site expected,this function move the end point to it in a straight line
  - tempSpeed[4][3] should be set before set expect site,it make sure the end point
   move in a straight line,and decide move speed.
   ---------------------------------------------------------------------------*/
void servoService(void)
{
 8002200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002202:	b085      	sub	sp, #20
 8002204:	af02      	add	r7, sp, #8
  static float alpha, beta, gamma;

  for (int i = 0; i < 4; i++)
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	e0a0      	b.n	800234e <servoService+0x14e>
  {
    for (int j = 0; j < 3; j++)
 800220c:	2300      	movs	r3, #0
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	e065      	b.n	80022de <servoService+0xde>
    {
      if (abs(actualPos[i][j] - expectedPos[i][j]) >= abs(tempSpeed[i][j]))
 8002212:	4953      	ldr	r1, [pc, #332]	; (8002360 <servoService+0x160>)
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	4413      	add	r3, r2
 8002220:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8002224:	494f      	ldr	r1, [pc, #316]	; (8002364 <servoService+0x164>)
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	4413      	add	r3, r2
 8002232:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002236:	4619      	mov	r1, r3
 8002238:	f7fe fc6a 	bl	8000b10 <__aeabi_fsub>
 800223c:	4603      	mov	r3, r0
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe ff36 	bl	80010b0 <__aeabi_f2iz>
 8002244:	4603      	mov	r3, r0
 8002246:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 800224a:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800224e:	4946      	ldr	r1, [pc, #280]	; (8002368 <servoService+0x168>)
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4413      	add	r3, r2
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	4413      	add	r3, r2
 800225c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe ff25 	bl	80010b0 <__aeabi_f2iz>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	bfb8      	it	lt
 800226c:	425b      	neglt	r3, r3
 800226e:	429c      	cmp	r4, r3
 8002270:	db20      	blt.n	80022b4 <servoService+0xb4>
        actualPos[i][j] += tempSpeed[i][j];
 8002272:	493b      	ldr	r1, [pc, #236]	; (8002360 <servoService+0x160>)
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	4413      	add	r3, r2
 8002280:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8002284:	4938      	ldr	r1, [pc, #224]	; (8002368 <servoService+0x168>)
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	4413      	add	r3, r2
 8002292:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002296:	4619      	mov	r1, r3
 8002298:	f7fe fc3c 	bl	8000b14 <__addsf3>
 800229c:	4603      	mov	r3, r0
 800229e:	4618      	mov	r0, r3
 80022a0:	492f      	ldr	r1, [pc, #188]	; (8002360 <servoService+0x160>)
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	4413      	add	r3, r2
 80022ae:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80022b2:	e011      	b.n	80022d8 <servoService+0xd8>
      else
        actualPos[i][j] = expectedPos[i][j];
 80022b4:	492b      	ldr	r1, [pc, #172]	; (8002364 <servoService+0x164>)
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4413      	add	r3, r2
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80022c6:	4826      	ldr	r0, [pc, #152]	; (8002360 <servoService+0x160>)
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    for (int j = 0; j < 3; j++)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	dd96      	ble.n	8002212 <servoService+0x12>
    }

    cartesian_to_polar(alpha, beta, gamma, actualPos[i][0], actualPos[i][1], actualPos[i][2]);
 80022e4:	4b21      	ldr	r3, [pc, #132]	; (800236c <servoService+0x16c>)
 80022e6:	681c      	ldr	r4, [r3, #0]
 80022e8:	4b21      	ldr	r3, [pc, #132]	; (8002370 <servoService+0x170>)
 80022ea:	681d      	ldr	r5, [r3, #0]
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <servoService+0x174>)
 80022ee:	681e      	ldr	r6, [r3, #0]
 80022f0:	491b      	ldr	r1, [pc, #108]	; (8002360 <servoService+0x160>)
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	f8d3 c000 	ldr.w	ip, [r3]
 8002302:	4917      	ldr	r1, [pc, #92]	; (8002360 <servoService+0x160>)
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	3304      	adds	r3, #4
 8002312:	6819      	ldr	r1, [r3, #0]
 8002314:	4812      	ldr	r0, [pc, #72]	; (8002360 <servoService+0x160>)
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4403      	add	r3, r0
 8002322:	3308      	adds	r3, #8
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	9100      	str	r1, [sp, #0]
 800232a:	4663      	mov	r3, ip
 800232c:	4632      	mov	r2, r6
 800232e:	4629      	mov	r1, r5
 8002330:	4620      	mov	r0, r4
 8002332:	f000 f99d 	bl	8002670 <cartesian_to_polar>
    polar_to_servo(i, alpha, beta, gamma);
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <servoService+0x16c>)
 8002338:	6819      	ldr	r1, [r3, #0]
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <servoService+0x170>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <servoService+0x174>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fb5a 	bl	80029fc <polar_to_servo>
  for (int i = 0; i < 4; i++)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3301      	adds	r3, #1
 800234c:	607b      	str	r3, [r7, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b03      	cmp	r3, #3
 8002352:	f77f af5b 	ble.w	800220c <servoService+0xc>
  }

//  rest_counter++;
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800235e:	bf00      	nop
 8002360:	20000354 	.word	0x20000354
 8002364:	2000027c 	.word	0x2000027c
 8002368:	200002c8 	.word	0x200002c8
 800236c:	20000218 	.word	0x20000218
 8002370:	2000021c 	.word	0x2000021c
 8002374:	20000220 	.word	0x20000220

08002378 <setPosition>:
  - set one of end points' expect site
  - this founction will set tempSpeed[4][3] at same time
  - non - blocking function
   ---------------------------------------------------------------------------*/
void setPosition(int leg, float x, float y, float z)
{
 8002378:	b5b0      	push	{r4, r5, r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	603b      	str	r3, [r7, #0]
  float length_x = 0, length_y = 0, length_z = 0;
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	617b      	str	r3, [r7, #20]

  if (x != KEEP) length_x = x - actualPos[leg][0];
 8002398:	497b      	ldr	r1, [pc, #492]	; (8002588 <setPosition+0x210>)
 800239a:	68b8      	ldr	r0, [r7, #8]
 800239c:	f7fe fe56 	bl	800104c <__aeabi_fcmpeq>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10d      	bne.n	80023c2 <setPosition+0x4a>
 80023a6:	4979      	ldr	r1, [pc, #484]	; (800258c <setPosition+0x214>)
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4619      	mov	r1, r3
 80023b8:	68b8      	ldr	r0, [r7, #8]
 80023ba:	f7fe fba9 	bl	8000b10 <__aeabi_fsub>
 80023be:	4603      	mov	r3, r0
 80023c0:	61fb      	str	r3, [r7, #28]
  if (y != KEEP) length_y = y - actualPos[leg][1];
 80023c2:	4971      	ldr	r1, [pc, #452]	; (8002588 <setPosition+0x210>)
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7fe fe41 	bl	800104c <__aeabi_fcmpeq>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10e      	bne.n	80023ee <setPosition+0x76>
 80023d0:	496e      	ldr	r1, [pc, #440]	; (800258c <setPosition+0x214>)
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	3304      	adds	r3, #4
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4619      	mov	r1, r3
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7fe fb93 	bl	8000b10 <__aeabi_fsub>
 80023ea:	4603      	mov	r3, r0
 80023ec:	61bb      	str	r3, [r7, #24]
  if (z != KEEP) length_z = z - actualPos[leg][2];
 80023ee:	4966      	ldr	r1, [pc, #408]	; (8002588 <setPosition+0x210>)
 80023f0:	6838      	ldr	r0, [r7, #0]
 80023f2:	f7fe fe2b 	bl	800104c <__aeabi_fcmpeq>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10e      	bne.n	800241a <setPosition+0xa2>
 80023fc:	4963      	ldr	r1, [pc, #396]	; (800258c <setPosition+0x214>)
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	3308      	adds	r3, #8
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4619      	mov	r1, r3
 8002410:	6838      	ldr	r0, [r7, #0]
 8002412:	f7fe fb7d 	bl	8000b10 <__aeabi_fsub>
 8002416:	4603      	mov	r3, r0
 8002418:	617b      	str	r3, [r7, #20]

  float length = sqrt(pow(length_x, 2) + pow(length_y, 2) + pow(length_z, 2));
 800241a:	69f8      	ldr	r0, [r7, #28]
 800241c:	f7fd fffc 	bl	8000418 <__aeabi_f2d>
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002428:	f005 f928 	bl	800767c <pow>
 800242c:	4604      	mov	r4, r0
 800242e:	460d      	mov	r5, r1
 8002430:	69b8      	ldr	r0, [r7, #24]
 8002432:	f7fd fff1 	bl	8000418 <__aeabi_f2d>
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800243e:	f005 f91d 	bl	800767c <pow>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4620      	mov	r0, r4
 8002448:	4629      	mov	r1, r5
 800244a:	f7fd fe87 	bl	800015c <__adddf3>
 800244e:	4603      	mov	r3, r0
 8002450:	460c      	mov	r4, r1
 8002452:	4625      	mov	r5, r4
 8002454:	461c      	mov	r4, r3
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7fd ffde 	bl	8000418 <__aeabi_f2d>
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002464:	f005 f90a 	bl	800767c <pow>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4620      	mov	r0, r4
 800246e:	4629      	mov	r1, r5
 8002470:	f7fd fe74 	bl	800015c <__adddf3>
 8002474:	4603      	mov	r3, r0
 8002476:	460c      	mov	r4, r1
 8002478:	4618      	mov	r0, r3
 800247a:	4621      	mov	r1, r4
 800247c:	f005 fa5a 	bl	8007934 <sqrt>
 8002480:	4603      	mov	r3, r0
 8002482:	460c      	mov	r4, r1
 8002484:	4618      	mov	r0, r3
 8002486:	4621      	mov	r1, r4
 8002488:	f7fe faee 	bl	8000a68 <__aeabi_d2f>
 800248c:	4603      	mov	r3, r0
 800248e:	613b      	str	r3, [r7, #16]

  tempSpeed[leg][0] = length_x / length * moveSpeed; //* speed_multiple;
 8002490:	6939      	ldr	r1, [r7, #16]
 8002492:	69f8      	ldr	r0, [r7, #28]
 8002494:	f7fe fcfa 	bl	8000e8c <__aeabi_fdiv>
 8002498:	4603      	mov	r3, r0
 800249a:	461a      	mov	r2, r3
 800249c:	4b3c      	ldr	r3, [pc, #240]	; (8002590 <setPosition+0x218>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	4610      	mov	r0, r2
 80024a4:	f7fe fc3e 	bl	8000d24 <__aeabi_fmul>
 80024a8:	4603      	mov	r3, r0
 80024aa:	4618      	mov	r0, r3
 80024ac:	4939      	ldr	r1, [pc, #228]	; (8002594 <setPosition+0x21c>)
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	6018      	str	r0, [r3, #0]
  tempSpeed[leg][1] = length_y / length * moveSpeed; //* speed_multiple;
 80024bc:	6939      	ldr	r1, [r7, #16]
 80024be:	69b8      	ldr	r0, [r7, #24]
 80024c0:	f7fe fce4 	bl	8000e8c <__aeabi_fdiv>
 80024c4:	4603      	mov	r3, r0
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b31      	ldr	r3, [pc, #196]	; (8002590 <setPosition+0x218>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	4610      	mov	r0, r2
 80024d0:	f7fe fc28 	bl	8000d24 <__aeabi_fmul>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4618      	mov	r0, r3
 80024d8:	492e      	ldr	r1, [pc, #184]	; (8002594 <setPosition+0x21c>)
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4613      	mov	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	3304      	adds	r3, #4
 80024e8:	6018      	str	r0, [r3, #0]
  tempSpeed[leg][2] = length_z / length * moveSpeed; //* speed_multiple;
 80024ea:	6939      	ldr	r1, [r7, #16]
 80024ec:	6978      	ldr	r0, [r7, #20]
 80024ee:	f7fe fccd 	bl	8000e8c <__aeabi_fdiv>
 80024f2:	4603      	mov	r3, r0
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <setPosition+0x218>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4619      	mov	r1, r3
 80024fc:	4610      	mov	r0, r2
 80024fe:	f7fe fc11 	bl	8000d24 <__aeabi_fmul>
 8002502:	4603      	mov	r3, r0
 8002504:	4618      	mov	r0, r3
 8002506:	4923      	ldr	r1, [pc, #140]	; (8002594 <setPosition+0x21c>)
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	3308      	adds	r3, #8
 8002516:	6018      	str	r0, [r3, #0]

  if (x != KEEP) expectedPos[leg][0] = x;
 8002518:	491b      	ldr	r1, [pc, #108]	; (8002588 <setPosition+0x210>)
 800251a:	68b8      	ldr	r0, [r7, #8]
 800251c:	f7fe fd96 	bl	800104c <__aeabi_fcmpeq>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d108      	bne.n	8002538 <setPosition+0x1c0>
 8002526:	491c      	ldr	r1, [pc, #112]	; (8002598 <setPosition+0x220>)
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	601a      	str	r2, [r3, #0]
  if (y != KEEP) expectedPos[leg][1] = y;
 8002538:	4913      	ldr	r1, [pc, #76]	; (8002588 <setPosition+0x210>)
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe fd86 	bl	800104c <__aeabi_fcmpeq>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <setPosition+0x1e2>
 8002546:	4914      	ldr	r1, [pc, #80]	; (8002598 <setPosition+0x220>)
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4613      	mov	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	3304      	adds	r3, #4
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	601a      	str	r2, [r3, #0]
  if (z != KEEP) expectedPos[leg][2] = z;
 800255a:	490b      	ldr	r1, [pc, #44]	; (8002588 <setPosition+0x210>)
 800255c:	6838      	ldr	r0, [r7, #0]
 800255e:	f7fe fd75 	bl	800104c <__aeabi_fcmpeq>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d000      	beq.n	800256a <setPosition+0x1f2>
}
 8002568:	e009      	b.n	800257e <setPosition+0x206>
  if (z != KEEP) expectedPos[leg][2] = z;
 800256a:	490b      	ldr	r1, [pc, #44]	; (8002598 <setPosition+0x220>)
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4613      	mov	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	3308      	adds	r3, #8
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	601a      	str	r2, [r3, #0]
}
 800257e:	bf00      	nop
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bdb0      	pop	{r4, r5, r7, pc}
 8002586:	bf00      	nop
 8002588:	437f0000 	.word	0x437f0000
 800258c:	20000354 	.word	0x20000354
 8002590:	20000350 	.word	0x20000350
 8002594:	200002c8 	.word	0x200002c8
 8002598:	2000027c 	.word	0x2000027c

0800259c <waitReach>:
/*
  - wait one of end points move to expect site
  - blocking function
   ---------------------------------------------------------------------------*/
void waitReach(int leg)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  while (1)
    if (actualPos[leg][0] == expectedPos[leg][0])
 80025a4:	4925      	ldr	r1, [pc, #148]	; (800263c <waitReach+0xa0>)
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	4922      	ldr	r1, [pc, #136]	; (8002640 <waitReach+0xa4>)
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4619      	mov	r1, r3
 80025c6:	f7fe fd41 	bl	800104c <__aeabi_fcmpeq>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0e9      	beq.n	80025a4 <waitReach+0x8>
      if (actualPos[leg][1] == expectedPos[leg][1])
 80025d0:	491a      	ldr	r1, [pc, #104]	; (800263c <waitReach+0xa0>)
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	3304      	adds	r3, #4
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	4917      	ldr	r1, [pc, #92]	; (8002640 <waitReach+0xa4>)
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	3304      	adds	r3, #4
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	f7fe fd29 	bl	800104c <__aeabi_fcmpeq>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d017      	beq.n	8002630 <waitReach+0x94>
        if (actualPos[leg][2] == expectedPos[leg][2])
 8002600:	490e      	ldr	r1, [pc, #56]	; (800263c <waitReach+0xa0>)
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	3308      	adds	r3, #8
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	490b      	ldr	r1, [pc, #44]	; (8002640 <waitReach+0xa4>)
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	3308      	adds	r3, #8
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4619      	mov	r1, r3
 8002626:	f7fe fd11 	bl	800104c <__aeabi_fcmpeq>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d100      	bne.n	8002632 <waitReach+0x96>
    if (actualPos[leg][0] == expectedPos[leg][0])
 8002630:	e7b8      	b.n	80025a4 <waitReach+0x8>
          break;
 8002632:	bf00      	nop
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000354 	.word	0x20000354
 8002640:	2000027c 	.word	0x2000027c

08002644 <waitAllReach>:
/*
  - wait all of end points move to expect site
  - blocking function
   ---------------------------------------------------------------------------*/
void waitAllReach(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
  for (int i = 0; i < 4; i++)
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]
 800264e:	e005      	b.n	800265c <waitAllReach+0x18>
    waitReach(i);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ffa3 	bl	800259c <waitReach>
  for (int i = 0; i < 4; i++)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3301      	adds	r3, #1
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b03      	cmp	r3, #3
 8002660:	ddf6      	ble.n	8002650 <waitAllReach+0xc>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	0000      	movs	r0, r0
 800266c:	0000      	movs	r0, r0
	...

08002670 <cartesian_to_polar>:
/*
  - trans site from cartesian to polar
  - mathematical model 2/2
   ---------------------------------------------------------------------------*/
void cartesian_to_polar(float alpha, float beta, float gamma, volatile float x, volatile float y, volatile float z)
{
 8002670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002674:	b086      	sub	sp, #24
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	603b      	str	r3, [r7, #0]
	//calculate w-z degree
	float v, w;
	w = (x >= 0 ? 1 : -1) * (sqrt(pow(x, 2) + pow(y, 2)));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	f04f 0100 	mov.w	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fcfe 	bl	8001088 <__aeabi_fcmpge>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <cartesian_to_polar+0x2a>
 8002692:	f04f 0400 	mov.w	r4, #0
 8002696:	4dd4      	ldr	r5, [pc, #848]	; (80029e8 <cartesian_to_polar+0x378>)
 8002698:	e002      	b.n	80026a0 <cartesian_to_polar+0x30>
 800269a:	f04f 0400 	mov.w	r4, #0
 800269e:	4dd3      	ldr	r5, [pc, #844]	; (80029ec <cartesian_to_polar+0x37c>)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd feb8 	bl	8000418 <__aeabi_f2d>
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026b0:	f004 ffe4 	bl	800767c <pow>
 80026b4:	4680      	mov	r8, r0
 80026b6:	4689      	mov	r9, r1
 80026b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd feac 	bl	8000418 <__aeabi_f2d>
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026c8:	f004 ffd8 	bl	800767c <pow>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4640      	mov	r0, r8
 80026d2:	4649      	mov	r1, r9
 80026d4:	f7fd fd42 	bl	800015c <__adddf3>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4610      	mov	r0, r2
 80026de:	4619      	mov	r1, r3
 80026e0:	f005 f928 	bl	8007934 <sqrt>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4620      	mov	r0, r4
 80026ea:	4629      	mov	r1, r5
 80026ec:	f7fd feec 	bl	80004c8 <__aeabi_dmul>
 80026f0:	4603      	mov	r3, r0
 80026f2:	460c      	mov	r4, r1
 80026f4:	4618      	mov	r0, r3
 80026f6:	4621      	mov	r1, r4
 80026f8:	f7fe f9b6 	bl	8000a68 <__aeabi_d2f>
 80026fc:	4603      	mov	r3, r0
 80026fe:	617b      	str	r3, [r7, #20]
	v = w - lengthC;
 8002700:	49bb      	ldr	r1, [pc, #748]	; (80029f0 <cartesian_to_polar+0x380>)
 8002702:	6978      	ldr	r0, [r7, #20]
 8002704:	f7fe fa04 	bl	8000b10 <__aeabi_fsub>
 8002708:	4603      	mov	r3, r0
 800270a:	613b      	str	r3, [r7, #16]
	alpha = atan2(z, v) + acos((pow(lengthA, 2) - pow(lengthB, 2) + pow(v, 2) + pow(z, 2)) / 2 / lengthA / sqrt(pow(v, 2) + pow(z, 2)));
 800270c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd fe82 	bl	8000418 <__aeabi_f2d>
 8002714:	4604      	mov	r4, r0
 8002716:	460d      	mov	r5, r1
 8002718:	6938      	ldr	r0, [r7, #16]
 800271a:	f7fd fe7d 	bl	8000418 <__aeabi_f2d>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4620      	mov	r0, r4
 8002724:	4629      	mov	r1, r5
 8002726:	f004 ffa7 	bl	8007678 <atan2>
 800272a:	4604      	mov	r4, r0
 800272c:	460d      	mov	r5, r1
 800272e:	6938      	ldr	r0, [r7, #16]
 8002730:	f7fd fe72 	bl	8000418 <__aeabi_f2d>
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800273c:	f004 ff9e 	bl	800767c <pow>
 8002740:	a3a1      	add	r3, pc, #644	; (adr r3, 80029c8 <cartesian_to_polar+0x358>)
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	f7fd fd07 	bl	8000158 <__aeabi_dsub>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4690      	mov	r8, r2
 8002750:	4699      	mov	r9, r3
 8002752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002754:	4618      	mov	r0, r3
 8002756:	f7fd fe5f 	bl	8000418 <__aeabi_f2d>
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002762:	f004 ff8b 	bl	800767c <pow>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4640      	mov	r0, r8
 800276c:	4649      	mov	r1, r9
 800276e:	f7fd fcf5 	bl	800015c <__adddf3>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002782:	f7fd ffcb 	bl	800071c <__aeabi_ddiv>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	4b98      	ldr	r3, [pc, #608]	; (80029f4 <cartesian_to_polar+0x384>)
 8002794:	f7fd ffc2 	bl	800071c <__aeabi_ddiv>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4690      	mov	r8, r2
 800279e:	4699      	mov	r9, r3
 80027a0:	6938      	ldr	r0, [r7, #16]
 80027a2:	f7fd fe39 	bl	8000418 <__aeabi_f2d>
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027ae:	f004 ff65 	bl	800767c <pow>
 80027b2:	4682      	mov	sl, r0
 80027b4:	468b      	mov	fp, r1
 80027b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd fe2d 	bl	8000418 <__aeabi_f2d>
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027c6:	f004 ff59 	bl	800767c <pow>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4650      	mov	r0, sl
 80027d0:	4659      	mov	r1, fp
 80027d2:	f7fd fcc3 	bl	800015c <__adddf3>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	4610      	mov	r0, r2
 80027dc:	4619      	mov	r1, r3
 80027de:	f005 f8a9 	bl	8007934 <sqrt>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4640      	mov	r0, r8
 80027e8:	4649      	mov	r1, r9
 80027ea:	f7fd ff97 	bl	800071c <__aeabi_ddiv>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4610      	mov	r0, r2
 80027f4:	4619      	mov	r1, r3
 80027f6:	f004 feeb 	bl	80075d0 <acos>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4620      	mov	r0, r4
 8002800:	4629      	mov	r1, r5
 8002802:	f7fd fcab 	bl	800015c <__adddf3>
 8002806:	4603      	mov	r3, r0
 8002808:	460c      	mov	r4, r1
 800280a:	4618      	mov	r0, r3
 800280c:	4621      	mov	r1, r4
 800280e:	f7fe f92b 	bl	8000a68 <__aeabi_d2f>
 8002812:	4603      	mov	r3, r0
 8002814:	60fb      	str	r3, [r7, #12]
	beta = acos((pow(lengthA, 2) + pow(lengthB, 2) - pow(v, 2) - pow(z, 2)) / 2 / lengthA / lengthB);
 8002816:	6938      	ldr	r0, [r7, #16]
 8002818:	f7fd fdfe 	bl	8000418 <__aeabi_f2d>
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002824:	f004 ff2a 	bl	800767c <pow>
 8002828:	4603      	mov	r3, r0
 800282a:	460c      	mov	r4, r1
 800282c:	461a      	mov	r2, r3
 800282e:	4623      	mov	r3, r4
 8002830:	a167      	add	r1, pc, #412	; (adr r1, 80029d0 <cartesian_to_polar+0x360>)
 8002832:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002836:	f7fd fc8f 	bl	8000158 <__aeabi_dsub>
 800283a:	4603      	mov	r3, r0
 800283c:	460c      	mov	r4, r1
 800283e:	4625      	mov	r5, r4
 8002840:	461c      	mov	r4, r3
 8002842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002844:	4618      	mov	r0, r3
 8002846:	f7fd fde7 	bl	8000418 <__aeabi_f2d>
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002852:	f004 ff13 	bl	800767c <pow>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4620      	mov	r0, r4
 800285c:	4629      	mov	r1, r5
 800285e:	f7fd fc7b 	bl	8000158 <__aeabi_dsub>
 8002862:	4603      	mov	r3, r0
 8002864:	460c      	mov	r4, r1
 8002866:	4618      	mov	r0, r3
 8002868:	4621      	mov	r1, r4
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002872:	f7fd ff53 	bl	800071c <__aeabi_ddiv>
 8002876:	4603      	mov	r3, r0
 8002878:	460c      	mov	r4, r1
 800287a:	4618      	mov	r0, r3
 800287c:	4621      	mov	r1, r4
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	4b5c      	ldr	r3, [pc, #368]	; (80029f4 <cartesian_to_polar+0x384>)
 8002884:	f7fd ff4a 	bl	800071c <__aeabi_ddiv>
 8002888:	4603      	mov	r3, r0
 800288a:	460c      	mov	r4, r1
 800288c:	4618      	mov	r0, r3
 800288e:	4621      	mov	r1, r4
 8002890:	a351      	add	r3, pc, #324	; (adr r3, 80029d8 <cartesian_to_polar+0x368>)
 8002892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002896:	f7fd ff41 	bl	800071c <__aeabi_ddiv>
 800289a:	4603      	mov	r3, r0
 800289c:	460c      	mov	r4, r1
 800289e:	4618      	mov	r0, r3
 80028a0:	4621      	mov	r1, r4
 80028a2:	f004 fe95 	bl	80075d0 <acos>
 80028a6:	4603      	mov	r3, r0
 80028a8:	460c      	mov	r4, r1
 80028aa:	4618      	mov	r0, r3
 80028ac:	4621      	mov	r1, r4
 80028ae:	f7fe f8db 	bl	8000a68 <__aeabi_d2f>
 80028b2:	4603      	mov	r3, r0
 80028b4:	60bb      	str	r3, [r7, #8]
	//calculate x-y-z degree
	gamma = (w >= 0) ? atan2(y, x) : atan2(-y, -x);
 80028b6:	f04f 0100 	mov.w	r1, #0
 80028ba:	6978      	ldr	r0, [r7, #20]
 80028bc:	f7fe fbe4 	bl	8001088 <__aeabi_fcmpge>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d012      	beq.n	80028ec <cartesian_to_polar+0x27c>
 80028c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fd fda5 	bl	8000418 <__aeabi_f2d>
 80028ce:	4604      	mov	r4, r0
 80028d0:	460d      	mov	r5, r1
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fd fd9f 	bl	8000418 <__aeabi_f2d>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4620      	mov	r0, r4
 80028e0:	4629      	mov	r1, r5
 80028e2:	f004 fec9 	bl	8007678 <atan2>
 80028e6:	4603      	mov	r3, r0
 80028e8:	460c      	mov	r4, r1
 80028ea:	e015      	b.n	8002918 <cartesian_to_polar+0x2a8>
 80028ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fd90 	bl	8000418 <__aeabi_f2d>
 80028f8:	4604      	mov	r4, r0
 80028fa:	460d      	mov	r5, r1
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002902:	4618      	mov	r0, r3
 8002904:	f7fd fd88 	bl	8000418 <__aeabi_f2d>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4620      	mov	r0, r4
 800290e:	4629      	mov	r1, r5
 8002910:	f004 feb2 	bl	8007678 <atan2>
 8002914:	4603      	mov	r3, r0
 8002916:	460c      	mov	r4, r1
 8002918:	4618      	mov	r0, r3
 800291a:	4621      	mov	r1, r4
 800291c:	f7fe f8a4 	bl	8000a68 <__aeabi_d2f>
 8002920:	4603      	mov	r3, r0
 8002922:	607b      	str	r3, [r7, #4]
	//trans degree PI->180
	alpha = alpha / PI * 180;
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f7fd fd77 	bl	8000418 <__aeabi_f2d>
 800292a:	a32d      	add	r3, pc, #180	; (adr r3, 80029e0 <cartesian_to_polar+0x370>)
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	f7fd fef4 	bl	800071c <__aeabi_ddiv>
 8002934:	4603      	mov	r3, r0
 8002936:	460c      	mov	r4, r1
 8002938:	4618      	mov	r0, r3
 800293a:	4621      	mov	r1, r4
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	4b2d      	ldr	r3, [pc, #180]	; (80029f8 <cartesian_to_polar+0x388>)
 8002942:	f7fd fdc1 	bl	80004c8 <__aeabi_dmul>
 8002946:	4603      	mov	r3, r0
 8002948:	460c      	mov	r4, r1
 800294a:	4618      	mov	r0, r3
 800294c:	4621      	mov	r1, r4
 800294e:	f7fe f88b 	bl	8000a68 <__aeabi_d2f>
 8002952:	4603      	mov	r3, r0
 8002954:	60fb      	str	r3, [r7, #12]
	beta = beta / PI * 180;
 8002956:	68b8      	ldr	r0, [r7, #8]
 8002958:	f7fd fd5e 	bl	8000418 <__aeabi_f2d>
 800295c:	a320      	add	r3, pc, #128	; (adr r3, 80029e0 <cartesian_to_polar+0x370>)
 800295e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002962:	f7fd fedb 	bl	800071c <__aeabi_ddiv>
 8002966:	4603      	mov	r3, r0
 8002968:	460c      	mov	r4, r1
 800296a:	4618      	mov	r0, r3
 800296c:	4621      	mov	r1, r4
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <cartesian_to_polar+0x388>)
 8002974:	f7fd fda8 	bl	80004c8 <__aeabi_dmul>
 8002978:	4603      	mov	r3, r0
 800297a:	460c      	mov	r4, r1
 800297c:	4618      	mov	r0, r3
 800297e:	4621      	mov	r1, r4
 8002980:	f7fe f872 	bl	8000a68 <__aeabi_d2f>
 8002984:	4603      	mov	r3, r0
 8002986:	60bb      	str	r3, [r7, #8]
	gamma = gamma / PI * 180;
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7fd fd45 	bl	8000418 <__aeabi_f2d>
 800298e:	a314      	add	r3, pc, #80	; (adr r3, 80029e0 <cartesian_to_polar+0x370>)
 8002990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002994:	f7fd fec2 	bl	800071c <__aeabi_ddiv>
 8002998:	4603      	mov	r3, r0
 800299a:	460c      	mov	r4, r1
 800299c:	4618      	mov	r0, r3
 800299e:	4621      	mov	r1, r4
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <cartesian_to_polar+0x388>)
 80029a6:	f7fd fd8f 	bl	80004c8 <__aeabi_dmul>
 80029aa:	4603      	mov	r3, r0
 80029ac:	460c      	mov	r4, r1
 80029ae:	4618      	mov	r0, r3
 80029b0:	4621      	mov	r1, r4
 80029b2:	f7fe f859 	bl	8000a68 <__aeabi_d2f>
 80029b6:	4603      	mov	r3, r0
 80029b8:	607b      	str	r3, [r7, #4]
}
 80029ba:	bf00      	nop
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029c4:	f3af 8000 	nop.w
 80029c8:	00000000 	.word	0x00000000
 80029cc:	40a74a80 	.word	0x40a74a80
 80029d0:	00000000 	.word	0x00000000
 80029d4:	40c1a3a0 	.word	0x40c1a3a0
 80029d8:	00000000 	.word	0x00000000
 80029dc:	40536000 	.word	0x40536000
 80029e0:	4d12d84a 	.word	0x4d12d84a
 80029e4:	400921fb 	.word	0x400921fb
 80029e8:	3ff00000 	.word	0x3ff00000
 80029ec:	bff00000 	.word	0xbff00000
 80029f0:	41dc0000 	.word	0x41dc0000
 80029f4:	404b8000 	.word	0x404b8000
 80029f8:	40668000 	.word	0x40668000

080029fc <polar_to_servo>:
  - trans site from polar to microservos
  - mathematical model map to fact
  - the errors saved in eeprom will be add
   ---------------------------------------------------------------------------*/
void polar_to_servo(int leg, float alpha, float beta, float gamma)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
	uint8_t bottomServo = (leg * 3) - 3;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	0052      	lsls	r2, r2, #1
 8002a14:	4413      	add	r3, r2
 8002a16:	75fb      	strb	r3, [r7, #23]
	uint8_t middleServo = (leg * 3) - 2;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	0052      	lsls	r2, r2, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	3b02      	subs	r3, #2
 8002a26:	75bb      	strb	r3, [r7, #22]
	uint8_t topServo = (leg * 3) - 1;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	0052      	lsls	r2, r2, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	757b      	strb	r3, [r7, #21]
	if (leg == 0)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10c      	bne.n	8002a58 <polar_to_servo+0x5c>
	{
	alpha = 90 - alpha;
 8002a3e:	68b9      	ldr	r1, [r7, #8]
 8002a40:	4834      	ldr	r0, [pc, #208]	; (8002b14 <polar_to_servo+0x118>)
 8002a42:	f7fe f865 	bl	8000b10 <__aeabi_fsub>
 8002a46:	4603      	mov	r3, r0
 8002a48:	60bb      	str	r3, [r7, #8]
	beta = beta;
	gamma += 90;
 8002a4a:	4932      	ldr	r1, [pc, #200]	; (8002b14 <polar_to_servo+0x118>)
 8002a4c:	6838      	ldr	r0, [r7, #0]
 8002a4e:	f7fe f861 	bl	8000b14 <__addsf3>
 8002a52:	4603      	mov	r3, r0
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	e03a      	b.n	8002ace <polar_to_servo+0xd2>
	}
	else if (leg == 1)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d112      	bne.n	8002a84 <polar_to_servo+0x88>
	{
	alpha += 90;
 8002a5e:	492d      	ldr	r1, [pc, #180]	; (8002b14 <polar_to_servo+0x118>)
 8002a60:	68b8      	ldr	r0, [r7, #8]
 8002a62:	f7fe f857 	bl	8000b14 <__addsf3>
 8002a66:	4603      	mov	r3, r0
 8002a68:	60bb      	str	r3, [r7, #8]
	beta = 180 - beta;
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	482a      	ldr	r0, [pc, #168]	; (8002b18 <polar_to_servo+0x11c>)
 8002a6e:	f7fe f84f 	bl	8000b10 <__aeabi_fsub>
 8002a72:	4603      	mov	r3, r0
 8002a74:	607b      	str	r3, [r7, #4]
	gamma = 90 - gamma;
 8002a76:	6839      	ldr	r1, [r7, #0]
 8002a78:	4826      	ldr	r0, [pc, #152]	; (8002b14 <polar_to_servo+0x118>)
 8002a7a:	f7fe f849 	bl	8000b10 <__aeabi_fsub>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	603b      	str	r3, [r7, #0]
 8002a82:	e024      	b.n	8002ace <polar_to_servo+0xd2>
	}
	else if (leg == 2)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d112      	bne.n	8002ab0 <polar_to_servo+0xb4>
	{
	alpha += 90;
 8002a8a:	4922      	ldr	r1, [pc, #136]	; (8002b14 <polar_to_servo+0x118>)
 8002a8c:	68b8      	ldr	r0, [r7, #8]
 8002a8e:	f7fe f841 	bl	8000b14 <__addsf3>
 8002a92:	4603      	mov	r3, r0
 8002a94:	60bb      	str	r3, [r7, #8]
	beta = 180 - beta;
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	481f      	ldr	r0, [pc, #124]	; (8002b18 <polar_to_servo+0x11c>)
 8002a9a:	f7fe f839 	bl	8000b10 <__aeabi_fsub>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	607b      	str	r3, [r7, #4]
	gamma = 90 - gamma;
 8002aa2:	6839      	ldr	r1, [r7, #0]
 8002aa4:	481b      	ldr	r0, [pc, #108]	; (8002b14 <polar_to_servo+0x118>)
 8002aa6:	f7fe f833 	bl	8000b10 <__aeabi_fsub>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	603b      	str	r3, [r7, #0]
 8002aae:	e00e      	b.n	8002ace <polar_to_servo+0xd2>
	}
	else if (leg == 3)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d10b      	bne.n	8002ace <polar_to_servo+0xd2>
	{
	alpha = 90 - alpha;
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	4816      	ldr	r0, [pc, #88]	; (8002b14 <polar_to_servo+0x118>)
 8002aba:	f7fe f829 	bl	8000b10 <__aeabi_fsub>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	60bb      	str	r3, [r7, #8]
	beta = beta;
	gamma += 90;
 8002ac2:	4914      	ldr	r1, [pc, #80]	; (8002b14 <polar_to_servo+0x118>)
 8002ac4:	6838      	ldr	r0, [r7, #0]
 8002ac6:	f7fe f825 	bl	8000b14 <__addsf3>
 8002aca:	4603      	mov	r3, r0
 8002acc:	603b      	str	r3, [r7, #0]
}

//  servo[leg][0].write(alpha);
//  servo[leg][1].write(beta);
//  servo[leg][2].write(gamma);
	PCA9685_SetServoAngle(bottomServo, alpha, 0);
 8002ace:	68b8      	ldr	r0, [r7, #8]
 8002ad0:	f7fe fb14 	bl	80010fc <__aeabi_f2uiz>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	b299      	uxth	r1, r3
 8002ad8:	7dfb      	ldrb	r3, [r7, #23]
 8002ada:	2200      	movs	r2, #0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff f8af 	bl	8001c40 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(middleServo, beta, 0);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe fb0a 	bl	80010fc <__aeabi_f2uiz>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	b299      	uxth	r1, r3
 8002aec:	7dbb      	ldrb	r3, [r7, #22]
 8002aee:	2200      	movs	r2, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff f8a5 	bl	8001c40 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(topServo, gamma, 0);
 8002af6:	6838      	ldr	r0, [r7, #0]
 8002af8:	f7fe fb00 	bl	80010fc <__aeabi_f2uiz>
 8002afc:	4603      	mov	r3, r0
 8002afe:	b299      	uxth	r1, r3
 8002b00:	7d7b      	ldrb	r3, [r7, #21]
 8002b02:	2200      	movs	r2, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff f89b 	bl	8001c40 <PCA9685_SetServoAngle>
}
 8002b0a:	bf00      	nop
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	42b40000 	.word	0x42b40000
 8002b18:	43340000 	.word	0x43340000

08002b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b22:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <HAL_MspInit+0x5c>)
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <HAL_MspInit+0x5c>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6193      	str	r3, [r2, #24]
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_MspInit+0x5c>)
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <HAL_MspInit+0x5c>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4a0e      	ldr	r2, [pc, #56]	; (8002b78 <HAL_MspInit+0x5c>)
 8002b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b44:	61d3      	str	r3, [r2, #28]
 8002b46:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <HAL_MspInit+0x5c>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	607b      	str	r3, [r7, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <HAL_MspInit+0x60>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <HAL_MspInit+0x60>)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40010000 	.word	0x40010000

08002b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b90:	e7fe      	b.n	8002b90 <HardFault_Handler+0x4>

08002b92 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b92:	b480      	push	{r7}
 8002b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b96:	e7fe      	b.n	8002b96 <MemManage_Handler+0x4>

08002b98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b9c:	e7fe      	b.n	8002b9c <BusFault_Handler+0x4>

08002b9e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba2:	e7fe      	b.n	8002ba2 <UsageFault_Handler+0x4>

08002ba4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bcc:	f000 fa84 	bl	80030d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
//	UARTDMA_DMA_IRQHandler(&huartdma);
//	return;
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <DMA1_Channel5_IRQHandler+0x10>)
 8002bda:	f000 fcd7 	bl	800358c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000440 	.word	0x20000440

08002be8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <TIM2_IRQHandler+0x10>)
 8002bee:	f003 f947 	bl	8005e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200003f8 	.word	0x200003f8

08002bfc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <TIM3_IRQHandler+0x10>)
 8002c02:	f003 f93d 	bl	8005e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200003b0 	.word	0x200003b0

08002c10 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <I2C1_ER_IRQHandler+0x10>)
 8002c16:	f001 fd23 	bl	8004660 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000224 	.word	0x20000224

08002c24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
//	UARTDMA_UART_IRQHandler(&huartdma);
//	return;
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c28:	4802      	ldr	r0, [pc, #8]	; (8002c34 <USART1_IRQHandler+0x10>)
 8002c2a:	f003 ffb5 	bl	8006b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000484 	.word	0x20000484

08002c38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002c3c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c40:	f000 ff64 	bl	8003b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c44:	bf00      	nop
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08e      	sub	sp, #56	; 0x38
 8002c58:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c68:	f107 0320 	add.w	r3, r7, #32
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
 8002c80:	615a      	str	r2, [r3, #20]
 8002c82:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002c84:	4b2c      	ldr	r3, [pc, #176]	; (8002d38 <MX_TIM2_Init+0xe4>)
 8002c86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4799;
 8002c8c:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <MX_TIM2_Init+0xe4>)
 8002c8e:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8002c92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c94:	4b28      	ldr	r3, [pc, #160]	; (8002d38 <MX_TIM2_Init+0xe4>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8002c9a:	4b27      	ldr	r3, [pc, #156]	; (8002d38 <MX_TIM2_Init+0xe4>)
 8002c9c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002ca0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca2:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <MX_TIM2_Init+0xe4>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca8:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <MX_TIM2_Init+0xe4>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cae:	4822      	ldr	r0, [pc, #136]	; (8002d38 <MX_TIM2_Init+0xe4>)
 8002cb0:	f002 ffec 	bl	8005c8c <HAL_TIM_Base_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002cba:	f7fe fe03 	bl	80018c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cc8:	4619      	mov	r1, r3
 8002cca:	481b      	ldr	r0, [pc, #108]	; (8002d38 <MX_TIM2_Init+0xe4>)
 8002ccc:	f003 fa38 	bl	8006140 <HAL_TIM_ConfigClockSource>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002cd6:	f7fe fdf5 	bl	80018c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002cda:	4817      	ldr	r0, [pc, #92]	; (8002d38 <MX_TIM2_Init+0xe4>)
 8002cdc:	f003 f878 	bl	8005dd0 <HAL_TIM_OC_Init>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002ce6:	f7fe fded 	bl	80018c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cf2:	f107 0320 	add.w	r3, r7, #32
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	480f      	ldr	r0, [pc, #60]	; (8002d38 <MX_TIM2_Init+0xe4>)
 8002cfa:	f003 fd7d 	bl	80067f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002d04:	f7fe fdde 	bl	80018c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d18:	1d3b      	adds	r3, r7, #4
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4806      	ldr	r0, [pc, #24]	; (8002d38 <MX_TIM2_Init+0xe4>)
 8002d20:	f003 f9b6 	bl	8006090 <HAL_TIM_OC_ConfigChannel>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002d2a:	f7fe fdcb 	bl	80018c4 <Error_Handler>
  }

}
 8002d2e:	bf00      	nop
 8002d30:	3738      	adds	r7, #56	; 0x38
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200003f8 	.word	0x200003f8

08002d3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08e      	sub	sp, #56	; 0x38
 8002d40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	605a      	str	r2, [r3, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
 8002d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d50:	f107 0320 	add.w	r3, r7, #32
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d5a:	1d3b      	adds	r3, r7, #4
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	611a      	str	r2, [r3, #16]
 8002d68:	615a      	str	r2, [r3, #20]
 8002d6a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002d6c:	4b2b      	ldr	r3, [pc, #172]	; (8002e1c <MX_TIM3_Init+0xe0>)
 8002d6e:	4a2c      	ldr	r2, [pc, #176]	; (8002e20 <MX_TIM3_Init+0xe4>)
 8002d70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 8002d72:	4b2a      	ldr	r3, [pc, #168]	; (8002e1c <MX_TIM3_Init+0xe0>)
 8002d74:	f242 527f 	movw	r2, #9599	; 0x257f
 8002d78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7a:	4b28      	ldr	r3, [pc, #160]	; (8002e1c <MX_TIM3_Init+0xe0>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8002d80:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <MX_TIM3_Init+0xe0>)
 8002d82:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d88:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <MX_TIM3_Init+0xe0>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d8e:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <MX_TIM3_Init+0xe0>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d94:	4821      	ldr	r0, [pc, #132]	; (8002e1c <MX_TIM3_Init+0xe0>)
 8002d96:	f002 ff79 	bl	8005c8c <HAL_TIM_Base_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002da0:	f7fe fd90 	bl	80018c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dae:	4619      	mov	r1, r3
 8002db0:	481a      	ldr	r0, [pc, #104]	; (8002e1c <MX_TIM3_Init+0xe0>)
 8002db2:	f003 f9c5 	bl	8006140 <HAL_TIM_ConfigClockSource>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002dbc:	f7fe fd82 	bl	80018c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002dc0:	4816      	ldr	r0, [pc, #88]	; (8002e1c <MX_TIM3_Init+0xe0>)
 8002dc2:	f003 f805 	bl	8005dd0 <HAL_TIM_OC_Init>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002dcc:	f7fe fd7a 	bl	80018c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dd8:	f107 0320 	add.w	r3, r7, #32
 8002ddc:	4619      	mov	r1, r3
 8002dde:	480f      	ldr	r0, [pc, #60]	; (8002e1c <MX_TIM3_Init+0xe0>)
 8002de0:	f003 fd0a 	bl	80067f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002dea:	f7fe fd6b 	bl	80018c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002dee:	2300      	movs	r3, #0
 8002df0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dfe:	1d3b      	adds	r3, r7, #4
 8002e00:	2200      	movs	r2, #0
 8002e02:	4619      	mov	r1, r3
 8002e04:	4805      	ldr	r0, [pc, #20]	; (8002e1c <MX_TIM3_Init+0xe0>)
 8002e06:	f003 f943 	bl	8006090 <HAL_TIM_OC_ConfigChannel>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002e10:	f7fe fd58 	bl	80018c4 <Error_Handler>
  }

}
 8002e14:	bf00      	nop
 8002e16:	3738      	adds	r7, #56	; 0x38
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	200003b0 	.word	0x200003b0
 8002e20:	40000400 	.word	0x40000400

08002e24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e34:	d114      	bne.n	8002e60 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e36:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_TIM_Base_MspInit+0x78>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <HAL_TIM_Base_MspInit+0x78>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	61d3      	str	r3, [r2, #28]
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <HAL_TIM_Base_MspInit+0x78>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2100      	movs	r1, #0
 8002e52:	201c      	movs	r0, #28
 8002e54:	f000 fa33 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e58:	201c      	movs	r0, #28
 8002e5a:	f000 fa4c 	bl	80032f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002e5e:	e018      	b.n	8002e92 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <HAL_TIM_Base_MspInit+0x7c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d113      	bne.n	8002e92 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_TIM_Base_MspInit+0x78>)
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4a0b      	ldr	r2, [pc, #44]	; (8002e9c <HAL_TIM_Base_MspInit+0x78>)
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	61d3      	str	r3, [r2, #28]
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_TIM_Base_MspInit+0x78>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e82:	2200      	movs	r2, #0
 8002e84:	2100      	movs	r1, #0
 8002e86:	201d      	movs	r0, #29
 8002e88:	f000 fa19 	bl	80032be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e8c:	201d      	movs	r0, #29
 8002e8e:	f000 fa32 	bl	80032f6 <HAL_NVIC_EnableIRQ>
}
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40000400 	.word	0x40000400

08002ea4 <resetTimer>:
  }
}

/* USER CODE BEGIN 1 */
void resetTimer(TIM_HandleTypeDef* htim)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
	htim->Instance->CNT = 0;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
	...

08002ec0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <MX_USART1_UART_Init+0x4c>)
 8002ec6:	4a12      	ldr	r2, [pc, #72]	; (8002f10 <MX_USART1_UART_Init+0x50>)
 8002ec8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <MX_USART1_UART_Init+0x4c>)
 8002ecc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ed0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <MX_USART1_UART_Init+0x4c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <MX_USART1_UART_Init+0x4c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <MX_USART1_UART_Init+0x4c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <MX_USART1_UART_Init+0x4c>)
 8002ee6:	220c      	movs	r2, #12
 8002ee8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <MX_USART1_UART_Init+0x4c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <MX_USART1_UART_Init+0x4c>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ef6:	4805      	ldr	r0, [pc, #20]	; (8002f0c <MX_USART1_UART_Init+0x4c>)
 8002ef8:	f003 fcee 	bl	80068d8 <HAL_UART_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f02:	f7fe fcdf 	bl	80018c4 <Error_Handler>
  }

}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000484 	.word	0x20000484
 8002f10:	40013800 	.word	0x40013800

08002f14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1c:	f107 0310 	add.w	r3, r7, #16
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a2f      	ldr	r2, [pc, #188]	; (8002fec <HAL_UART_MspInit+0xd8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d157      	bne.n	8002fe4 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f34:	4b2e      	ldr	r3, [pc, #184]	; (8002ff0 <HAL_UART_MspInit+0xdc>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	4a2d      	ldr	r2, [pc, #180]	; (8002ff0 <HAL_UART_MspInit+0xdc>)
 8002f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f3e:	6193      	str	r3, [r2, #24]
 8002f40:	4b2b      	ldr	r3, [pc, #172]	; (8002ff0 <HAL_UART_MspInit+0xdc>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4c:	4b28      	ldr	r3, [pc, #160]	; (8002ff0 <HAL_UART_MspInit+0xdc>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	4a27      	ldr	r2, [pc, #156]	; (8002ff0 <HAL_UART_MspInit+0xdc>)
 8002f52:	f043 0304 	orr.w	r3, r3, #4
 8002f56:	6193      	str	r3, [r2, #24]
 8002f58:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <HAL_UART_MspInit+0xdc>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f72:	f107 0310 	add.w	r3, r7, #16
 8002f76:	4619      	mov	r1, r3
 8002f78:	481e      	ldr	r0, [pc, #120]	; (8002ff4 <HAL_UART_MspInit+0xe0>)
 8002f7a:	f000 fc3b 	bl	80037f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8c:	f107 0310 	add.w	r3, r7, #16
 8002f90:	4619      	mov	r1, r3
 8002f92:	4818      	ldr	r0, [pc, #96]	; (8002ff4 <HAL_UART_MspInit+0xe0>)
 8002f94:	f000 fc2e 	bl	80037f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002f98:	4b17      	ldr	r3, [pc, #92]	; (8002ff8 <HAL_UART_MspInit+0xe4>)
 8002f9a:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <HAL_UART_MspInit+0xe8>)
 8002f9c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f9e:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <HAL_UART_MspInit+0xe4>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fa4:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <HAL_UART_MspInit+0xe4>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002faa:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <HAL_UART_MspInit+0xe4>)
 8002fac:	2280      	movs	r2, #128	; 0x80
 8002fae:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fb0:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <HAL_UART_MspInit+0xe4>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <HAL_UART_MspInit+0xe4>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002fbc:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <HAL_UART_MspInit+0xe4>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <HAL_UART_MspInit+0xe4>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002fc8:	480b      	ldr	r0, [pc, #44]	; (8002ff8 <HAL_UART_MspInit+0xe4>)
 8002fca:	f000 f9af 	bl	800332c <HAL_DMA_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002fd4:	f7fe fc76 	bl	80018c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a07      	ldr	r2, [pc, #28]	; (8002ff8 <HAL_UART_MspInit+0xe4>)
 8002fdc:	635a      	str	r2, [r3, #52]	; 0x34
 8002fde:	4a06      	ldr	r2, [pc, #24]	; (8002ff8 <HAL_UART_MspInit+0xe4>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3720      	adds	r7, #32
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40013800 	.word	0x40013800
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40010800 	.word	0x40010800
 8002ff8:	20000440 	.word	0x20000440
 8002ffc:	40020058 	.word	0x40020058

08003000 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003000:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003002:	e003      	b.n	800300c <LoopCopyDataInit>

08003004 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003006:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003008:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800300a:	3104      	adds	r1, #4

0800300c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800300c:	480a      	ldr	r0, [pc, #40]	; (8003038 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003010:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003012:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003014:	d3f6      	bcc.n	8003004 <CopyDataInit>
  ldr r2, =_sbss
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003018:	e002      	b.n	8003020 <LoopFillZerobss>

0800301a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800301a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800301c:	f842 3b04 	str.w	r3, [r2], #4

08003020 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003022:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003024:	d3f9      	bcc.n	800301a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003026:	f7ff fe0f 	bl	8002c48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800302a:	f004 f96b 	bl	8007304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800302e:	f7fe f97f 	bl	8001330 <main>
  bx lr
 8003032:	4770      	bx	lr
  ldr r3, =_sidata
 8003034:	080092f8 	.word	0x080092f8
  ldr r0, =_sdata
 8003038:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800303c:	200001f8 	.word	0x200001f8
  ldr r2, =_sbss
 8003040:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8003044:	200004c8 	.word	0x200004c8

08003048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003048:	e7fe      	b.n	8003048 <ADC1_2_IRQHandler>
	...

0800304c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <HAL_Init+0x28>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a07      	ldr	r2, [pc, #28]	; (8003074 <HAL_Init+0x28>)
 8003056:	f043 0310 	orr.w	r3, r3, #16
 800305a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800305c:	2003      	movs	r0, #3
 800305e:	f000 f923 	bl	80032a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003062:	2000      	movs	r0, #0
 8003064:	f000 f808 	bl	8003078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003068:	f7ff fd58 	bl	8002b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40022000 	.word	0x40022000

08003078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_InitTick+0x54>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_InitTick+0x58>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	4619      	mov	r1, r3
 800308a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800308e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f93b 	bl	8003312 <HAL_SYSTICK_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e00e      	b.n	80030c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b0f      	cmp	r3, #15
 80030aa:	d80a      	bhi.n	80030c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ac:	2200      	movs	r2, #0
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030b4:	f000 f903 	bl	80032be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030b8:	4a06      	ldr	r2, [pc, #24]	; (80030d4 <HAL_InitTick+0x5c>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	e000      	b.n	80030c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000018 	.word	0x20000018
 80030d0:	20000020 	.word	0x20000020
 80030d4:	2000001c 	.word	0x2000001c

080030d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030dc:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_IncTick+0x1c>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_IncTick+0x20>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	4a03      	ldr	r2, [pc, #12]	; (80030f8 <HAL_IncTick+0x20>)
 80030ea:	6013      	str	r3, [r2, #0]
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	20000020 	.word	0x20000020
 80030f8:	200004c4 	.word	0x200004c4

080030fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003100:	4b02      	ldr	r3, [pc, #8]	; (800310c <HAL_GetTick+0x10>)
 8003102:	681b      	ldr	r3, [r3, #0]
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	200004c4 	.word	0x200004c4

08003110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <__NVIC_SetPriorityGrouping+0x44>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800312c:	4013      	ands	r3, r2
 800312e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800313c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003142:	4a04      	ldr	r2, [pc, #16]	; (8003154 <__NVIC_SetPriorityGrouping+0x44>)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	60d3      	str	r3, [r2, #12]
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <__NVIC_GetPriorityGrouping+0x18>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	0a1b      	lsrs	r3, r3, #8
 8003162:	f003 0307 	and.w	r3, r3, #7
}
 8003166:	4618      	mov	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	2b00      	cmp	r3, #0
 8003184:	db0b      	blt.n	800319e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	f003 021f 	and.w	r2, r3, #31
 800318c:	4906      	ldr	r1, [pc, #24]	; (80031a8 <__NVIC_EnableIRQ+0x34>)
 800318e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	2001      	movs	r0, #1
 8003196:	fa00 f202 	lsl.w	r2, r0, r2
 800319a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr
 80031a8:	e000e100 	.word	0xe000e100

080031ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	6039      	str	r1, [r7, #0]
 80031b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	db0a      	blt.n	80031d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	490c      	ldr	r1, [pc, #48]	; (80031f8 <__NVIC_SetPriority+0x4c>)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	0112      	lsls	r2, r2, #4
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	440b      	add	r3, r1
 80031d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d4:	e00a      	b.n	80031ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	4908      	ldr	r1, [pc, #32]	; (80031fc <__NVIC_SetPriority+0x50>)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	3b04      	subs	r3, #4
 80031e4:	0112      	lsls	r2, r2, #4
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	440b      	add	r3, r1
 80031ea:	761a      	strb	r2, [r3, #24]
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	e000e100 	.word	0xe000e100
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003200:	b480      	push	{r7}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f1c3 0307 	rsb	r3, r3, #7
 800321a:	2b04      	cmp	r3, #4
 800321c:	bf28      	it	cs
 800321e:	2304      	movcs	r3, #4
 8003220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3304      	adds	r3, #4
 8003226:	2b06      	cmp	r3, #6
 8003228:	d902      	bls.n	8003230 <NVIC_EncodePriority+0x30>
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3b03      	subs	r3, #3
 800322e:	e000      	b.n	8003232 <NVIC_EncodePriority+0x32>
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43da      	mvns	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	401a      	ands	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003248:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	43d9      	mvns	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	4313      	orrs	r3, r2
         );
}
 800325a:	4618      	mov	r0, r3
 800325c:	3724      	adds	r7, #36	; 0x24
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr

08003264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3b01      	subs	r3, #1
 8003270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003274:	d301      	bcc.n	800327a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003276:	2301      	movs	r3, #1
 8003278:	e00f      	b.n	800329a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327a:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <SysTick_Config+0x40>)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3b01      	subs	r3, #1
 8003280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003282:	210f      	movs	r1, #15
 8003284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003288:	f7ff ff90 	bl	80031ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <SysTick_Config+0x40>)
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003292:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <SysTick_Config+0x40>)
 8003294:	2207      	movs	r2, #7
 8003296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	e000e010 	.word	0xe000e010

080032a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ff2d 	bl	8003110 <__NVIC_SetPriorityGrouping>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4603      	mov	r3, r0
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d0:	f7ff ff42 	bl	8003158 <__NVIC_GetPriorityGrouping>
 80032d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	6978      	ldr	r0, [r7, #20]
 80032dc:	f7ff ff90 	bl	8003200 <NVIC_EncodePriority>
 80032e0:	4602      	mov	r2, r0
 80032e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff5f 	bl	80031ac <__NVIC_SetPriority>
}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff35 	bl	8003174 <__NVIC_EnableIRQ>
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ffa2 	bl	8003264 <SysTick_Config>
 8003320:	4603      	mov	r3, r0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e043      	b.n	80033ca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <HAL_DMA_Init+0xa8>)
 800334a:	4413      	add	r3, r2
 800334c:	4a22      	ldr	r2, [pc, #136]	; (80033d8 <HAL_DMA_Init+0xac>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	091b      	lsrs	r3, r3, #4
 8003354:	009a      	lsls	r2, r3, #2
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a1f      	ldr	r2, [pc, #124]	; (80033dc <HAL_DMA_Init+0xb0>)
 800335e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003376:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800337a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003384:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003390:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	bffdfff8 	.word	0xbffdfff8
 80033d8:	cccccccd 	.word	0xcccccccd
 80033dc:	40020000 	.word	0x40020000

080033e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_DMA_Start_IT+0x20>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e04a      	b.n	8003496 <HAL_DMA_Start_IT+0xb6>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800340e:	2b01      	cmp	r3, #1
 8003410:	d13a      	bne.n	8003488 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2202      	movs	r2, #2
 8003416:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68b9      	ldr	r1, [r7, #8]
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f9ae 	bl	8003798 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 020e 	orr.w	r2, r2, #14
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	e00f      	b.n	8003476 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0204 	bic.w	r2, r2, #4
 8003464:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 020a 	orr.w	r2, r2, #10
 8003474:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	e005      	b.n	8003494 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003490:	2302      	movs	r3, #2
 8003492:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003494:	7dfb      	ldrb	r3, [r7, #23]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d005      	beq.n	80034c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2204      	movs	r2, #4
 80034ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
 80034c0:	e051      	b.n	8003566 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 020e 	bic.w	r2, r2, #14
 80034d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0201 	bic.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a22      	ldr	r2, [pc, #136]	; (8003570 <HAL_DMA_Abort_IT+0xd0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d029      	beq.n	8003540 <HAL_DMA_Abort_IT+0xa0>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a20      	ldr	r2, [pc, #128]	; (8003574 <HAL_DMA_Abort_IT+0xd4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d022      	beq.n	800353c <HAL_DMA_Abort_IT+0x9c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1f      	ldr	r2, [pc, #124]	; (8003578 <HAL_DMA_Abort_IT+0xd8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d01a      	beq.n	8003536 <HAL_DMA_Abort_IT+0x96>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1d      	ldr	r2, [pc, #116]	; (800357c <HAL_DMA_Abort_IT+0xdc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d012      	beq.n	8003530 <HAL_DMA_Abort_IT+0x90>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1c      	ldr	r2, [pc, #112]	; (8003580 <HAL_DMA_Abort_IT+0xe0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00a      	beq.n	800352a <HAL_DMA_Abort_IT+0x8a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1a      	ldr	r2, [pc, #104]	; (8003584 <HAL_DMA_Abort_IT+0xe4>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d102      	bne.n	8003524 <HAL_DMA_Abort_IT+0x84>
 800351e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003522:	e00e      	b.n	8003542 <HAL_DMA_Abort_IT+0xa2>
 8003524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003528:	e00b      	b.n	8003542 <HAL_DMA_Abort_IT+0xa2>
 800352a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800352e:	e008      	b.n	8003542 <HAL_DMA_Abort_IT+0xa2>
 8003530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003534:	e005      	b.n	8003542 <HAL_DMA_Abort_IT+0xa2>
 8003536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800353a:	e002      	b.n	8003542 <HAL_DMA_Abort_IT+0xa2>
 800353c:	2310      	movs	r3, #16
 800353e:	e000      	b.n	8003542 <HAL_DMA_Abort_IT+0xa2>
 8003540:	2301      	movs	r3, #1
 8003542:	4a11      	ldr	r2, [pc, #68]	; (8003588 <HAL_DMA_Abort_IT+0xe8>)
 8003544:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	4798      	blx	r3
    } 
  }
  return status;
 8003566:	7bfb      	ldrb	r3, [r7, #15]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40020008 	.word	0x40020008
 8003574:	4002001c 	.word	0x4002001c
 8003578:	40020030 	.word	0x40020030
 800357c:	40020044 	.word	0x40020044
 8003580:	40020058 	.word	0x40020058
 8003584:	4002006c 	.word	0x4002006c
 8003588:	40020000 	.word	0x40020000

0800358c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	2204      	movs	r2, #4
 80035aa:	409a      	lsls	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d04f      	beq.n	8003654 <HAL_DMA_IRQHandler+0xc8>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d04a      	beq.n	8003654 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d107      	bne.n	80035dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0204 	bic.w	r2, r2, #4
 80035da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a66      	ldr	r2, [pc, #408]	; (800377c <HAL_DMA_IRQHandler+0x1f0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d029      	beq.n	800363a <HAL_DMA_IRQHandler+0xae>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a65      	ldr	r2, [pc, #404]	; (8003780 <HAL_DMA_IRQHandler+0x1f4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d022      	beq.n	8003636 <HAL_DMA_IRQHandler+0xaa>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a63      	ldr	r2, [pc, #396]	; (8003784 <HAL_DMA_IRQHandler+0x1f8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01a      	beq.n	8003630 <HAL_DMA_IRQHandler+0xa4>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a62      	ldr	r2, [pc, #392]	; (8003788 <HAL_DMA_IRQHandler+0x1fc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d012      	beq.n	800362a <HAL_DMA_IRQHandler+0x9e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a60      	ldr	r2, [pc, #384]	; (800378c <HAL_DMA_IRQHandler+0x200>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00a      	beq.n	8003624 <HAL_DMA_IRQHandler+0x98>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a5f      	ldr	r2, [pc, #380]	; (8003790 <HAL_DMA_IRQHandler+0x204>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d102      	bne.n	800361e <HAL_DMA_IRQHandler+0x92>
 8003618:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800361c:	e00e      	b.n	800363c <HAL_DMA_IRQHandler+0xb0>
 800361e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003622:	e00b      	b.n	800363c <HAL_DMA_IRQHandler+0xb0>
 8003624:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003628:	e008      	b.n	800363c <HAL_DMA_IRQHandler+0xb0>
 800362a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800362e:	e005      	b.n	800363c <HAL_DMA_IRQHandler+0xb0>
 8003630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003634:	e002      	b.n	800363c <HAL_DMA_IRQHandler+0xb0>
 8003636:	2340      	movs	r3, #64	; 0x40
 8003638:	e000      	b.n	800363c <HAL_DMA_IRQHandler+0xb0>
 800363a:	2304      	movs	r3, #4
 800363c:	4a55      	ldr	r2, [pc, #340]	; (8003794 <HAL_DMA_IRQHandler+0x208>)
 800363e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8094 	beq.w	8003772 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003652:	e08e      	b.n	8003772 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	2202      	movs	r2, #2
 800365a:	409a      	lsls	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4013      	ands	r3, r2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d056      	beq.n	8003712 <HAL_DMA_IRQHandler+0x186>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d051      	beq.n	8003712 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10b      	bne.n	8003694 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 020a 	bic.w	r2, r2, #10
 800368a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a38      	ldr	r2, [pc, #224]	; (800377c <HAL_DMA_IRQHandler+0x1f0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d029      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x166>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a37      	ldr	r2, [pc, #220]	; (8003780 <HAL_DMA_IRQHandler+0x1f4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d022      	beq.n	80036ee <HAL_DMA_IRQHandler+0x162>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a35      	ldr	r2, [pc, #212]	; (8003784 <HAL_DMA_IRQHandler+0x1f8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01a      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x15c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a34      	ldr	r2, [pc, #208]	; (8003788 <HAL_DMA_IRQHandler+0x1fc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d012      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x156>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a32      	ldr	r2, [pc, #200]	; (800378c <HAL_DMA_IRQHandler+0x200>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00a      	beq.n	80036dc <HAL_DMA_IRQHandler+0x150>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a31      	ldr	r2, [pc, #196]	; (8003790 <HAL_DMA_IRQHandler+0x204>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d102      	bne.n	80036d6 <HAL_DMA_IRQHandler+0x14a>
 80036d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80036d4:	e00e      	b.n	80036f4 <HAL_DMA_IRQHandler+0x168>
 80036d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036da:	e00b      	b.n	80036f4 <HAL_DMA_IRQHandler+0x168>
 80036dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036e0:	e008      	b.n	80036f4 <HAL_DMA_IRQHandler+0x168>
 80036e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036e6:	e005      	b.n	80036f4 <HAL_DMA_IRQHandler+0x168>
 80036e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ec:	e002      	b.n	80036f4 <HAL_DMA_IRQHandler+0x168>
 80036ee:	2320      	movs	r3, #32
 80036f0:	e000      	b.n	80036f4 <HAL_DMA_IRQHandler+0x168>
 80036f2:	2302      	movs	r3, #2
 80036f4:	4a27      	ldr	r2, [pc, #156]	; (8003794 <HAL_DMA_IRQHandler+0x208>)
 80036f6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	2b00      	cmp	r3, #0
 8003706:	d034      	beq.n	8003772 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003710:	e02f      	b.n	8003772 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2208      	movs	r2, #8
 8003718:	409a      	lsls	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d028      	beq.n	8003774 <HAL_DMA_IRQHandler+0x1e8>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d023      	beq.n	8003774 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 020e 	bic.w	r2, r2, #14
 800373a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003744:	2101      	movs	r1, #1
 8003746:	fa01 f202 	lsl.w	r2, r1, r2
 800374a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	2b00      	cmp	r3, #0
 8003768:	d004      	beq.n	8003774 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
    }
  }
  return;
 8003772:	bf00      	nop
 8003774:	bf00      	nop
}
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40020008 	.word	0x40020008
 8003780:	4002001c 	.word	0x4002001c
 8003784:	40020030 	.word	0x40020030
 8003788:	40020044 	.word	0x40020044
 800378c:	40020058 	.word	0x40020058
 8003790:	4002006c 	.word	0x4002006c
 8003794:	40020000 	.word	0x40020000

08003798 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ae:	2101      	movs	r1, #1
 80037b0:	fa01 f202 	lsl.w	r2, r1, r2
 80037b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d108      	bne.n	80037d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037d6:	e007      	b.n	80037e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	60da      	str	r2, [r3, #12]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr
	...

080037f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b08b      	sub	sp, #44	; 0x2c
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037fe:	2300      	movs	r3, #0
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003802:	2300      	movs	r3, #0
 8003804:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003806:	e127      	b.n	8003a58 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003808:	2201      	movs	r2, #1
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	429a      	cmp	r2, r3
 8003822:	f040 8116 	bne.w	8003a52 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b12      	cmp	r3, #18
 800382c:	d034      	beq.n	8003898 <HAL_GPIO_Init+0xa4>
 800382e:	2b12      	cmp	r3, #18
 8003830:	d80d      	bhi.n	800384e <HAL_GPIO_Init+0x5a>
 8003832:	2b02      	cmp	r3, #2
 8003834:	d02b      	beq.n	800388e <HAL_GPIO_Init+0x9a>
 8003836:	2b02      	cmp	r3, #2
 8003838:	d804      	bhi.n	8003844 <HAL_GPIO_Init+0x50>
 800383a:	2b00      	cmp	r3, #0
 800383c:	d031      	beq.n	80038a2 <HAL_GPIO_Init+0xae>
 800383e:	2b01      	cmp	r3, #1
 8003840:	d01c      	beq.n	800387c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003842:	e048      	b.n	80038d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003844:	2b03      	cmp	r3, #3
 8003846:	d043      	beq.n	80038d0 <HAL_GPIO_Init+0xdc>
 8003848:	2b11      	cmp	r3, #17
 800384a:	d01b      	beq.n	8003884 <HAL_GPIO_Init+0x90>
          break;
 800384c:	e043      	b.n	80038d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800384e:	4a89      	ldr	r2, [pc, #548]	; (8003a74 <HAL_GPIO_Init+0x280>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d026      	beq.n	80038a2 <HAL_GPIO_Init+0xae>
 8003854:	4a87      	ldr	r2, [pc, #540]	; (8003a74 <HAL_GPIO_Init+0x280>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d806      	bhi.n	8003868 <HAL_GPIO_Init+0x74>
 800385a:	4a87      	ldr	r2, [pc, #540]	; (8003a78 <HAL_GPIO_Init+0x284>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d020      	beq.n	80038a2 <HAL_GPIO_Init+0xae>
 8003860:	4a86      	ldr	r2, [pc, #536]	; (8003a7c <HAL_GPIO_Init+0x288>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d01d      	beq.n	80038a2 <HAL_GPIO_Init+0xae>
          break;
 8003866:	e036      	b.n	80038d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003868:	4a85      	ldr	r2, [pc, #532]	; (8003a80 <HAL_GPIO_Init+0x28c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d019      	beq.n	80038a2 <HAL_GPIO_Init+0xae>
 800386e:	4a85      	ldr	r2, [pc, #532]	; (8003a84 <HAL_GPIO_Init+0x290>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d016      	beq.n	80038a2 <HAL_GPIO_Init+0xae>
 8003874:	4a84      	ldr	r2, [pc, #528]	; (8003a88 <HAL_GPIO_Init+0x294>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d013      	beq.n	80038a2 <HAL_GPIO_Init+0xae>
          break;
 800387a:	e02c      	b.n	80038d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	623b      	str	r3, [r7, #32]
          break;
 8003882:	e028      	b.n	80038d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	3304      	adds	r3, #4
 800388a:	623b      	str	r3, [r7, #32]
          break;
 800388c:	e023      	b.n	80038d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	3308      	adds	r3, #8
 8003894:	623b      	str	r3, [r7, #32]
          break;
 8003896:	e01e      	b.n	80038d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	330c      	adds	r3, #12
 800389e:	623b      	str	r3, [r7, #32]
          break;
 80038a0:	e019      	b.n	80038d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d102      	bne.n	80038b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80038aa:	2304      	movs	r3, #4
 80038ac:	623b      	str	r3, [r7, #32]
          break;
 80038ae:	e012      	b.n	80038d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d105      	bne.n	80038c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038b8:	2308      	movs	r3, #8
 80038ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	611a      	str	r2, [r3, #16]
          break;
 80038c2:	e008      	b.n	80038d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038c4:	2308      	movs	r3, #8
 80038c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	615a      	str	r2, [r3, #20]
          break;
 80038ce:	e002      	b.n	80038d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80038d0:	2300      	movs	r3, #0
 80038d2:	623b      	str	r3, [r7, #32]
          break;
 80038d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2bff      	cmp	r3, #255	; 0xff
 80038da:	d801      	bhi.n	80038e0 <HAL_GPIO_Init+0xec>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	e001      	b.n	80038e4 <HAL_GPIO_Init+0xf0>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3304      	adds	r3, #4
 80038e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2bff      	cmp	r3, #255	; 0xff
 80038ea:	d802      	bhi.n	80038f2 <HAL_GPIO_Init+0xfe>
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	e002      	b.n	80038f8 <HAL_GPIO_Init+0x104>
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	3b08      	subs	r3, #8
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	210f      	movs	r1, #15
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	fa01 f303 	lsl.w	r3, r1, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	401a      	ands	r2, r3
 800390a:	6a39      	ldr	r1, [r7, #32]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	fa01 f303 	lsl.w	r3, r1, r3
 8003912:	431a      	orrs	r2, r3
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8096 	beq.w	8003a52 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003926:	4b59      	ldr	r3, [pc, #356]	; (8003a8c <HAL_GPIO_Init+0x298>)
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	4a58      	ldr	r2, [pc, #352]	; (8003a8c <HAL_GPIO_Init+0x298>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	6193      	str	r3, [r2, #24]
 8003932:	4b56      	ldr	r3, [pc, #344]	; (8003a8c <HAL_GPIO_Init+0x298>)
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800393e:	4a54      	ldr	r2, [pc, #336]	; (8003a90 <HAL_GPIO_Init+0x29c>)
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	089b      	lsrs	r3, r3, #2
 8003944:	3302      	adds	r3, #2
 8003946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	220f      	movs	r2, #15
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4013      	ands	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a4b      	ldr	r2, [pc, #300]	; (8003a94 <HAL_GPIO_Init+0x2a0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d013      	beq.n	8003992 <HAL_GPIO_Init+0x19e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a4a      	ldr	r2, [pc, #296]	; (8003a98 <HAL_GPIO_Init+0x2a4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00d      	beq.n	800398e <HAL_GPIO_Init+0x19a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a49      	ldr	r2, [pc, #292]	; (8003a9c <HAL_GPIO_Init+0x2a8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d007      	beq.n	800398a <HAL_GPIO_Init+0x196>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a48      	ldr	r2, [pc, #288]	; (8003aa0 <HAL_GPIO_Init+0x2ac>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d101      	bne.n	8003986 <HAL_GPIO_Init+0x192>
 8003982:	2303      	movs	r3, #3
 8003984:	e006      	b.n	8003994 <HAL_GPIO_Init+0x1a0>
 8003986:	2304      	movs	r3, #4
 8003988:	e004      	b.n	8003994 <HAL_GPIO_Init+0x1a0>
 800398a:	2302      	movs	r3, #2
 800398c:	e002      	b.n	8003994 <HAL_GPIO_Init+0x1a0>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <HAL_GPIO_Init+0x1a0>
 8003992:	2300      	movs	r3, #0
 8003994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003996:	f002 0203 	and.w	r2, r2, #3
 800399a:	0092      	lsls	r2, r2, #2
 800399c:	4093      	lsls	r3, r2
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80039a4:	493a      	ldr	r1, [pc, #232]	; (8003a90 <HAL_GPIO_Init+0x29c>)
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	089b      	lsrs	r3, r3, #2
 80039aa:	3302      	adds	r3, #2
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d006      	beq.n	80039cc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039be:	4b39      	ldr	r3, [pc, #228]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	4938      	ldr	r1, [pc, #224]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]
 80039ca:	e006      	b.n	80039da <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039cc:	4b35      	ldr	r3, [pc, #212]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	43db      	mvns	r3, r3
 80039d4:	4933      	ldr	r1, [pc, #204]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d006      	beq.n	80039f4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039e6:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	492e      	ldr	r1, [pc, #184]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	604b      	str	r3, [r1, #4]
 80039f2:	e006      	b.n	8003a02 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039f4:	4b2b      	ldr	r3, [pc, #172]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	4929      	ldr	r1, [pc, #164]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d006      	beq.n	8003a1c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a0e:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	4924      	ldr	r1, [pc, #144]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	608b      	str	r3, [r1, #8]
 8003a1a:	e006      	b.n	8003a2a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a1c:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	43db      	mvns	r3, r3
 8003a24:	491f      	ldr	r1, [pc, #124]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d006      	beq.n	8003a44 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a36:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	491a      	ldr	r1, [pc, #104]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60cb      	str	r3, [r1, #12]
 8003a42:	e006      	b.n	8003a52 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a44:	4b17      	ldr	r3, [pc, #92]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	4915      	ldr	r1, [pc, #84]	; (8003aa4 <HAL_GPIO_Init+0x2b0>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	3301      	adds	r3, #1
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f47f aed0 	bne.w	8003808 <HAL_GPIO_Init+0x14>
  }
}
 8003a68:	bf00      	nop
 8003a6a:	372c      	adds	r7, #44	; 0x2c
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	10210000 	.word	0x10210000
 8003a78:	10110000 	.word	0x10110000
 8003a7c:	10120000 	.word	0x10120000
 8003a80:	10310000 	.word	0x10310000
 8003a84:	10320000 	.word	0x10320000
 8003a88:	10220000 	.word	0x10220000
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40010000 	.word	0x40010000
 8003a94:	40010800 	.word	0x40010800
 8003a98:	40010c00 	.word	0x40010c00
 8003a9c:	40011000 	.word	0x40011000
 8003aa0:	40011400 	.word	0x40011400
 8003aa4:	40010400 	.word	0x40010400

08003aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	807b      	strh	r3, [r7, #2]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ab8:	787b      	ldrb	r3, [r7, #1]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003abe:	887a      	ldrh	r2, [r7, #2]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ac4:	e003      	b.n	8003ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ac6:	887b      	ldrh	r3, [r7, #2]
 8003ac8:	041a      	lsls	r2, r3, #16
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	611a      	str	r2, [r3, #16]
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003aea:	887a      	ldrh	r2, [r7, #2]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4013      	ands	r3, r2
 8003af0:	041a      	lsls	r2, r3, #16
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	43d9      	mvns	r1, r3
 8003af6:	887b      	ldrh	r3, [r7, #2]
 8003af8:	400b      	ands	r3, r1
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	611a      	str	r2, [r3, #16]
}
 8003b00:	bf00      	nop
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr
	...

08003b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b16:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d006      	beq.n	8003b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b22:	4a05      	ldr	r2, [pc, #20]	; (8003b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b24:	88fb      	ldrh	r3, [r7, #6]
 8003b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b28:	88fb      	ldrh	r3, [r7, #6]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fd feae 	bl	800188c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40010400 	.word	0x40010400

08003b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e11f      	b.n	8003d8e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d106      	bne.n	8003b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fd fba6 	bl	80012b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2224      	movs	r2, #36	; 0x24
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ba0:	f002 f82e 	bl	8005c00 <HAL_RCC_GetPCLK1Freq>
 8003ba4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4a7b      	ldr	r2, [pc, #492]	; (8003d98 <HAL_I2C_Init+0x25c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d807      	bhi.n	8003bc0 <HAL_I2C_Init+0x84>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4a7a      	ldr	r2, [pc, #488]	; (8003d9c <HAL_I2C_Init+0x260>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	bf94      	ite	ls
 8003bb8:	2301      	movls	r3, #1
 8003bba:	2300      	movhi	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	e006      	b.n	8003bce <HAL_I2C_Init+0x92>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a77      	ldr	r2, [pc, #476]	; (8003da0 <HAL_I2C_Init+0x264>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	bf94      	ite	ls
 8003bc8:	2301      	movls	r3, #1
 8003bca:	2300      	movhi	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e0db      	b.n	8003d8e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4a72      	ldr	r2, [pc, #456]	; (8003da4 <HAL_I2C_Init+0x268>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	0c9b      	lsrs	r3, r3, #18
 8003be0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4a64      	ldr	r2, [pc, #400]	; (8003d98 <HAL_I2C_Init+0x25c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d802      	bhi.n	8003c10 <HAL_I2C_Init+0xd4>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	e009      	b.n	8003c24 <HAL_I2C_Init+0xe8>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c16:	fb02 f303 	mul.w	r3, r2, r3
 8003c1a:	4a63      	ldr	r2, [pc, #396]	; (8003da8 <HAL_I2C_Init+0x26c>)
 8003c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c20:	099b      	lsrs	r3, r3, #6
 8003c22:	3301      	adds	r3, #1
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4956      	ldr	r1, [pc, #344]	; (8003d98 <HAL_I2C_Init+0x25c>)
 8003c40:	428b      	cmp	r3, r1
 8003c42:	d80d      	bhi.n	8003c60 <HAL_I2C_Init+0x124>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	1e59      	subs	r1, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c52:	3301      	adds	r3, #1
 8003c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	bf38      	it	cc
 8003c5c:	2304      	movcc	r3, #4
 8003c5e:	e04f      	b.n	8003d00 <HAL_I2C_Init+0x1c4>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d111      	bne.n	8003c8c <HAL_I2C_Init+0x150>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1e58      	subs	r0, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6859      	ldr	r1, [r3, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	440b      	add	r3, r1
 8003c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	e012      	b.n	8003cb2 <HAL_I2C_Init+0x176>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1e58      	subs	r0, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6859      	ldr	r1, [r3, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	0099      	lsls	r1, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_I2C_Init+0x17e>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e022      	b.n	8003d00 <HAL_I2C_Init+0x1c4>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10e      	bne.n	8003ce0 <HAL_I2C_Init+0x1a4>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1e58      	subs	r0, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6859      	ldr	r1, [r3, #4]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	440b      	add	r3, r1
 8003cd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cde:	e00f      	b.n	8003d00 <HAL_I2C_Init+0x1c4>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1e58      	subs	r0, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	0099      	lsls	r1, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	6809      	ldr	r1, [r1, #0]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69da      	ldr	r2, [r3, #28]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6911      	ldr	r1, [r2, #16]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68d2      	ldr	r2, [r2, #12]
 8003d3a:	4311      	orrs	r1, r2
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	000186a0 	.word	0x000186a0
 8003d9c:	001e847f 	.word	0x001e847f
 8003da0:	003d08ff 	.word	0x003d08ff
 8003da4:	431bde83 	.word	0x431bde83
 8003da8:	10624dd3 	.word	0x10624dd3

08003dac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	607a      	str	r2, [r7, #4]
 8003db6:	461a      	mov	r2, r3
 8003db8:	460b      	mov	r3, r1
 8003dba:	817b      	strh	r3, [r7, #10]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dc0:	f7ff f99c 	bl	80030fc <HAL_GetTick>
 8003dc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b20      	cmp	r3, #32
 8003dd0:	f040 80e0 	bne.w	8003f94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	2319      	movs	r3, #25
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4970      	ldr	r1, [pc, #448]	; (8003fa0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f001 f95c 	bl	800509c <I2C_WaitOnFlagUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003dea:	2302      	movs	r3, #2
 8003dec:	e0d3      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_I2C_Master_Transmit+0x50>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e0cc      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d007      	beq.n	8003e22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0201 	orr.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2221      	movs	r2, #33	; 0x21
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2210      	movs	r2, #16
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	893a      	ldrh	r2, [r7, #8]
 8003e52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4a50      	ldr	r2, [pc, #320]	; (8003fa4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e64:	8979      	ldrh	r1, [r7, #10]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	6a3a      	ldr	r2, [r7, #32]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fe6e 	bl	8004b4c <I2C_MasterRequestWrite>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e08d      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e90:	e066      	b.n	8003f60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	6a39      	ldr	r1, [r7, #32]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f001 f9d6 	bl	8005248 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00d      	beq.n	8003ebe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d107      	bne.n	8003eba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e06b      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	781a      	ldrb	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d11b      	bne.n	8003f34 <HAL_I2C_Master_Transmit+0x188>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d017      	beq.n	8003f34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	781a      	ldrb	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	6a39      	ldr	r1, [r7, #32]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f001 f9c6 	bl	80052ca <I2C_WaitOnBTFFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00d      	beq.n	8003f60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d107      	bne.n	8003f5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e01a      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d194      	bne.n	8003e92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e000      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
  }
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	00100002 	.word	0x00100002
 8003fa4:	ffff0000 	.word	0xffff0000

08003fa8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	817b      	strh	r3, [r7, #10]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	813b      	strh	r3, [r7, #8]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fc2:	f7ff f89b 	bl	80030fc <HAL_GetTick>
 8003fc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	f040 80d9 	bne.w	8004188 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2319      	movs	r3, #25
 8003fdc:	2201      	movs	r2, #1
 8003fde:	496d      	ldr	r1, [pc, #436]	; (8004194 <HAL_I2C_Mem_Write+0x1ec>)
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f001 f85b 	bl	800509c <I2C_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003fec:	2302      	movs	r3, #2
 8003fee:	e0cc      	b.n	800418a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_I2C_Mem_Write+0x56>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e0c5      	b.n	800418a <HAL_I2C_Mem_Write+0x1e2>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b01      	cmp	r3, #1
 8004012:	d007      	beq.n	8004024 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004032:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2221      	movs	r2, #33	; 0x21
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2240      	movs	r2, #64	; 0x40
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a3a      	ldr	r2, [r7, #32]
 800404e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004054:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a4d      	ldr	r2, [pc, #308]	; (8004198 <HAL_I2C_Mem_Write+0x1f0>)
 8004064:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004066:	88f8      	ldrh	r0, [r7, #6]
 8004068:	893a      	ldrh	r2, [r7, #8]
 800406a:	8979      	ldrh	r1, [r7, #10]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	4603      	mov	r3, r0
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 fdea 	bl	8004c50 <I2C_RequestMemoryWrite>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d052      	beq.n	8004128 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e081      	b.n	800418a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f001 f8dc 	bl	8005248 <I2C_WaitOnTXEFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00d      	beq.n	80040b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	2b04      	cmp	r3, #4
 800409c:	d107      	bne.n	80040ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e06b      	b.n	800418a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	781a      	ldrb	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d11b      	bne.n	8004128 <HAL_I2C_Mem_Write+0x180>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d017      	beq.n	8004128 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	781a      	ldrb	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1aa      	bne.n	8004086 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f001 f8c8 	bl	80052ca <I2C_WaitOnBTFFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00d      	beq.n	800415c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	2b04      	cmp	r3, #4
 8004146:	d107      	bne.n	8004158 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004156:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e016      	b.n	800418a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	e000      	b.n	800418a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004188:	2302      	movs	r3, #2
  }
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	00100002 	.word	0x00100002
 8004198:	ffff0000 	.word	0xffff0000

0800419c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08c      	sub	sp, #48	; 0x30
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	4608      	mov	r0, r1
 80041a6:	4611      	mov	r1, r2
 80041a8:	461a      	mov	r2, r3
 80041aa:	4603      	mov	r3, r0
 80041ac:	817b      	strh	r3, [r7, #10]
 80041ae:	460b      	mov	r3, r1
 80041b0:	813b      	strh	r3, [r7, #8]
 80041b2:	4613      	mov	r3, r2
 80041b4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041ba:	f7fe ff9f 	bl	80030fc <HAL_GetTick>
 80041be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	f040 823d 	bne.w	8004648 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	2319      	movs	r3, #25
 80041d4:	2201      	movs	r2, #1
 80041d6:	4981      	ldr	r1, [pc, #516]	; (80043dc <HAL_I2C_Mem_Read+0x240>)
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 ff5f 	bl	800509c <I2C_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80041e4:	2302      	movs	r3, #2
 80041e6:	e230      	b.n	800464a <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_I2C_Mem_Read+0x5a>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e229      	b.n	800464a <HAL_I2C_Mem_Read+0x4ae>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b01      	cmp	r3, #1
 800420a:	d007      	beq.n	800421c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800422a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2222      	movs	r2, #34	; 0x22
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2240      	movs	r2, #64	; 0x40
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004246:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800424c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4a61      	ldr	r2, [pc, #388]	; (80043e0 <HAL_I2C_Mem_Read+0x244>)
 800425c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800425e:	88f8      	ldrh	r0, [r7, #6]
 8004260:	893a      	ldrh	r2, [r7, #8]
 8004262:	8979      	ldrh	r1, [r7, #10]
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	4603      	mov	r3, r0
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 fd84 	bl	8004d7c <I2C_RequestMemoryRead>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e1e5      	b.n	800464a <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004282:	2b00      	cmp	r3, #0
 8004284:	d113      	bne.n	80042ae <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	e1b9      	b.n	8004622 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d11d      	bne.n	80042f2 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042c6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c8:	2300      	movs	r3, #0
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	61bb      	str	r3, [r7, #24]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	61bb      	str	r3, [r7, #24]
 80042dc:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80042ee:	b662      	cpsie	i
 80042f0:	e197      	b.n	8004622 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d11d      	bne.n	8004336 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004308:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800430a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004330:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004332:	b662      	cpsie	i
 8004334:	e175      	b.n	8004622 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004344:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800435c:	e161      	b.n	8004622 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004362:	2b03      	cmp	r3, #3
 8004364:	f200 811a 	bhi.w	800459c <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436c:	2b01      	cmp	r3, #1
 800436e:	d123      	bne.n	80043b8 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004372:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 ffe9 	bl	800534c <I2C_WaitOnRXNEFlagUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e162      	b.n	800464a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043b6:	e134      	b.n	8004622 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d150      	bne.n	8004462 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c6:	2200      	movs	r2, #0
 80043c8:	4906      	ldr	r1, [pc, #24]	; (80043e4 <HAL_I2C_Mem_Read+0x248>)
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 fe66 	bl	800509c <I2C_WaitOnFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d008      	beq.n	80043e8 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e137      	b.n	800464a <HAL_I2C_Mem_Read+0x4ae>
 80043da:	bf00      	nop
 80043dc:	00100002 	.word	0x00100002
 80043e0:	ffff0000 	.word	0xffff0000
 80043e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80043e8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800442c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004460:	e0df      	b.n	8004622 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	2200      	movs	r2, #0
 800446a:	497a      	ldr	r1, [pc, #488]	; (8004654 <HAL_I2C_Mem_Read+0x4b8>)
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 fe15 	bl	800509c <I2C_WaitOnFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0e6      	b.n	800464a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800448c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044c0:	4b65      	ldr	r3, [pc, #404]	; (8004658 <HAL_I2C_Mem_Read+0x4bc>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	08db      	lsrs	r3, r3, #3
 80044c6:	4a65      	ldr	r2, [pc, #404]	; (800465c <HAL_I2C_Mem_Read+0x4c0>)
 80044c8:	fba2 2303 	umull	r2, r3, r2, r3
 80044cc:	0a1a      	lsrs	r2, r3, #8
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	00da      	lsls	r2, r3, #3
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	3b01      	subs	r3, #1
 80044de:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d117      	bne.n	8004516 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	f043 0220 	orr.w	r2, r3, #32
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004508:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e099      	b.n	800464a <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b04      	cmp	r3, #4
 8004522:	d1da      	bne.n	80044da <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004532:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004566:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	855a      	strh	r2, [r3, #42]	; 0x2a
 800459a:	e042      	b.n	8004622 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800459c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fed3 	bl	800534c <I2C_WaitOnRXNEFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e04c      	b.n	800464a <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691a      	ldr	r2, [r3, #16]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d118      	bne.n	8004622 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004626:	2b00      	cmp	r3, #0
 8004628:	f47f ae99 	bne.w	800435e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	e000      	b.n	800464a <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8004648:	2302      	movs	r3, #2
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	3728      	adds	r7, #40	; 0x28
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	00010004 	.word	0x00010004
 8004658:	20000018 	.word	0x20000018
 800465c:	14f8b589 	.word	0x14f8b589

08004660 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	; 0x28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004678:	2300      	movs	r3, #0
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004682:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	0a1b      	lsrs	r3, r3, #8
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d016      	beq.n	80046be <HAL_I2C_ER_IRQHandler+0x5e>
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	0a1b      	lsrs	r3, r3, #8
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d010      	beq.n	80046be <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046ac:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046bc:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	0a5b      	lsrs	r3, r3, #9
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00e      	beq.n	80046e8 <HAL_I2C_ER_IRQHandler+0x88>
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	0a1b      	lsrs	r3, r3, #8
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	f043 0302 	orr.w	r3, r3, #2
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80046e6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	0a9b      	lsrs	r3, r3, #10
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d03f      	beq.n	8004774 <HAL_I2C_ER_IRQHandler+0x114>
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d039      	beq.n	8004774 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004700:	7efb      	ldrb	r3, [r7, #27]
 8004702:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004712:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800471a:	7ebb      	ldrb	r3, [r7, #26]
 800471c:	2b20      	cmp	r3, #32
 800471e:	d112      	bne.n	8004746 <HAL_I2C_ER_IRQHandler+0xe6>
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10f      	bne.n	8004746 <HAL_I2C_ER_IRQHandler+0xe6>
 8004726:	7cfb      	ldrb	r3, [r7, #19]
 8004728:	2b21      	cmp	r3, #33	; 0x21
 800472a:	d008      	beq.n	800473e <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800472c:	7cfb      	ldrb	r3, [r7, #19]
 800472e:	2b29      	cmp	r3, #41	; 0x29
 8004730:	d005      	beq.n	800473e <HAL_I2C_ER_IRQHandler+0xde>
 8004732:	7cfb      	ldrb	r3, [r7, #19]
 8004734:	2b28      	cmp	r3, #40	; 0x28
 8004736:	d106      	bne.n	8004746 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b21      	cmp	r3, #33	; 0x21
 800473c:	d103      	bne.n	8004746 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f862 	bl	8004808 <I2C_Slave_AF>
 8004744:	e016      	b.n	8004774 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800474e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	f043 0304 	orr.w	r3, r3, #4
 8004756:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004758:	7efb      	ldrb	r3, [r7, #27]
 800475a:	2b10      	cmp	r3, #16
 800475c:	d002      	beq.n	8004764 <HAL_I2C_ER_IRQHandler+0x104>
 800475e:	7efb      	ldrb	r3, [r7, #27]
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d107      	bne.n	8004774 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004772:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	0adb      	lsrs	r3, r3, #11
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00e      	beq.n	800479e <HAL_I2C_ER_IRQHandler+0x13e>
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	f043 0308 	orr.w	r3, r3, #8
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800479c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f899 	bl	80048e8 <I2C_ITError>
  }
}
 80047b6:	bf00      	nop
 80047b8:	3728      	adds	r7, #40	; 0x28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr

080047d0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr
	...

08004808 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004816:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b08      	cmp	r3, #8
 8004822:	d002      	beq.n	800482a <I2C_Slave_AF+0x22>
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b20      	cmp	r3, #32
 8004828:	d129      	bne.n	800487e <I2C_Slave_AF+0x76>
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	2b28      	cmp	r3, #40	; 0x28
 800482e:	d126      	bne.n	800487e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a2c      	ldr	r2, [pc, #176]	; (80048e4 <I2C_Slave_AF+0xdc>)
 8004834:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004844:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800484e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff ffaa 	bl	80047d0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800487c:	e02e      	b.n	80048dc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b21      	cmp	r3, #33	; 0x21
 8004882:	d126      	bne.n	80048d2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a17      	ldr	r2, [pc, #92]	; (80048e4 <I2C_Slave_AF+0xdc>)
 8004888:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2221      	movs	r2, #33	; 0x21
 800488e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048ae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048b8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff ff77 	bl	80047be <HAL_I2C_SlaveTxCpltCallback>
}
 80048d0:	e004      	b.n	80048dc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048da:	615a      	str	r2, [r3, #20]
}
 80048dc:	bf00      	nop
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	ffff0000 	.word	0xffff0000

080048e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004900:	7bbb      	ldrb	r3, [r7, #14]
 8004902:	2b10      	cmp	r3, #16
 8004904:	d002      	beq.n	800490c <I2C_ITError+0x24>
 8004906:	7bbb      	ldrb	r3, [r7, #14]
 8004908:	2b40      	cmp	r3, #64	; 0x40
 800490a:	d10a      	bne.n	8004922 <I2C_ITError+0x3a>
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	2b22      	cmp	r3, #34	; 0x22
 8004910:	d107      	bne.n	8004922 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004920:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004928:	2b28      	cmp	r3, #40	; 0x28
 800492a:	d107      	bne.n	800493c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2228      	movs	r2, #40	; 0x28
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800493a:	e015      	b.n	8004968 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800494a:	d00a      	beq.n	8004962 <I2C_ITError+0x7a>
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b60      	cmp	r3, #96	; 0x60
 8004950:	d007      	beq.n	8004962 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004976:	d161      	bne.n	8004a3c <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004986:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004990:	2b01      	cmp	r3, #1
 8004992:	d020      	beq.n	80049d6 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004998:	4a6a      	ldr	r2, [pc, #424]	; (8004b44 <I2C_ITError+0x25c>)
 800499a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fe fd7d 	bl	80034a0 <HAL_DMA_Abort_IT>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8089 	beq.w	8004ac0 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0201 	bic.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049d0:	4610      	mov	r0, r2
 80049d2:	4798      	blx	r3
 80049d4:	e074      	b.n	8004ac0 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	4a5a      	ldr	r2, [pc, #360]	; (8004b44 <I2C_ITError+0x25c>)
 80049dc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe fd5c 	bl	80034a0 <HAL_DMA_Abort_IT>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d068      	beq.n	8004ac0 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f8:	2b40      	cmp	r3, #64	; 0x40
 80049fa:	d10b      	bne.n	8004a14 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0201 	bic.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a36:	4610      	mov	r0, r2
 8004a38:	4798      	blx	r3
 8004a3a:	e041      	b.n	8004ac0 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b60      	cmp	r3, #96	; 0x60
 8004a46:	d125      	bne.n	8004a94 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d10b      	bne.n	8004a7c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691a      	ldr	r2, [r3, #16]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0201 	bic.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff feb1 	bl	80047f4 <HAL_I2C_AbortCpltCallback>
 8004a92:	e015      	b.n	8004ac0 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b40      	cmp	r3, #64	; 0x40
 8004aa0:	d10b      	bne.n	8004aba <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff fe91 	bl	80047e2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10e      	bne.n	8004aee <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d109      	bne.n	8004aee <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d104      	bne.n	8004aee <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d007      	beq.n	8004afe <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004afc:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b04:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d113      	bne.n	8004b3a <I2C_ITError+0x252>
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	2b28      	cmp	r3, #40	; 0x28
 8004b16:	d110      	bne.n	8004b3a <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a0b      	ldr	r2, [pc, #44]	; (8004b48 <I2C_ITError+0x260>)
 8004b1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff fe4b 	bl	80047d0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	08004f4d 	.word	0x08004f4d
 8004b48:	ffff0000 	.word	0xffff0000

08004b4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d006      	beq.n	8004b76 <I2C_MasterRequestWrite+0x2a>
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d003      	beq.n	8004b76 <I2C_MasterRequestWrite+0x2a>
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b74:	d108      	bne.n	8004b88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	e00b      	b.n	8004ba0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	2b12      	cmp	r3, #18
 8004b8e:	d107      	bne.n	8004ba0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 fa75 	bl	800509c <I2C_WaitOnFlagUntilTimeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00d      	beq.n	8004bd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc6:	d103      	bne.n	8004bd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e035      	b.n	8004c40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bdc:	d108      	bne.n	8004bf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bde:	897b      	ldrh	r3, [r7, #10]
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bec:	611a      	str	r2, [r3, #16]
 8004bee:	e01b      	b.n	8004c28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bf0:	897b      	ldrh	r3, [r7, #10]
 8004bf2:	11db      	asrs	r3, r3, #7
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	f003 0306 	and.w	r3, r3, #6
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	f063 030f 	orn	r3, r3, #15
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	490e      	ldr	r1, [pc, #56]	; (8004c48 <I2C_MasterRequestWrite+0xfc>)
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 fa9b 	bl	800514a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e010      	b.n	8004c40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c1e:	897b      	ldrh	r3, [r7, #10]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	4907      	ldr	r1, [pc, #28]	; (8004c4c <I2C_MasterRequestWrite+0x100>)
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fa8b 	bl	800514a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	00010008 	.word	0x00010008
 8004c4c:	00010002 	.word	0x00010002

08004c50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	4608      	mov	r0, r1
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4603      	mov	r3, r0
 8004c60:	817b      	strh	r3, [r7, #10]
 8004c62:	460b      	mov	r3, r1
 8004c64:	813b      	strh	r3, [r7, #8]
 8004c66:	4613      	mov	r3, r2
 8004c68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fa08 	bl	800509c <I2C_WaitOnFlagUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00d      	beq.n	8004cae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca0:	d103      	bne.n	8004caa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e05f      	b.n	8004d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cae:	897b      	ldrh	r3, [r7, #10]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	6a3a      	ldr	r2, [r7, #32]
 8004cc2:	492d      	ldr	r1, [pc, #180]	; (8004d78 <I2C_RequestMemoryWrite+0x128>)
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fa40 	bl	800514a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e04c      	b.n	8004d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cec:	6a39      	ldr	r1, [r7, #32]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 faaa 	bl	8005248 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00d      	beq.n	8004d16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d107      	bne.n	8004d12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e02b      	b.n	8004d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d105      	bne.n	8004d28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d1c:	893b      	ldrh	r3, [r7, #8]
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	611a      	str	r2, [r3, #16]
 8004d26:	e021      	b.n	8004d6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d28:	893b      	ldrh	r3, [r7, #8]
 8004d2a:	0a1b      	lsrs	r3, r3, #8
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d38:	6a39      	ldr	r1, [r7, #32]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fa84 	bl	8005248 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00d      	beq.n	8004d62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d107      	bne.n	8004d5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e005      	b.n	8004d6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d62:	893b      	ldrh	r3, [r7, #8]
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	00010002 	.word	0x00010002

08004d7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	4608      	mov	r0, r1
 8004d86:	4611      	mov	r1, r2
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	817b      	strh	r3, [r7, #10]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	813b      	strh	r3, [r7, #8]
 8004d92:	4613      	mov	r3, r2
 8004d94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004da4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004db4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f96a 	bl	800509c <I2C_WaitOnFlagUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00d      	beq.n	8004dea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ddc:	d103      	bne.n	8004de6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e0aa      	b.n	8004f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dea:	897b      	ldrh	r3, [r7, #10]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004df8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	6a3a      	ldr	r2, [r7, #32]
 8004dfe:	4952      	ldr	r1, [pc, #328]	; (8004f48 <I2C_RequestMemoryRead+0x1cc>)
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f9a2 	bl	800514a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e097      	b.n	8004f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e28:	6a39      	ldr	r1, [r7, #32]
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fa0c 	bl	8005248 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00d      	beq.n	8004e52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d107      	bne.n	8004e4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e076      	b.n	8004f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e52:	88fb      	ldrh	r3, [r7, #6]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d105      	bne.n	8004e64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e58:	893b      	ldrh	r3, [r7, #8]
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	611a      	str	r2, [r3, #16]
 8004e62:	e021      	b.n	8004ea8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e64:	893b      	ldrh	r3, [r7, #8]
 8004e66:	0a1b      	lsrs	r3, r3, #8
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e74:	6a39      	ldr	r1, [r7, #32]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 f9e6 	bl	8005248 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00d      	beq.n	8004e9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d107      	bne.n	8004e9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e050      	b.n	8004f40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e9e:	893b      	ldrh	r3, [r7, #8]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eaa:	6a39      	ldr	r1, [r7, #32]
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f9cb 	bl	8005248 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00d      	beq.n	8004ed4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d107      	bne.n	8004ed0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ece:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e035      	b.n	8004f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f8d3 	bl	800509c <I2C_WaitOnFlagUntilTimeout>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00d      	beq.n	8004f18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f0a:	d103      	bne.n	8004f14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e013      	b.n	8004f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f18:	897b      	ldrh	r3, [r7, #10]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	f043 0301 	orr.w	r3, r3, #1
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	6a3a      	ldr	r2, [r7, #32]
 8004f2c:	4906      	ldr	r1, [pc, #24]	; (8004f48 <I2C_RequestMemoryRead+0x1cc>)
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f90b 	bl	800514a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	00010002 	.word	0x00010002

08004f4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f64:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f66:	4b4b      	ldr	r3, [pc, #300]	; (8005094 <I2C_DMAAbort+0x148>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	08db      	lsrs	r3, r3, #3
 8004f6c:	4a4a      	ldr	r2, [pc, #296]	; (8005098 <I2C_DMAAbort+0x14c>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	0a1a      	lsrs	r2, r3, #8
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	00da      	lsls	r2, r3, #3
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	f043 0220 	orr.w	r2, r3, #32
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004f92:	e00a      	b.n	8004faa <I2C_DMAAbort+0x5e>
    }
    count--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa8:	d0ea      	beq.n	8004f80 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fec:	2200      	movs	r2, #0
 8004fee:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0201 	bic.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b60      	cmp	r3, #96	; 0x60
 800501a:	d10e      	bne.n	800503a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2200      	movs	r2, #0
 8005030:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005032:	6978      	ldr	r0, [r7, #20]
 8005034:	f7ff fbde 	bl	80047f4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005038:	e027      	b.n	800508a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800503a:	7cfb      	ldrb	r3, [r7, #19]
 800503c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005040:	2b28      	cmp	r3, #40	; 0x28
 8005042:	d117      	bne.n	8005074 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005062:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2200      	movs	r2, #0
 8005068:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2228      	movs	r2, #40	; 0x28
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005072:	e007      	b.n	8005084 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005084:	6978      	ldr	r0, [r7, #20]
 8005086:	f7ff fbac 	bl	80047e2 <HAL_I2C_ErrorCallback>
}
 800508a:	bf00      	nop
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000018 	.word	0x20000018
 8005098:	14f8b589 	.word	0x14f8b589

0800509c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	4613      	mov	r3, r2
 80050aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050ac:	e025      	b.n	80050fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050b4:	d021      	beq.n	80050fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b6:	f7fe f821 	bl	80030fc <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d302      	bcc.n	80050cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d116      	bne.n	80050fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	f043 0220 	orr.w	r2, r3, #32
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e023      	b.n	8005142 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	0c1b      	lsrs	r3, r3, #16
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b01      	cmp	r3, #1
 8005102:	d10d      	bne.n	8005120 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	43da      	mvns	r2, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4013      	ands	r3, r2
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	bf0c      	ite	eq
 8005116:	2301      	moveq	r3, #1
 8005118:	2300      	movne	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	461a      	mov	r2, r3
 800511e:	e00c      	b.n	800513a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	43da      	mvns	r2, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4013      	ands	r3, r2
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	bf0c      	ite	eq
 8005132:	2301      	moveq	r3, #1
 8005134:	2300      	movne	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	429a      	cmp	r2, r3
 800513e:	d0b6      	beq.n	80050ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	607a      	str	r2, [r7, #4]
 8005156:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005158:	e051      	b.n	80051fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005168:	d123      	bne.n	80051b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005178:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005182:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f043 0204 	orr.w	r2, r3, #4
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e046      	b.n	8005240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051b8:	d021      	beq.n	80051fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ba:	f7fd ff9f 	bl	80030fc <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d302      	bcc.n	80051d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d116      	bne.n	80051fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f043 0220 	orr.w	r2, r3, #32
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e020      	b.n	8005240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	0c1b      	lsrs	r3, r3, #16
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	d10c      	bne.n	8005222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	43da      	mvns	r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4013      	ands	r3, r2
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	bf14      	ite	ne
 800521a:	2301      	movne	r3, #1
 800521c:	2300      	moveq	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	e00b      	b.n	800523a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	43da      	mvns	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	4013      	ands	r3, r2
 800522e:	b29b      	uxth	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	bf14      	ite	ne
 8005234:	2301      	movne	r3, #1
 8005236:	2300      	moveq	r3, #0
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d18d      	bne.n	800515a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005254:	e02d      	b.n	80052b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 f8ce 	bl	80053f8 <I2C_IsAcknowledgeFailed>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e02d      	b.n	80052c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800526c:	d021      	beq.n	80052b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800526e:	f7fd ff45 	bl	80030fc <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	429a      	cmp	r2, r3
 800527c:	d302      	bcc.n	8005284 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d116      	bne.n	80052b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f043 0220 	orr.w	r2, r3, #32
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e007      	b.n	80052c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052bc:	2b80      	cmp	r3, #128	; 0x80
 80052be:	d1ca      	bne.n	8005256 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052d6:	e02d      	b.n	8005334 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f88d 	bl	80053f8 <I2C_IsAcknowledgeFailed>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e02d      	b.n	8005344 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ee:	d021      	beq.n	8005334 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f0:	f7fd ff04 	bl	80030fc <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d302      	bcc.n	8005306 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d116      	bne.n	8005334 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	f043 0220 	orr.w	r2, r3, #32
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e007      	b.n	8005344 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b04      	cmp	r3, #4
 8005340:	d1ca      	bne.n	80052d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005358:	e042      	b.n	80053e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	f003 0310 	and.w	r3, r3, #16
 8005364:	2b10      	cmp	r3, #16
 8005366:	d119      	bne.n	800539c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0210 	mvn.w	r2, #16
 8005370:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e029      	b.n	80053f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800539c:	f7fd feae 	bl	80030fc <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d302      	bcc.n	80053b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d116      	bne.n	80053e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053cc:	f043 0220 	orr.w	r2, r3, #32
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e007      	b.n	80053f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d1b5      	bne.n	800535a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800540a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540e:	d11b      	bne.n	8005448 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005418:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	f043 0204 	orr.w	r2, r3, #4
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e26c      	b.n	8005940 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 8087 	beq.w	8005582 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005474:	4b92      	ldr	r3, [pc, #584]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f003 030c 	and.w	r3, r3, #12
 800547c:	2b04      	cmp	r3, #4
 800547e:	d00c      	beq.n	800549a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005480:	4b8f      	ldr	r3, [pc, #572]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f003 030c 	and.w	r3, r3, #12
 8005488:	2b08      	cmp	r3, #8
 800548a:	d112      	bne.n	80054b2 <HAL_RCC_OscConfig+0x5e>
 800548c:	4b8c      	ldr	r3, [pc, #560]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005498:	d10b      	bne.n	80054b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800549a:	4b89      	ldr	r3, [pc, #548]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d06c      	beq.n	8005580 <HAL_RCC_OscConfig+0x12c>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d168      	bne.n	8005580 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e246      	b.n	8005940 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ba:	d106      	bne.n	80054ca <HAL_RCC_OscConfig+0x76>
 80054bc:	4b80      	ldr	r3, [pc, #512]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a7f      	ldr	r2, [pc, #508]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 80054c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	e02e      	b.n	8005528 <HAL_RCC_OscConfig+0xd4>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10c      	bne.n	80054ec <HAL_RCC_OscConfig+0x98>
 80054d2:	4b7b      	ldr	r3, [pc, #492]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a7a      	ldr	r2, [pc, #488]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 80054d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	4b78      	ldr	r3, [pc, #480]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a77      	ldr	r2, [pc, #476]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 80054e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	e01d      	b.n	8005528 <HAL_RCC_OscConfig+0xd4>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054f4:	d10c      	bne.n	8005510 <HAL_RCC_OscConfig+0xbc>
 80054f6:	4b72      	ldr	r3, [pc, #456]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a71      	ldr	r2, [pc, #452]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 80054fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	4b6f      	ldr	r3, [pc, #444]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a6e      	ldr	r2, [pc, #440]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 8005508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	e00b      	b.n	8005528 <HAL_RCC_OscConfig+0xd4>
 8005510:	4b6b      	ldr	r3, [pc, #428]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a6a      	ldr	r2, [pc, #424]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 8005516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	4b68      	ldr	r3, [pc, #416]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a67      	ldr	r2, [pc, #412]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 8005522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005526:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d013      	beq.n	8005558 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005530:	f7fd fde4 	bl	80030fc <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005538:	f7fd fde0 	bl	80030fc <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b64      	cmp	r3, #100	; 0x64
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e1fa      	b.n	8005940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554a:	4b5d      	ldr	r3, [pc, #372]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0xe4>
 8005556:	e014      	b.n	8005582 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005558:	f7fd fdd0 	bl	80030fc <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005560:	f7fd fdcc 	bl	80030fc <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b64      	cmp	r3, #100	; 0x64
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e1e6      	b.n	8005940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005572:	4b53      	ldr	r3, [pc, #332]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f0      	bne.n	8005560 <HAL_RCC_OscConfig+0x10c>
 800557e:	e000      	b.n	8005582 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d063      	beq.n	8005656 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800558e:	4b4c      	ldr	r3, [pc, #304]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f003 030c 	and.w	r3, r3, #12
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00b      	beq.n	80055b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800559a:	4b49      	ldr	r3, [pc, #292]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f003 030c 	and.w	r3, r3, #12
 80055a2:	2b08      	cmp	r3, #8
 80055a4:	d11c      	bne.n	80055e0 <HAL_RCC_OscConfig+0x18c>
 80055a6:	4b46      	ldr	r3, [pc, #280]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d116      	bne.n	80055e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055b2:	4b43      	ldr	r3, [pc, #268]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <HAL_RCC_OscConfig+0x176>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d001      	beq.n	80055ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e1ba      	b.n	8005940 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ca:	4b3d      	ldr	r3, [pc, #244]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	4939      	ldr	r1, [pc, #228]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055de:	e03a      	b.n	8005656 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d020      	beq.n	800562a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055e8:	4b36      	ldr	r3, [pc, #216]	; (80056c4 <HAL_RCC_OscConfig+0x270>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ee:	f7fd fd85 	bl	80030fc <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f4:	e008      	b.n	8005608 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055f6:	f7fd fd81 	bl	80030fc <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e19b      	b.n	8005940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005608:	4b2d      	ldr	r3, [pc, #180]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0f0      	beq.n	80055f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005614:	4b2a      	ldr	r3, [pc, #168]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	4927      	ldr	r1, [pc, #156]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 8005624:	4313      	orrs	r3, r2
 8005626:	600b      	str	r3, [r1, #0]
 8005628:	e015      	b.n	8005656 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800562a:	4b26      	ldr	r3, [pc, #152]	; (80056c4 <HAL_RCC_OscConfig+0x270>)
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005630:	f7fd fd64 	bl	80030fc <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005638:	f7fd fd60 	bl	80030fc <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e17a      	b.n	8005940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564a:	4b1d      	ldr	r3, [pc, #116]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1f0      	bne.n	8005638 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d03a      	beq.n	80056d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d019      	beq.n	800569e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800566a:	4b17      	ldr	r3, [pc, #92]	; (80056c8 <HAL_RCC_OscConfig+0x274>)
 800566c:	2201      	movs	r2, #1
 800566e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005670:	f7fd fd44 	bl	80030fc <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005678:	f7fd fd40 	bl	80030fc <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e15a      	b.n	8005940 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568a:	4b0d      	ldr	r3, [pc, #52]	; (80056c0 <HAL_RCC_OscConfig+0x26c>)
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f0      	beq.n	8005678 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005696:	2001      	movs	r0, #1
 8005698:	f000 fada 	bl	8005c50 <RCC_Delay>
 800569c:	e01c      	b.n	80056d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800569e:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <HAL_RCC_OscConfig+0x274>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a4:	f7fd fd2a 	bl	80030fc <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056aa:	e00f      	b.n	80056cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056ac:	f7fd fd26 	bl	80030fc <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d908      	bls.n	80056cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e140      	b.n	8005940 <HAL_RCC_OscConfig+0x4ec>
 80056be:	bf00      	nop
 80056c0:	40021000 	.word	0x40021000
 80056c4:	42420000 	.word	0x42420000
 80056c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056cc:	4b9e      	ldr	r3, [pc, #632]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e9      	bne.n	80056ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 80a6 	beq.w	8005832 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056e6:	2300      	movs	r3, #0
 80056e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ea:	4b97      	ldr	r3, [pc, #604]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10d      	bne.n	8005712 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056f6:	4b94      	ldr	r3, [pc, #592]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	4a93      	ldr	r2, [pc, #588]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 80056fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005700:	61d3      	str	r3, [r2, #28]
 8005702:	4b91      	ldr	r3, [pc, #580]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570a:	60bb      	str	r3, [r7, #8]
 800570c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800570e:	2301      	movs	r3, #1
 8005710:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005712:	4b8e      	ldr	r3, [pc, #568]	; (800594c <HAL_RCC_OscConfig+0x4f8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d118      	bne.n	8005750 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800571e:	4b8b      	ldr	r3, [pc, #556]	; (800594c <HAL_RCC_OscConfig+0x4f8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a8a      	ldr	r2, [pc, #552]	; (800594c <HAL_RCC_OscConfig+0x4f8>)
 8005724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800572a:	f7fd fce7 	bl	80030fc <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005732:	f7fd fce3 	bl	80030fc <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b64      	cmp	r3, #100	; 0x64
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e0fd      	b.n	8005940 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005744:	4b81      	ldr	r3, [pc, #516]	; (800594c <HAL_RCC_OscConfig+0x4f8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f0      	beq.n	8005732 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d106      	bne.n	8005766 <HAL_RCC_OscConfig+0x312>
 8005758:	4b7b      	ldr	r3, [pc, #492]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	4a7a      	ldr	r2, [pc, #488]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	6213      	str	r3, [r2, #32]
 8005764:	e02d      	b.n	80057c2 <HAL_RCC_OscConfig+0x36e>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10c      	bne.n	8005788 <HAL_RCC_OscConfig+0x334>
 800576e:	4b76      	ldr	r3, [pc, #472]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	4a75      	ldr	r2, [pc, #468]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 8005774:	f023 0301 	bic.w	r3, r3, #1
 8005778:	6213      	str	r3, [r2, #32]
 800577a:	4b73      	ldr	r3, [pc, #460]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	4a72      	ldr	r2, [pc, #456]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 8005780:	f023 0304 	bic.w	r3, r3, #4
 8005784:	6213      	str	r3, [r2, #32]
 8005786:	e01c      	b.n	80057c2 <HAL_RCC_OscConfig+0x36e>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	2b05      	cmp	r3, #5
 800578e:	d10c      	bne.n	80057aa <HAL_RCC_OscConfig+0x356>
 8005790:	4b6d      	ldr	r3, [pc, #436]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	4a6c      	ldr	r2, [pc, #432]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 8005796:	f043 0304 	orr.w	r3, r3, #4
 800579a:	6213      	str	r3, [r2, #32]
 800579c:	4b6a      	ldr	r3, [pc, #424]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	4a69      	ldr	r2, [pc, #420]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 80057a2:	f043 0301 	orr.w	r3, r3, #1
 80057a6:	6213      	str	r3, [r2, #32]
 80057a8:	e00b      	b.n	80057c2 <HAL_RCC_OscConfig+0x36e>
 80057aa:	4b67      	ldr	r3, [pc, #412]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	4a66      	ldr	r2, [pc, #408]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 80057b0:	f023 0301 	bic.w	r3, r3, #1
 80057b4:	6213      	str	r3, [r2, #32]
 80057b6:	4b64      	ldr	r3, [pc, #400]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	4a63      	ldr	r2, [pc, #396]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 80057bc:	f023 0304 	bic.w	r3, r3, #4
 80057c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d015      	beq.n	80057f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057ca:	f7fd fc97 	bl	80030fc <HAL_GetTick>
 80057ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d0:	e00a      	b.n	80057e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d2:	f7fd fc93 	bl	80030fc <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e0ab      	b.n	8005940 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e8:	4b57      	ldr	r3, [pc, #348]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0ee      	beq.n	80057d2 <HAL_RCC_OscConfig+0x37e>
 80057f4:	e014      	b.n	8005820 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057f6:	f7fd fc81 	bl	80030fc <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057fc:	e00a      	b.n	8005814 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057fe:	f7fd fc7d 	bl	80030fc <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	f241 3288 	movw	r2, #5000	; 0x1388
 800580c:	4293      	cmp	r3, r2
 800580e:	d901      	bls.n	8005814 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e095      	b.n	8005940 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005814:	4b4c      	ldr	r3, [pc, #304]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1ee      	bne.n	80057fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005820:	7dfb      	ldrb	r3, [r7, #23]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d105      	bne.n	8005832 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005826:	4b48      	ldr	r3, [pc, #288]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	4a47      	ldr	r2, [pc, #284]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 800582c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005830:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 8081 	beq.w	800593e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800583c:	4b42      	ldr	r3, [pc, #264]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f003 030c 	and.w	r3, r3, #12
 8005844:	2b08      	cmp	r3, #8
 8005846:	d061      	beq.n	800590c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	2b02      	cmp	r3, #2
 800584e:	d146      	bne.n	80058de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005850:	4b3f      	ldr	r3, [pc, #252]	; (8005950 <HAL_RCC_OscConfig+0x4fc>)
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005856:	f7fd fc51 	bl	80030fc <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800585e:	f7fd fc4d 	bl	80030fc <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e067      	b.n	8005940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005870:	4b35      	ldr	r3, [pc, #212]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1f0      	bne.n	800585e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005884:	d108      	bne.n	8005898 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005886:	4b30      	ldr	r3, [pc, #192]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	492d      	ldr	r1, [pc, #180]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 8005894:	4313      	orrs	r3, r2
 8005896:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005898:	4b2b      	ldr	r3, [pc, #172]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a19      	ldr	r1, [r3, #32]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	430b      	orrs	r3, r1
 80058aa:	4927      	ldr	r1, [pc, #156]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058b0:	4b27      	ldr	r3, [pc, #156]	; (8005950 <HAL_RCC_OscConfig+0x4fc>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b6:	f7fd fc21 	bl	80030fc <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058be:	f7fd fc1d 	bl	80030fc <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e037      	b.n	8005940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058d0:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0f0      	beq.n	80058be <HAL_RCC_OscConfig+0x46a>
 80058dc:	e02f      	b.n	800593e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058de:	4b1c      	ldr	r3, [pc, #112]	; (8005950 <HAL_RCC_OscConfig+0x4fc>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e4:	f7fd fc0a 	bl	80030fc <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ec:	f7fd fc06 	bl	80030fc <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e020      	b.n	8005940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058fe:	4b12      	ldr	r3, [pc, #72]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f0      	bne.n	80058ec <HAL_RCC_OscConfig+0x498>
 800590a:	e018      	b.n	800593e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e013      	b.n	8005940 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005918:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <HAL_RCC_OscConfig+0x4f4>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	429a      	cmp	r2, r3
 800592a:	d106      	bne.n	800593a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005936:	429a      	cmp	r2, r3
 8005938:	d001      	beq.n	800593e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	40021000 	.word	0x40021000
 800594c:	40007000 	.word	0x40007000
 8005950:	42420060 	.word	0x42420060

08005954 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0d0      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005968:	4b6a      	ldr	r3, [pc, #424]	; (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d910      	bls.n	8005998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005976:	4b67      	ldr	r3, [pc, #412]	; (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f023 0207 	bic.w	r2, r3, #7
 800597e:	4965      	ldr	r1, [pc, #404]	; (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	4313      	orrs	r3, r2
 8005984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005986:	4b63      	ldr	r3, [pc, #396]	; (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d001      	beq.n	8005998 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e0b8      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d020      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059b0:	4b59      	ldr	r3, [pc, #356]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	4a58      	ldr	r2, [pc, #352]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059c8:	4b53      	ldr	r3, [pc, #332]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	4a52      	ldr	r2, [pc, #328]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80059d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059d4:	4b50      	ldr	r3, [pc, #320]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	494d      	ldr	r1, [pc, #308]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d040      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d107      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059fa:	4b47      	ldr	r3, [pc, #284]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d115      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e07f      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d107      	bne.n	8005a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a12:	4b41      	ldr	r3, [pc, #260]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d109      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e073      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a22:	4b3d      	ldr	r3, [pc, #244]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e06b      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a32:	4b39      	ldr	r3, [pc, #228]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f023 0203 	bic.w	r2, r3, #3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	4936      	ldr	r1, [pc, #216]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a44:	f7fd fb5a 	bl	80030fc <HAL_GetTick>
 8005a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a4a:	e00a      	b.n	8005a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a4c:	f7fd fb56 	bl	80030fc <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e053      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a62:	4b2d      	ldr	r3, [pc, #180]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f003 020c 	and.w	r2, r3, #12
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d1eb      	bne.n	8005a4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a74:	4b27      	ldr	r3, [pc, #156]	; (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d210      	bcs.n	8005aa4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a82:	4b24      	ldr	r3, [pc, #144]	; (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f023 0207 	bic.w	r2, r3, #7
 8005a8a:	4922      	ldr	r1, [pc, #136]	; (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a92:	4b20      	ldr	r3, [pc, #128]	; (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d001      	beq.n	8005aa4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e032      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d008      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ab0:	4b19      	ldr	r3, [pc, #100]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	4916      	ldr	r1, [pc, #88]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d009      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ace:	4b12      	ldr	r3, [pc, #72]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	490e      	ldr	r1, [pc, #56]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ae2:	f000 f821 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 8005ae6:	4601      	mov	r1, r0
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	091b      	lsrs	r3, r3, #4
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	4a0a      	ldr	r2, [pc, #40]	; (8005b1c <HAL_RCC_ClockConfig+0x1c8>)
 8005af4:	5cd3      	ldrb	r3, [r2, r3]
 8005af6:	fa21 f303 	lsr.w	r3, r1, r3
 8005afa:	4a09      	ldr	r2, [pc, #36]	; (8005b20 <HAL_RCC_ClockConfig+0x1cc>)
 8005afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005afe:	4b09      	ldr	r3, [pc, #36]	; (8005b24 <HAL_RCC_ClockConfig+0x1d0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fd fab8 	bl	8003078 <HAL_InitTick>

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	40022000 	.word	0x40022000
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	08009138 	.word	0x08009138
 8005b20:	20000018 	.word	0x20000018
 8005b24:	2000001c 	.word	0x2000001c

08005b28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b28:	b490      	push	{r4, r7}
 8005b2a:	b08a      	sub	sp, #40	; 0x28
 8005b2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005b2e:	4b2a      	ldr	r3, [pc, #168]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005b30:	1d3c      	adds	r4, r7, #4
 8005b32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005b38:	4b28      	ldr	r3, [pc, #160]	; (8005bdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61fb      	str	r3, [r7, #28]
 8005b42:	2300      	movs	r3, #0
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	2300      	movs	r3, #0
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005b52:	4b23      	ldr	r3, [pc, #140]	; (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f003 030c 	and.w	r3, r3, #12
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d002      	beq.n	8005b68 <HAL_RCC_GetSysClockFreq+0x40>
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d003      	beq.n	8005b6e <HAL_RCC_GetSysClockFreq+0x46>
 8005b66:	e02d      	b.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b68:	4b1e      	ldr	r3, [pc, #120]	; (8005be4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b6a:	623b      	str	r3, [r7, #32]
      break;
 8005b6c:	e02d      	b.n	8005bca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	0c9b      	lsrs	r3, r3, #18
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005b80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d013      	beq.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b8c:	4b14      	ldr	r3, [pc, #80]	; (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	0c5b      	lsrs	r3, r3, #17
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005ba0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	4a0f      	ldr	r2, [pc, #60]	; (8005be4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ba6:	fb02 f203 	mul.w	r2, r2, r3
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb2:	e004      	b.n	8005bbe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	4a0c      	ldr	r2, [pc, #48]	; (8005be8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005bb8:	fb02 f303 	mul.w	r3, r2, r3
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	623b      	str	r3, [r7, #32]
      break;
 8005bc2:	e002      	b.n	8005bca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005bc4:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005bc6:	623b      	str	r3, [r7, #32]
      break;
 8005bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bca:	6a3b      	ldr	r3, [r7, #32]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3728      	adds	r7, #40	; 0x28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc90      	pop	{r4, r7}
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	08009124 	.word	0x08009124
 8005bdc:	08009134 	.word	0x08009134
 8005be0:	40021000 	.word	0x40021000
 8005be4:	007a1200 	.word	0x007a1200
 8005be8:	003d0900 	.word	0x003d0900

08005bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bf0:	4b02      	ldr	r3, [pc, #8]	; (8005bfc <HAL_RCC_GetHCLKFreq+0x10>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr
 8005bfc:	20000018 	.word	0x20000018

08005c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c04:	f7ff fff2 	bl	8005bec <HAL_RCC_GetHCLKFreq>
 8005c08:	4601      	mov	r1, r0
 8005c0a:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	0a1b      	lsrs	r3, r3, #8
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	4a03      	ldr	r2, [pc, #12]	; (8005c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c16:	5cd3      	ldrb	r3, [r2, r3]
 8005c18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40021000 	.word	0x40021000
 8005c24:	08009148 	.word	0x08009148

08005c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c2c:	f7ff ffde 	bl	8005bec <HAL_RCC_GetHCLKFreq>
 8005c30:	4601      	mov	r1, r0
 8005c32:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	0adb      	lsrs	r3, r3, #11
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	4a03      	ldr	r2, [pc, #12]	; (8005c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c3e:	5cd3      	ldrb	r3, [r2, r3]
 8005c40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	08009148 	.word	0x08009148

08005c50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c58:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <RCC_Delay+0x34>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a0a      	ldr	r2, [pc, #40]	; (8005c88 <RCC_Delay+0x38>)
 8005c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c62:	0a5b      	lsrs	r3, r3, #9
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	fb02 f303 	mul.w	r3, r2, r3
 8005c6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005c6c:	bf00      	nop
  }
  while (Delay --);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	1e5a      	subs	r2, r3, #1
 8005c72:	60fa      	str	r2, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f9      	bne.n	8005c6c <RCC_Delay+0x1c>
}
 8005c78:	bf00      	nop
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	20000018 	.word	0x20000018
 8005c88:	10624dd3 	.word	0x10624dd3

08005c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e041      	b.n	8005d22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d106      	bne.n	8005cb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fd f8b6 	bl	8002e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	f000 fb14 	bl	80062f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d001      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e03a      	b.n	8005dba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a18      	ldr	r2, [pc, #96]	; (8005dc4 <HAL_TIM_Base_Start_IT+0x98>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00e      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0x58>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6e:	d009      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0x58>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a14      	ldr	r2, [pc, #80]	; (8005dc8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d004      	beq.n	8005d84 <HAL_TIM_Base_Start_IT+0x58>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a13      	ldr	r2, [pc, #76]	; (8005dcc <HAL_TIM_Base_Start_IT+0xa0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d111      	bne.n	8005da8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b06      	cmp	r3, #6
 8005d94:	d010      	beq.n	8005db8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0201 	orr.w	r2, r2, #1
 8005da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da6:	e007      	b.n	8005db8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0201 	orr.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr
 8005dc4:	40012c00 	.word	0x40012c00
 8005dc8:	40000400 	.word	0x40000400
 8005dcc:	40000800 	.word	0x40000800

08005dd0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e041      	b.n	8005e66 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f839 	bl	8005e6e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4610      	mov	r0, r2
 8005e10:	f000 fa72 	bl	80062f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d122      	bne.n	8005edc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d11b      	bne.n	8005edc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f06f 0202 	mvn.w	r2, #2
 8005eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f9fc 	bl	80062c0 <HAL_TIM_IC_CaptureCallback>
 8005ec8:	e005      	b.n	8005ed6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f9ef 	bl	80062ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f9fe 	bl	80062d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 0304 	and.w	r3, r3, #4
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	d122      	bne.n	8005f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d11b      	bne.n	8005f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f06f 0204 	mvn.w	r2, #4
 8005f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2202      	movs	r2, #2
 8005f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f9d2 	bl	80062c0 <HAL_TIM_IC_CaptureCallback>
 8005f1c:	e005      	b.n	8005f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f9c5 	bl	80062ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f9d4 	bl	80062d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b08      	cmp	r3, #8
 8005f3c:	d122      	bne.n	8005f84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f003 0308 	and.w	r3, r3, #8
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d11b      	bne.n	8005f84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f06f 0208 	mvn.w	r2, #8
 8005f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2204      	movs	r2, #4
 8005f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f9a8 	bl	80062c0 <HAL_TIM_IC_CaptureCallback>
 8005f70:	e005      	b.n	8005f7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f99b 	bl	80062ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f9aa 	bl	80062d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f003 0310 	and.w	r3, r3, #16
 8005f8e:	2b10      	cmp	r3, #16
 8005f90:	d122      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f003 0310 	and.w	r3, r3, #16
 8005f9c:	2b10      	cmp	r3, #16
 8005f9e:	d11b      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f06f 0210 	mvn.w	r2, #16
 8005fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2208      	movs	r2, #8
 8005fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f97e 	bl	80062c0 <HAL_TIM_IC_CaptureCallback>
 8005fc4:	e005      	b.n	8005fd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f971 	bl	80062ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f980 	bl	80062d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d10e      	bne.n	8006004 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d107      	bne.n	8006004 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0201 	mvn.w	r2, #1
 8005ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fb fbe8 	bl	80017d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600e:	2b80      	cmp	r3, #128	; 0x80
 8006010:	d10e      	bne.n	8006030 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601c:	2b80      	cmp	r3, #128	; 0x80
 800601e:	d107      	bne.n	8006030 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fc4b 	bl	80068c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d10e      	bne.n	800605c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	2b40      	cmp	r3, #64	; 0x40
 800604a:	d107      	bne.n	800605c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f944 	bl	80062e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b20      	cmp	r3, #32
 8006068:	d10e      	bne.n	8006088 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f003 0320 	and.w	r3, r3, #32
 8006074:	2b20      	cmp	r3, #32
 8006076:	d107      	bne.n	8006088 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0220 	mvn.w	r2, #32
 8006080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fc16 	bl	80068b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006088:	bf00      	nop
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <HAL_TIM_OC_ConfigChannel+0x1a>
 80060a6:	2302      	movs	r3, #2
 80060a8:	e046      	b.n	8006138 <HAL_TIM_OC_ConfigChannel+0xa8>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b0c      	cmp	r3, #12
 80060b6:	d839      	bhi.n	800612c <HAL_TIM_OC_ConfigChannel+0x9c>
 80060b8:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <HAL_TIM_OC_ConfigChannel+0x30>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	080060f5 	.word	0x080060f5
 80060c4:	0800612d 	.word	0x0800612d
 80060c8:	0800612d 	.word	0x0800612d
 80060cc:	0800612d 	.word	0x0800612d
 80060d0:	08006103 	.word	0x08006103
 80060d4:	0800612d 	.word	0x0800612d
 80060d8:	0800612d 	.word	0x0800612d
 80060dc:	0800612d 	.word	0x0800612d
 80060e0:	08006111 	.word	0x08006111
 80060e4:	0800612d 	.word	0x0800612d
 80060e8:	0800612d 	.word	0x0800612d
 80060ec:	0800612d 	.word	0x0800612d
 80060f0:	0800611f 	.word	0x0800611f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 f95e 	bl	80063bc <TIM_OC1_SetConfig>
      break;
 8006100:	e015      	b.n	800612e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	4618      	mov	r0, r3
 800610a:	f000 f9bd 	bl	8006488 <TIM_OC2_SetConfig>
      break;
 800610e:	e00e      	b.n	800612e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fa20 	bl	800655c <TIM_OC3_SetConfig>
      break;
 800611c:	e007      	b.n	800612e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68b9      	ldr	r1, [r7, #8]
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fa83 	bl	8006630 <TIM_OC4_SetConfig>
      break;
 800612a:	e000      	b.n	800612e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800612c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006150:	2b01      	cmp	r3, #1
 8006152:	d101      	bne.n	8006158 <HAL_TIM_ConfigClockSource+0x18>
 8006154:	2302      	movs	r3, #2
 8006156:	e0a6      	b.n	80062a6 <HAL_TIM_ConfigClockSource+0x166>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006176:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800617e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b40      	cmp	r3, #64	; 0x40
 800618e:	d067      	beq.n	8006260 <HAL_TIM_ConfigClockSource+0x120>
 8006190:	2b40      	cmp	r3, #64	; 0x40
 8006192:	d80b      	bhi.n	80061ac <HAL_TIM_ConfigClockSource+0x6c>
 8006194:	2b10      	cmp	r3, #16
 8006196:	d073      	beq.n	8006280 <HAL_TIM_ConfigClockSource+0x140>
 8006198:	2b10      	cmp	r3, #16
 800619a:	d802      	bhi.n	80061a2 <HAL_TIM_ConfigClockSource+0x62>
 800619c:	2b00      	cmp	r3, #0
 800619e:	d06f      	beq.n	8006280 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80061a0:	e078      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	d06c      	beq.n	8006280 <HAL_TIM_ConfigClockSource+0x140>
 80061a6:	2b30      	cmp	r3, #48	; 0x30
 80061a8:	d06a      	beq.n	8006280 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80061aa:	e073      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061ac:	2b70      	cmp	r3, #112	; 0x70
 80061ae:	d00d      	beq.n	80061cc <HAL_TIM_ConfigClockSource+0x8c>
 80061b0:	2b70      	cmp	r3, #112	; 0x70
 80061b2:	d804      	bhi.n	80061be <HAL_TIM_ConfigClockSource+0x7e>
 80061b4:	2b50      	cmp	r3, #80	; 0x50
 80061b6:	d033      	beq.n	8006220 <HAL_TIM_ConfigClockSource+0xe0>
 80061b8:	2b60      	cmp	r3, #96	; 0x60
 80061ba:	d041      	beq.n	8006240 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80061bc:	e06a      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c2:	d066      	beq.n	8006292 <HAL_TIM_ConfigClockSource+0x152>
 80061c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061c8:	d017      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0xba>
      break;
 80061ca:	e063      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6818      	ldr	r0, [r3, #0]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	6899      	ldr	r1, [r3, #8]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f000 faed 	bl	80067ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	609a      	str	r2, [r3, #8]
      break;
 80061f8:	e04c      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6818      	ldr	r0, [r3, #0]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	6899      	ldr	r1, [r3, #8]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f000 fad6 	bl	80067ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800621c:	609a      	str	r2, [r3, #8]
      break;
 800621e:	e039      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	6859      	ldr	r1, [r3, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	461a      	mov	r2, r3
 800622e:	f000 fa4d 	bl	80066cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2150      	movs	r1, #80	; 0x50
 8006238:	4618      	mov	r0, r3
 800623a:	f000 faa4 	bl	8006786 <TIM_ITRx_SetConfig>
      break;
 800623e:	e029      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6818      	ldr	r0, [r3, #0]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	6859      	ldr	r1, [r3, #4]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	461a      	mov	r2, r3
 800624e:	f000 fa6b 	bl	8006728 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2160      	movs	r1, #96	; 0x60
 8006258:	4618      	mov	r0, r3
 800625a:	f000 fa94 	bl	8006786 <TIM_ITRx_SetConfig>
      break;
 800625e:	e019      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	6859      	ldr	r1, [r3, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	461a      	mov	r2, r3
 800626e:	f000 fa2d 	bl	80066cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2140      	movs	r1, #64	; 0x40
 8006278:	4618      	mov	r0, r3
 800627a:	f000 fa84 	bl	8006786 <TIM_ITRx_SetConfig>
      break;
 800627e:	e009      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4619      	mov	r1, r3
 800628a:	4610      	mov	r0, r2
 800628c:	f000 fa7b 	bl	8006786 <TIM_ITRx_SetConfig>
        break;
 8006290:	e000      	b.n	8006294 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bc80      	pop	{r7}
 80062be:	4770      	bx	lr

080062c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bc80      	pop	{r7}
 80062d0:	4770      	bx	lr

080062d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bc80      	pop	{r7}
 80062f4:	4770      	bx	lr
	...

080062f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a29      	ldr	r2, [pc, #164]	; (80063b0 <TIM_Base_SetConfig+0xb8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00b      	beq.n	8006328 <TIM_Base_SetConfig+0x30>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006316:	d007      	beq.n	8006328 <TIM_Base_SetConfig+0x30>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a26      	ldr	r2, [pc, #152]	; (80063b4 <TIM_Base_SetConfig+0xbc>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_Base_SetConfig+0x30>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a25      	ldr	r2, [pc, #148]	; (80063b8 <TIM_Base_SetConfig+0xc0>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d108      	bne.n	800633a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a1c      	ldr	r2, [pc, #112]	; (80063b0 <TIM_Base_SetConfig+0xb8>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d00b      	beq.n	800635a <TIM_Base_SetConfig+0x62>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006348:	d007      	beq.n	800635a <TIM_Base_SetConfig+0x62>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a19      	ldr	r2, [pc, #100]	; (80063b4 <TIM_Base_SetConfig+0xbc>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d003      	beq.n	800635a <TIM_Base_SetConfig+0x62>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a18      	ldr	r2, [pc, #96]	; (80063b8 <TIM_Base_SetConfig+0xc0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d108      	bne.n	800636c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	4313      	orrs	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a07      	ldr	r2, [pc, #28]	; (80063b0 <TIM_Base_SetConfig+0xb8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d103      	bne.n	80063a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	691a      	ldr	r2, [r3, #16]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	615a      	str	r2, [r3, #20]
}
 80063a6:	bf00      	nop
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bc80      	pop	{r7}
 80063ae:	4770      	bx	lr
 80063b0:	40012c00 	.word	0x40012c00
 80063b4:	40000400 	.word	0x40000400
 80063b8:	40000800 	.word	0x40000800

080063bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	f023 0201 	bic.w	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0303 	bic.w	r3, r3, #3
 80063f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f023 0302 	bic.w	r3, r3, #2
 8006404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a1c      	ldr	r2, [pc, #112]	; (8006484 <TIM_OC1_SetConfig+0xc8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d10c      	bne.n	8006432 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f023 0308 	bic.w	r3, r3, #8
 800641e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f023 0304 	bic.w	r3, r3, #4
 8006430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a13      	ldr	r2, [pc, #76]	; (8006484 <TIM_OC1_SetConfig+0xc8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d111      	bne.n	800645e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	621a      	str	r2, [r3, #32]
}
 8006478:	bf00      	nop
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	bc80      	pop	{r7}
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40012c00 	.word	0x40012c00

08006488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	f023 0210 	bic.w	r2, r3, #16
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f023 0320 	bic.w	r3, r3, #32
 80064d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a1d      	ldr	r2, [pc, #116]	; (8006558 <TIM_OC2_SetConfig+0xd0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d10d      	bne.n	8006504 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a14      	ldr	r2, [pc, #80]	; (8006558 <TIM_OC2_SetConfig+0xd0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d113      	bne.n	8006534 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800651a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	621a      	str	r2, [r3, #32]
}
 800654e:	bf00      	nop
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr
 8006558:	40012c00 	.word	0x40012c00

0800655c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0303 	bic.w	r3, r3, #3
 8006592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	021b      	lsls	r3, r3, #8
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1d      	ldr	r2, [pc, #116]	; (800662c <TIM_OC3_SetConfig+0xd0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d10d      	bne.n	80065d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a14      	ldr	r2, [pc, #80]	; (800662c <TIM_OC3_SetConfig+0xd0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d113      	bne.n	8006606 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	621a      	str	r2, [r3, #32]
}
 8006620:	bf00      	nop
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	bc80      	pop	{r7}
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	40012c00 	.word	0x40012c00

08006630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800667a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	031b      	lsls	r3, r3, #12
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a0f      	ldr	r2, [pc, #60]	; (80066c8 <TIM_OC4_SetConfig+0x98>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d109      	bne.n	80066a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006696:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	019b      	lsls	r3, r3, #6
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	621a      	str	r2, [r3, #32]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr
 80066c8:	40012c00 	.word	0x40012c00

080066cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	f023 0201 	bic.w	r2, r3, #1
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f023 030a 	bic.w	r3, r3, #10
 8006708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	621a      	str	r2, [r3, #32]
}
 800671e:	bf00      	nop
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	f023 0210 	bic.w	r2, r3, #16
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006752:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	031b      	lsls	r3, r3, #12
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006764:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	621a      	str	r2, [r3, #32]
}
 800677c:	bf00      	nop
 800677e:	371c      	adds	r7, #28
 8006780:	46bd      	mov	sp, r7
 8006782:	bc80      	pop	{r7}
 8006784:	4770      	bx	lr

08006786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006786:	b480      	push	{r7}
 8006788:	b085      	sub	sp, #20
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	f043 0307 	orr.w	r3, r3, #7
 80067a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	609a      	str	r2, [r3, #8]
}
 80067b0:	bf00      	nop
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr

080067ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b087      	sub	sp, #28
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
 80067c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	021a      	lsls	r2, r3, #8
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	431a      	orrs	r2, r3
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	609a      	str	r2, [r3, #8]
}
 80067ee:	bf00      	nop
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr

080067f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800680c:	2302      	movs	r3, #2
 800680e:	e046      	b.n	800689e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a16      	ldr	r2, [pc, #88]	; (80068a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d00e      	beq.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685c:	d009      	beq.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a12      	ldr	r2, [pc, #72]	; (80068ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d004      	beq.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a10      	ldr	r2, [pc, #64]	; (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d10c      	bne.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	4313      	orrs	r3, r2
 8006882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bc80      	pop	{r7}
 80068a6:	4770      	bx	lr
 80068a8:	40012c00 	.word	0x40012c00
 80068ac:	40000400 	.word	0x40000400
 80068b0:	40000800 	.word	0x40000800

080068b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bc80      	pop	{r7}
 80068c4:	4770      	bx	lr

080068c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bc80      	pop	{r7}
 80068d6:	4770      	bx	lr

080068d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e03f      	b.n	800696a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fc fb08 	bl	8002f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2224      	movs	r2, #36	; 0x24
 8006908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800691a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fc59 	bl	80071d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	691a      	ldr	r2, [r3, #16]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	695a      	ldr	r2, [r3, #20]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2220      	movs	r2, #32
 800695c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2220      	movs	r2, #32
 8006964:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b08a      	sub	sp, #40	; 0x28
 8006976:	af02      	add	r7, sp, #8
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	603b      	str	r3, [r7, #0]
 800697e:	4613      	mov	r3, r2
 8006980:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b20      	cmp	r3, #32
 8006990:	d17c      	bne.n	8006a8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <HAL_UART_Transmit+0x2c>
 8006998:	88fb      	ldrh	r3, [r7, #6]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e075      	b.n	8006a8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d101      	bne.n	80069b0 <HAL_UART_Transmit+0x3e>
 80069ac:	2302      	movs	r3, #2
 80069ae:	e06e      	b.n	8006a8e <HAL_UART_Transmit+0x11c>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2221      	movs	r2, #33	; 0x21
 80069c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80069c6:	f7fc fb99 	bl	80030fc <HAL_GetTick>
 80069ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	88fa      	ldrh	r2, [r7, #6]
 80069d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	88fa      	ldrh	r2, [r7, #6]
 80069d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e0:	d108      	bne.n	80069f4 <HAL_UART_Transmit+0x82>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d104      	bne.n	80069f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	61bb      	str	r3, [r7, #24]
 80069f2:	e003      	b.n	80069fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069f8:	2300      	movs	r3, #0
 80069fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006a04:	e02a      	b.n	8006a5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2180      	movs	r1, #128	; 0x80
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 fa68 	bl	8006ee6 <UART_WaitOnFlagUntilTimeout>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e036      	b.n	8006a8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10b      	bne.n	8006a3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	3302      	adds	r3, #2
 8006a3a:	61bb      	str	r3, [r7, #24]
 8006a3c:	e007      	b.n	8006a4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	781a      	ldrb	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1cf      	bne.n	8006a06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	2140      	movs	r1, #64	; 0x40
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 fa38 	bl	8006ee6 <UART_WaitOnFlagUntilTimeout>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e006      	b.n	8006a8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	e000      	b.n	8006a8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a8c:	2302      	movs	r3, #2
  }
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3720      	adds	r7, #32
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d166      	bne.n	8006b80 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <HAL_UART_Receive_DMA+0x26>
 8006ab8:	88fb      	ldrh	r3, [r7, #6]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e05f      	b.n	8006b82 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d101      	bne.n	8006ad0 <HAL_UART_Receive_DMA+0x38>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e058      	b.n	8006b82 <HAL_UART_Receive_DMA+0xea>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	88fa      	ldrh	r2, [r7, #6]
 8006ae2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2222      	movs	r2, #34	; 0x22
 8006aee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af6:	4a25      	ldr	r2, [pc, #148]	; (8006b8c <HAL_UART_Receive_DMA+0xf4>)
 8006af8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afe:	4a24      	ldr	r2, [pc, #144]	; (8006b90 <HAL_UART_Receive_DMA+0xf8>)
 8006b00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b06:	4a23      	ldr	r2, [pc, #140]	; (8006b94 <HAL_UART_Receive_DMA+0xfc>)
 8006b08:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0e:	2200      	movs	r2, #0
 8006b10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8006b12:	f107 0308 	add.w	r3, r7, #8
 8006b16:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3304      	adds	r3, #4
 8006b22:	4619      	mov	r1, r3
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	88fb      	ldrh	r3, [r7, #6]
 8006b2a:	f7fc fc59 	bl	80033e0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006b2e:	2300      	movs	r3, #0
 8006b30:	613b      	str	r3, [r7, #16]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68da      	ldr	r2, [r3, #12]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b5a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	695a      	ldr	r2, [r3, #20]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0201 	orr.w	r2, r2, #1
 8006b6a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	695a      	ldr	r2, [r3, #20]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b7a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e000      	b.n	8006b82 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006b80:	2302      	movs	r3, #2
  }
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3718      	adds	r7, #24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	08006dcf 	.word	0x08006dcf
 8006b90:	08006e37 	.word	0x08006e37
 8006b94:	08006e53 	.word	0x08006e53

08006b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b088      	sub	sp, #32
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	f003 030f 	and.w	r3, r3, #15
 8006bc6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10d      	bne.n	8006bea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d008      	beq.n	8006bea <HAL_UART_IRQHandler+0x52>
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fa76 	bl	80070d4 <UART_Receive_IT>
      return;
 8006be8:	e0d1      	b.n	8006d8e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 80b0 	beq.w	8006d52 <HAL_UART_IRQHandler+0x1ba>
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d105      	bne.n	8006c08 <HAL_UART_IRQHandler+0x70>
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 80a5 	beq.w	8006d52 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <HAL_UART_IRQHandler+0x90>
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d005      	beq.n	8006c28 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c20:	f043 0201 	orr.w	r2, r3, #1
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <HAL_UART_IRQHandler+0xb0>
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d005      	beq.n	8006c48 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c40:	f043 0202 	orr.w	r2, r3, #2
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00a      	beq.n	8006c68 <HAL_UART_IRQHandler+0xd0>
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c60:	f043 0204 	orr.w	r2, r3, #4
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	f003 0308 	and.w	r3, r3, #8
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00f      	beq.n	8006c92 <HAL_UART_IRQHandler+0xfa>
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	f003 0320 	and.w	r3, r3, #32
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d104      	bne.n	8006c86 <HAL_UART_IRQHandler+0xee>
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d005      	beq.n	8006c92 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	f043 0208 	orr.w	r2, r3, #8
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d078      	beq.n	8006d8c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	f003 0320 	and.w	r3, r3, #32
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d007      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x11c>
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	f003 0320 	and.w	r3, r3, #32
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fa10 	bl	80070d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	bf14      	ite	ne
 8006cc2:	2301      	movne	r3, #1
 8006cc4:	2300      	moveq	r3, #0
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cce:	f003 0308 	and.w	r3, r3, #8
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d102      	bne.n	8006cdc <HAL_UART_IRQHandler+0x144>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d031      	beq.n	8006d40 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f961 	bl	8006fa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d023      	beq.n	8006d38 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	695a      	ldr	r2, [r3, #20]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cfe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d013      	beq.n	8006d30 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0c:	4a21      	ldr	r2, [pc, #132]	; (8006d94 <HAL_UART_IRQHandler+0x1fc>)
 8006d0e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fc fbc3 	bl	80034a0 <HAL_DMA_Abort_IT>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d016      	beq.n	8006d4e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2e:	e00e      	b.n	8006d4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f843 	bl	8006dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d36:	e00a      	b.n	8006d4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f83f 	bl	8006dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d3e:	e006      	b.n	8006d4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f83b 	bl	8006dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006d4c:	e01e      	b.n	8006d8c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d4e:	bf00      	nop
    return;
 8006d50:	e01c      	b.n	8006d8c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d008      	beq.n	8006d6e <HAL_UART_IRQHandler+0x1d6>
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f94d 	bl	8007006 <UART_Transmit_IT>
    return;
 8006d6c:	e00f      	b.n	8006d8e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00a      	beq.n	8006d8e <HAL_UART_IRQHandler+0x1f6>
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d005      	beq.n	8006d8e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f98e 	bl	80070a4 <UART_EndTransmit_IT>
    return;
 8006d88:	bf00      	nop
 8006d8a:	e000      	b.n	8006d8e <HAL_UART_IRQHandler+0x1f6>
    return;
 8006d8c:	bf00      	nop
  }
}
 8006d8e:	3720      	adds	r7, #32
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	08006fdf 	.word	0x08006fdf

08006d98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bc80      	pop	{r7}
 8006da8:	4770      	bx	lr

08006daa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bc80      	pop	{r7}
 8006dba:	4770      	bx	lr

08006dbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bc80      	pop	{r7}
 8006dcc:	4770      	bx	lr

08006dce <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0320 	and.w	r3, r3, #32
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d11e      	bne.n	8006e28 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dfe:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	695a      	ldr	r2, [r3, #20]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0201 	bic.w	r2, r2, #1
 8006e0e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	695a      	ldr	r2, [r3, #20]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e1e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f7fa fc73 	bl	8001714 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e2e:	bf00      	nop
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f7ff ffb0 	bl	8006daa <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e4a:	bf00      	nop
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	bf14      	ite	ne
 8006e72:	2301      	movne	r3, #1
 8006e74:	2300      	moveq	r3, #0
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b21      	cmp	r3, #33	; 0x21
 8006e84:	d108      	bne.n	8006e98 <UART_DMAError+0x46>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d005      	beq.n	8006e98 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006e92:	68b8      	ldr	r0, [r7, #8]
 8006e94:	f000 f871 	bl	8006f7a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	bf14      	ite	ne
 8006ea6:	2301      	movne	r3, #1
 8006ea8:	2300      	moveq	r3, #0
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b22      	cmp	r3, #34	; 0x22
 8006eb8:	d108      	bne.n	8006ecc <UART_DMAError+0x7a>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d005      	beq.n	8006ecc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006ec6:	68b8      	ldr	r0, [r7, #8]
 8006ec8:	f000 f86c 	bl	8006fa4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed0:	f043 0210 	orr.w	r2, r3, #16
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ed8:	68b8      	ldr	r0, [r7, #8]
 8006eda:	f7ff ff6f 	bl	8006dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ede:	bf00      	nop
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	60f8      	str	r0, [r7, #12]
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	603b      	str	r3, [r7, #0]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ef6:	e02c      	b.n	8006f52 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006efe:	d028      	beq.n	8006f52 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d007      	beq.n	8006f16 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f06:	f7fc f8f9 	bl	80030fc <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d21d      	bcs.n	8006f52 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f24:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	695a      	ldr	r2, [r3, #20]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0201 	bic.w	r2, r2, #1
 8006f34:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e00f      	b.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	bf0c      	ite	eq
 8006f62:	2301      	moveq	r3, #1
 8006f64:	2300      	movne	r3, #0
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	461a      	mov	r2, r3
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d0c3      	beq.n	8006ef8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68da      	ldr	r2, [r3, #12]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006f90:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006f9a:	bf00      	nop
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bc80      	pop	{r7}
 8006fa2:	4770      	bx	lr

08006fa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695a      	ldr	r2, [r3, #20]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f022 0201 	bic.w	r2, r2, #1
 8006fca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bc80      	pop	{r7}
 8006fdc:	4770      	bx	lr

08006fde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f7ff fedf 	bl	8006dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ffe:	bf00      	nop
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007006:	b480      	push	{r7}
 8007008:	b085      	sub	sp, #20
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b21      	cmp	r3, #33	; 0x21
 8007018:	d13e      	bne.n	8007098 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007022:	d114      	bne.n	800704e <UART_Transmit_IT+0x48>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d110      	bne.n	800704e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007040:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	1c9a      	adds	r2, r3, #2
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	621a      	str	r2, [r3, #32]
 800704c:	e008      	b.n	8007060 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	1c59      	adds	r1, r3, #1
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6211      	str	r1, [r2, #32]
 8007058:	781a      	ldrb	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007064:	b29b      	uxth	r3, r3
 8007066:	3b01      	subs	r3, #1
 8007068:	b29b      	uxth	r3, r3
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	4619      	mov	r1, r3
 800706e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10f      	bne.n	8007094 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007082:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68da      	ldr	r2, [r3, #12]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007092:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	e000      	b.n	800709a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007098:	2302      	movs	r3, #2
  }
}
 800709a:	4618      	mov	r0, r3
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	bc80      	pop	{r7}
 80070a2:	4770      	bx	lr

080070a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff fe67 	bl	8006d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b22      	cmp	r3, #34	; 0x22
 80070e6:	d170      	bne.n	80071ca <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f0:	d117      	bne.n	8007122 <UART_Receive_IT+0x4e>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d113      	bne.n	8007122 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007102:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	b29b      	uxth	r3, r3
 800710c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007110:	b29a      	uxth	r2, r3
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711a:	1c9a      	adds	r2, r3, #2
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	629a      	str	r2, [r3, #40]	; 0x28
 8007120:	e026      	b.n	8007170 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007126:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007128:	2300      	movs	r3, #0
 800712a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007134:	d007      	beq.n	8007146 <UART_Receive_IT+0x72>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10a      	bne.n	8007154 <UART_Receive_IT+0x80>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	b2da      	uxtb	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	e008      	b.n	8007166 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	b2db      	uxtb	r3, r3
 800715c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007160:	b2da      	uxtb	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007174:	b29b      	uxth	r3, r3
 8007176:	3b01      	subs	r3, #1
 8007178:	b29b      	uxth	r3, r3
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	4619      	mov	r1, r3
 800717e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007180:	2b00      	cmp	r3, #0
 8007182:	d120      	bne.n	80071c6 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0220 	bic.w	r2, r2, #32
 8007192:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	695a      	ldr	r2, [r3, #20]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 0201 	bic.w	r2, r2, #1
 80071b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7fa faa9 	bl	8001714 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	e002      	b.n	80071cc <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	e000      	b.n	80071cc <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80071ca:	2302      	movs	r3, #2
  }
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68da      	ldr	r2, [r3, #12]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689a      	ldr	r2, [r3, #8]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	431a      	orrs	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800720e:	f023 030c 	bic.w	r3, r3, #12
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	6812      	ldr	r2, [r2, #0]
 8007216:	68b9      	ldr	r1, [r7, #8]
 8007218:	430b      	orrs	r3, r1
 800721a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699a      	ldr	r2, [r3, #24]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a2c      	ldr	r2, [pc, #176]	; (80072e8 <UART_SetConfig+0x114>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d103      	bne.n	8007244 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800723c:	f7fe fcf4 	bl	8005c28 <HAL_RCC_GetPCLK2Freq>
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	e002      	b.n	800724a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007244:	f7fe fcdc 	bl	8005c00 <HAL_RCC_GetPCLK1Freq>
 8007248:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	4613      	mov	r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	009a      	lsls	r2, r3, #2
 8007254:	441a      	add	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007260:	4a22      	ldr	r2, [pc, #136]	; (80072ec <UART_SetConfig+0x118>)
 8007262:	fba2 2303 	umull	r2, r3, r2, r3
 8007266:	095b      	lsrs	r3, r3, #5
 8007268:	0119      	lsls	r1, r3, #4
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4613      	mov	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	009a      	lsls	r2, r3, #2
 8007274:	441a      	add	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007280:	4b1a      	ldr	r3, [pc, #104]	; (80072ec <UART_SetConfig+0x118>)
 8007282:	fba3 0302 	umull	r0, r3, r3, r2
 8007286:	095b      	lsrs	r3, r3, #5
 8007288:	2064      	movs	r0, #100	; 0x64
 800728a:	fb00 f303 	mul.w	r3, r0, r3
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	3332      	adds	r3, #50	; 0x32
 8007294:	4a15      	ldr	r2, [pc, #84]	; (80072ec <UART_SetConfig+0x118>)
 8007296:	fba2 2303 	umull	r2, r3, r2, r3
 800729a:	095b      	lsrs	r3, r3, #5
 800729c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072a0:	4419      	add	r1, r3
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	4613      	mov	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	009a      	lsls	r2, r3, #2
 80072ac:	441a      	add	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80072b8:	4b0c      	ldr	r3, [pc, #48]	; (80072ec <UART_SetConfig+0x118>)
 80072ba:	fba3 0302 	umull	r0, r3, r3, r2
 80072be:	095b      	lsrs	r3, r3, #5
 80072c0:	2064      	movs	r0, #100	; 0x64
 80072c2:	fb00 f303 	mul.w	r3, r0, r3
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	3332      	adds	r3, #50	; 0x32
 80072cc:	4a07      	ldr	r2, [pc, #28]	; (80072ec <UART_SetConfig+0x118>)
 80072ce:	fba2 2303 	umull	r2, r3, r2, r3
 80072d2:	095b      	lsrs	r3, r3, #5
 80072d4:	f003 020f 	and.w	r2, r3, #15
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	440a      	add	r2, r1
 80072de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80072e0:	bf00      	nop
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	40013800 	.word	0x40013800
 80072ec:	51eb851f 	.word	0x51eb851f

080072f0 <atoi>:
 80072f0:	220a      	movs	r2, #10
 80072f2:	2100      	movs	r1, #0
 80072f4:	f000 b8ae 	b.w	8007454 <strtol>

080072f8 <__errno>:
 80072f8:	4b01      	ldr	r3, [pc, #4]	; (8007300 <__errno+0x8>)
 80072fa:	6818      	ldr	r0, [r3, #0]
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	20000024 	.word	0x20000024

08007304 <__libc_init_array>:
 8007304:	b570      	push	{r4, r5, r6, lr}
 8007306:	2500      	movs	r5, #0
 8007308:	4e0c      	ldr	r6, [pc, #48]	; (800733c <__libc_init_array+0x38>)
 800730a:	4c0d      	ldr	r4, [pc, #52]	; (8007340 <__libc_init_array+0x3c>)
 800730c:	1ba4      	subs	r4, r4, r6
 800730e:	10a4      	asrs	r4, r4, #2
 8007310:	42a5      	cmp	r5, r4
 8007312:	d109      	bne.n	8007328 <__libc_init_array+0x24>
 8007314:	f001 fee8 	bl	80090e8 <_init>
 8007318:	2500      	movs	r5, #0
 800731a:	4e0a      	ldr	r6, [pc, #40]	; (8007344 <__libc_init_array+0x40>)
 800731c:	4c0a      	ldr	r4, [pc, #40]	; (8007348 <__libc_init_array+0x44>)
 800731e:	1ba4      	subs	r4, r4, r6
 8007320:	10a4      	asrs	r4, r4, #2
 8007322:	42a5      	cmp	r5, r4
 8007324:	d105      	bne.n	8007332 <__libc_init_array+0x2e>
 8007326:	bd70      	pop	{r4, r5, r6, pc}
 8007328:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800732c:	4798      	blx	r3
 800732e:	3501      	adds	r5, #1
 8007330:	e7ee      	b.n	8007310 <__libc_init_array+0xc>
 8007332:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007336:	4798      	blx	r3
 8007338:	3501      	adds	r5, #1
 800733a:	e7f2      	b.n	8007322 <__libc_init_array+0x1e>
 800733c:	080092f0 	.word	0x080092f0
 8007340:	080092f0 	.word	0x080092f0
 8007344:	080092f0 	.word	0x080092f0
 8007348:	080092f4 	.word	0x080092f4

0800734c <memset>:
 800734c:	4603      	mov	r3, r0
 800734e:	4402      	add	r2, r0
 8007350:	4293      	cmp	r3, r2
 8007352:	d100      	bne.n	8007356 <memset+0xa>
 8007354:	4770      	bx	lr
 8007356:	f803 1b01 	strb.w	r1, [r3], #1
 800735a:	e7f9      	b.n	8007350 <memset+0x4>

0800735c <_strtol_l.isra.0>:
 800735c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007360:	4680      	mov	r8, r0
 8007362:	4689      	mov	r9, r1
 8007364:	4692      	mov	sl, r2
 8007366:	461e      	mov	r6, r3
 8007368:	460f      	mov	r7, r1
 800736a:	463d      	mov	r5, r7
 800736c:	9808      	ldr	r0, [sp, #32]
 800736e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007372:	f000 f885 	bl	8007480 <__locale_ctype_ptr_l>
 8007376:	4420      	add	r0, r4
 8007378:	7843      	ldrb	r3, [r0, #1]
 800737a:	f013 0308 	ands.w	r3, r3, #8
 800737e:	d132      	bne.n	80073e6 <_strtol_l.isra.0+0x8a>
 8007380:	2c2d      	cmp	r4, #45	; 0x2d
 8007382:	d132      	bne.n	80073ea <_strtol_l.isra.0+0x8e>
 8007384:	2201      	movs	r2, #1
 8007386:	787c      	ldrb	r4, [r7, #1]
 8007388:	1cbd      	adds	r5, r7, #2
 800738a:	2e00      	cmp	r6, #0
 800738c:	d05d      	beq.n	800744a <_strtol_l.isra.0+0xee>
 800738e:	2e10      	cmp	r6, #16
 8007390:	d109      	bne.n	80073a6 <_strtol_l.isra.0+0x4a>
 8007392:	2c30      	cmp	r4, #48	; 0x30
 8007394:	d107      	bne.n	80073a6 <_strtol_l.isra.0+0x4a>
 8007396:	782b      	ldrb	r3, [r5, #0]
 8007398:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800739c:	2b58      	cmp	r3, #88	; 0x58
 800739e:	d14f      	bne.n	8007440 <_strtol_l.isra.0+0xe4>
 80073a0:	2610      	movs	r6, #16
 80073a2:	786c      	ldrb	r4, [r5, #1]
 80073a4:	3502      	adds	r5, #2
 80073a6:	2a00      	cmp	r2, #0
 80073a8:	bf14      	ite	ne
 80073aa:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80073ae:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80073b2:	2700      	movs	r7, #0
 80073b4:	fbb1 fcf6 	udiv	ip, r1, r6
 80073b8:	4638      	mov	r0, r7
 80073ba:	fb06 1e1c 	mls	lr, r6, ip, r1
 80073be:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80073c2:	2b09      	cmp	r3, #9
 80073c4:	d817      	bhi.n	80073f6 <_strtol_l.isra.0+0x9a>
 80073c6:	461c      	mov	r4, r3
 80073c8:	42a6      	cmp	r6, r4
 80073ca:	dd23      	ble.n	8007414 <_strtol_l.isra.0+0xb8>
 80073cc:	1c7b      	adds	r3, r7, #1
 80073ce:	d007      	beq.n	80073e0 <_strtol_l.isra.0+0x84>
 80073d0:	4584      	cmp	ip, r0
 80073d2:	d31c      	bcc.n	800740e <_strtol_l.isra.0+0xb2>
 80073d4:	d101      	bne.n	80073da <_strtol_l.isra.0+0x7e>
 80073d6:	45a6      	cmp	lr, r4
 80073d8:	db19      	blt.n	800740e <_strtol_l.isra.0+0xb2>
 80073da:	2701      	movs	r7, #1
 80073dc:	fb00 4006 	mla	r0, r0, r6, r4
 80073e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073e4:	e7eb      	b.n	80073be <_strtol_l.isra.0+0x62>
 80073e6:	462f      	mov	r7, r5
 80073e8:	e7bf      	b.n	800736a <_strtol_l.isra.0+0xe>
 80073ea:	2c2b      	cmp	r4, #43	; 0x2b
 80073ec:	bf04      	itt	eq
 80073ee:	1cbd      	addeq	r5, r7, #2
 80073f0:	787c      	ldrbeq	r4, [r7, #1]
 80073f2:	461a      	mov	r2, r3
 80073f4:	e7c9      	b.n	800738a <_strtol_l.isra.0+0x2e>
 80073f6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80073fa:	2b19      	cmp	r3, #25
 80073fc:	d801      	bhi.n	8007402 <_strtol_l.isra.0+0xa6>
 80073fe:	3c37      	subs	r4, #55	; 0x37
 8007400:	e7e2      	b.n	80073c8 <_strtol_l.isra.0+0x6c>
 8007402:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007406:	2b19      	cmp	r3, #25
 8007408:	d804      	bhi.n	8007414 <_strtol_l.isra.0+0xb8>
 800740a:	3c57      	subs	r4, #87	; 0x57
 800740c:	e7dc      	b.n	80073c8 <_strtol_l.isra.0+0x6c>
 800740e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007412:	e7e5      	b.n	80073e0 <_strtol_l.isra.0+0x84>
 8007414:	1c7b      	adds	r3, r7, #1
 8007416:	d108      	bne.n	800742a <_strtol_l.isra.0+0xce>
 8007418:	2322      	movs	r3, #34	; 0x22
 800741a:	4608      	mov	r0, r1
 800741c:	f8c8 3000 	str.w	r3, [r8]
 8007420:	f1ba 0f00 	cmp.w	sl, #0
 8007424:	d107      	bne.n	8007436 <_strtol_l.isra.0+0xda>
 8007426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800742a:	b102      	cbz	r2, 800742e <_strtol_l.isra.0+0xd2>
 800742c:	4240      	negs	r0, r0
 800742e:	f1ba 0f00 	cmp.w	sl, #0
 8007432:	d0f8      	beq.n	8007426 <_strtol_l.isra.0+0xca>
 8007434:	b10f      	cbz	r7, 800743a <_strtol_l.isra.0+0xde>
 8007436:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800743a:	f8ca 9000 	str.w	r9, [sl]
 800743e:	e7f2      	b.n	8007426 <_strtol_l.isra.0+0xca>
 8007440:	2430      	movs	r4, #48	; 0x30
 8007442:	2e00      	cmp	r6, #0
 8007444:	d1af      	bne.n	80073a6 <_strtol_l.isra.0+0x4a>
 8007446:	2608      	movs	r6, #8
 8007448:	e7ad      	b.n	80073a6 <_strtol_l.isra.0+0x4a>
 800744a:	2c30      	cmp	r4, #48	; 0x30
 800744c:	d0a3      	beq.n	8007396 <_strtol_l.isra.0+0x3a>
 800744e:	260a      	movs	r6, #10
 8007450:	e7a9      	b.n	80073a6 <_strtol_l.isra.0+0x4a>
	...

08007454 <strtol>:
 8007454:	4b08      	ldr	r3, [pc, #32]	; (8007478 <strtol+0x24>)
 8007456:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007458:	681c      	ldr	r4, [r3, #0]
 800745a:	4d08      	ldr	r5, [pc, #32]	; (800747c <strtol+0x28>)
 800745c:	6a23      	ldr	r3, [r4, #32]
 800745e:	2b00      	cmp	r3, #0
 8007460:	bf08      	it	eq
 8007462:	462b      	moveq	r3, r5
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	4613      	mov	r3, r2
 8007468:	460a      	mov	r2, r1
 800746a:	4601      	mov	r1, r0
 800746c:	4620      	mov	r0, r4
 800746e:	f7ff ff75 	bl	800735c <_strtol_l.isra.0>
 8007472:	b003      	add	sp, #12
 8007474:	bd30      	pop	{r4, r5, pc}
 8007476:	bf00      	nop
 8007478:	20000024 	.word	0x20000024
 800747c:	20000088 	.word	0x20000088

08007480 <__locale_ctype_ptr_l>:
 8007480:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007484:	4770      	bx	lr

08007486 <__ascii_mbtowc>:
 8007486:	b082      	sub	sp, #8
 8007488:	b901      	cbnz	r1, 800748c <__ascii_mbtowc+0x6>
 800748a:	a901      	add	r1, sp, #4
 800748c:	b142      	cbz	r2, 80074a0 <__ascii_mbtowc+0x1a>
 800748e:	b14b      	cbz	r3, 80074a4 <__ascii_mbtowc+0x1e>
 8007490:	7813      	ldrb	r3, [r2, #0]
 8007492:	600b      	str	r3, [r1, #0]
 8007494:	7812      	ldrb	r2, [r2, #0]
 8007496:	1c10      	adds	r0, r2, #0
 8007498:	bf18      	it	ne
 800749a:	2001      	movne	r0, #1
 800749c:	b002      	add	sp, #8
 800749e:	4770      	bx	lr
 80074a0:	4610      	mov	r0, r2
 80074a2:	e7fb      	b.n	800749c <__ascii_mbtowc+0x16>
 80074a4:	f06f 0001 	mvn.w	r0, #1
 80074a8:	e7f8      	b.n	800749c <__ascii_mbtowc+0x16>

080074aa <__ascii_wctomb>:
 80074aa:	b149      	cbz	r1, 80074c0 <__ascii_wctomb+0x16>
 80074ac:	2aff      	cmp	r2, #255	; 0xff
 80074ae:	bf8b      	itete	hi
 80074b0:	238a      	movhi	r3, #138	; 0x8a
 80074b2:	700a      	strbls	r2, [r1, #0]
 80074b4:	6003      	strhi	r3, [r0, #0]
 80074b6:	2001      	movls	r0, #1
 80074b8:	bf88      	it	hi
 80074ba:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80074be:	4770      	bx	lr
 80074c0:	4608      	mov	r0, r1
 80074c2:	4770      	bx	lr
 80074c4:	0000      	movs	r0, r0
	...

080074c8 <floor>:
 80074c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074cc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80074d0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80074d4:	2e13      	cmp	r6, #19
 80074d6:	4607      	mov	r7, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	460c      	mov	r4, r1
 80074dc:	4605      	mov	r5, r0
 80074de:	dc35      	bgt.n	800754c <floor+0x84>
 80074e0:	2e00      	cmp	r6, #0
 80074e2:	da16      	bge.n	8007512 <floor+0x4a>
 80074e4:	a336      	add	r3, pc, #216	; (adr r3, 80075c0 <floor+0xf8>)
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	f7f8 fe37 	bl	800015c <__adddf3>
 80074ee:	2200      	movs	r2, #0
 80074f0:	2300      	movs	r3, #0
 80074f2:	f7f9 fa79 	bl	80009e8 <__aeabi_dcmpgt>
 80074f6:	b148      	cbz	r0, 800750c <floor+0x44>
 80074f8:	2c00      	cmp	r4, #0
 80074fa:	da5b      	bge.n	80075b4 <floor+0xec>
 80074fc:	2500      	movs	r5, #0
 80074fe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007502:	4a31      	ldr	r2, [pc, #196]	; (80075c8 <floor+0x100>)
 8007504:	433b      	orrs	r3, r7
 8007506:	42ab      	cmp	r3, r5
 8007508:	bf18      	it	ne
 800750a:	4614      	movne	r4, r2
 800750c:	4623      	mov	r3, r4
 800750e:	462f      	mov	r7, r5
 8007510:	e026      	b.n	8007560 <floor+0x98>
 8007512:	4a2e      	ldr	r2, [pc, #184]	; (80075cc <floor+0x104>)
 8007514:	fa42 f806 	asr.w	r8, r2, r6
 8007518:	ea01 0208 	and.w	r2, r1, r8
 800751c:	4302      	orrs	r2, r0
 800751e:	d01f      	beq.n	8007560 <floor+0x98>
 8007520:	a327      	add	r3, pc, #156	; (adr r3, 80075c0 <floor+0xf8>)
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	f7f8 fe19 	bl	800015c <__adddf3>
 800752a:	2200      	movs	r2, #0
 800752c:	2300      	movs	r3, #0
 800752e:	f7f9 fa5b 	bl	80009e8 <__aeabi_dcmpgt>
 8007532:	2800      	cmp	r0, #0
 8007534:	d0ea      	beq.n	800750c <floor+0x44>
 8007536:	2c00      	cmp	r4, #0
 8007538:	bfbe      	ittt	lt
 800753a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800753e:	fa43 f606 	asrlt.w	r6, r3, r6
 8007542:	19a4      	addlt	r4, r4, r6
 8007544:	ea24 0408 	bic.w	r4, r4, r8
 8007548:	2500      	movs	r5, #0
 800754a:	e7df      	b.n	800750c <floor+0x44>
 800754c:	2e33      	cmp	r6, #51	; 0x33
 800754e:	dd0b      	ble.n	8007568 <floor+0xa0>
 8007550:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007554:	d104      	bne.n	8007560 <floor+0x98>
 8007556:	4602      	mov	r2, r0
 8007558:	f7f8 fe00 	bl	800015c <__adddf3>
 800755c:	4607      	mov	r7, r0
 800755e:	460b      	mov	r3, r1
 8007560:	4638      	mov	r0, r7
 8007562:	4619      	mov	r1, r3
 8007564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800756c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8007570:	fa22 f808 	lsr.w	r8, r2, r8
 8007574:	ea18 0f00 	tst.w	r8, r0
 8007578:	d0f2      	beq.n	8007560 <floor+0x98>
 800757a:	a311      	add	r3, pc, #68	; (adr r3, 80075c0 <floor+0xf8>)
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	f7f8 fdec 	bl	800015c <__adddf3>
 8007584:	2200      	movs	r2, #0
 8007586:	2300      	movs	r3, #0
 8007588:	f7f9 fa2e 	bl	80009e8 <__aeabi_dcmpgt>
 800758c:	2800      	cmp	r0, #0
 800758e:	d0bd      	beq.n	800750c <floor+0x44>
 8007590:	2c00      	cmp	r4, #0
 8007592:	da02      	bge.n	800759a <floor+0xd2>
 8007594:	2e14      	cmp	r6, #20
 8007596:	d103      	bne.n	80075a0 <floor+0xd8>
 8007598:	3401      	adds	r4, #1
 800759a:	ea25 0508 	bic.w	r5, r5, r8
 800759e:	e7b5      	b.n	800750c <floor+0x44>
 80075a0:	2301      	movs	r3, #1
 80075a2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80075a6:	fa03 f606 	lsl.w	r6, r3, r6
 80075aa:	4435      	add	r5, r6
 80075ac:	42bd      	cmp	r5, r7
 80075ae:	bf38      	it	cc
 80075b0:	18e4      	addcc	r4, r4, r3
 80075b2:	e7f2      	b.n	800759a <floor+0xd2>
 80075b4:	2500      	movs	r5, #0
 80075b6:	462c      	mov	r4, r5
 80075b8:	e7a8      	b.n	800750c <floor+0x44>
 80075ba:	bf00      	nop
 80075bc:	f3af 8000 	nop.w
 80075c0:	8800759c 	.word	0x8800759c
 80075c4:	7e37e43c 	.word	0x7e37e43c
 80075c8:	bff00000 	.word	0xbff00000
 80075cc:	000fffff 	.word	0x000fffff

080075d0 <acos>:
 80075d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075d4:	b08b      	sub	sp, #44	; 0x2c
 80075d6:	4604      	mov	r4, r0
 80075d8:	460d      	mov	r5, r1
 80075da:	f000 fa01 	bl	80079e0 <__ieee754_acos>
 80075de:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8007674 <acos+0xa4>
 80075e2:	4606      	mov	r6, r0
 80075e4:	f998 3000 	ldrsb.w	r3, [r8]
 80075e8:	460f      	mov	r7, r1
 80075ea:	3301      	adds	r3, #1
 80075ec:	d036      	beq.n	800765c <acos+0x8c>
 80075ee:	4622      	mov	r2, r4
 80075f0:	462b      	mov	r3, r5
 80075f2:	4620      	mov	r0, r4
 80075f4:	4629      	mov	r1, r5
 80075f6:	f7f9 fa01 	bl	80009fc <__aeabi_dcmpun>
 80075fa:	4681      	mov	r9, r0
 80075fc:	2800      	cmp	r0, #0
 80075fe:	d12d      	bne.n	800765c <acos+0x8c>
 8007600:	4620      	mov	r0, r4
 8007602:	4629      	mov	r1, r5
 8007604:	f001 fc5a 	bl	8008ebc <fabs>
 8007608:	2200      	movs	r2, #0
 800760a:	4b17      	ldr	r3, [pc, #92]	; (8007668 <acos+0x98>)
 800760c:	f7f9 f9ec 	bl	80009e8 <__aeabi_dcmpgt>
 8007610:	b320      	cbz	r0, 800765c <acos+0x8c>
 8007612:	2301      	movs	r3, #1
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	4b15      	ldr	r3, [pc, #84]	; (800766c <acos+0x9c>)
 8007618:	4815      	ldr	r0, [pc, #84]	; (8007670 <acos+0xa0>)
 800761a:	9301      	str	r3, [sp, #4]
 800761c:	f8cd 9020 	str.w	r9, [sp, #32]
 8007620:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007624:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007628:	f001 fc54 	bl	8008ed4 <nan>
 800762c:	f998 3000 	ldrsb.w	r3, [r8]
 8007630:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007634:	2b02      	cmp	r3, #2
 8007636:	d104      	bne.n	8007642 <acos+0x72>
 8007638:	f7ff fe5e 	bl	80072f8 <__errno>
 800763c:	2321      	movs	r3, #33	; 0x21
 800763e:	6003      	str	r3, [r0, #0]
 8007640:	e004      	b.n	800764c <acos+0x7c>
 8007642:	4668      	mov	r0, sp
 8007644:	f001 fc44 	bl	8008ed0 <matherr>
 8007648:	2800      	cmp	r0, #0
 800764a:	d0f5      	beq.n	8007638 <acos+0x68>
 800764c:	9b08      	ldr	r3, [sp, #32]
 800764e:	b11b      	cbz	r3, 8007658 <acos+0x88>
 8007650:	f7ff fe52 	bl	80072f8 <__errno>
 8007654:	9b08      	ldr	r3, [sp, #32]
 8007656:	6003      	str	r3, [r0, #0]
 8007658:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800765c:	4630      	mov	r0, r6
 800765e:	4639      	mov	r1, r7
 8007660:	b00b      	add	sp, #44	; 0x2c
 8007662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007666:	bf00      	nop
 8007668:	3ff00000 	.word	0x3ff00000
 800766c:	0800925b 	.word	0x0800925b
 8007670:	08009159 	.word	0x08009159
 8007674:	200001f4 	.word	0x200001f4

08007678 <atan2>:
 8007678:	f000 bbfe 	b.w	8007e78 <__ieee754_atan2>

0800767c <pow>:
 800767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007680:	b08f      	sub	sp, #60	; 0x3c
 8007682:	461d      	mov	r5, r3
 8007684:	4680      	mov	r8, r0
 8007686:	4689      	mov	r9, r1
 8007688:	4614      	mov	r4, r2
 800768a:	f000 fcd5 	bl	8008038 <__ieee754_pow>
 800768e:	4fa1      	ldr	r7, [pc, #644]	; (8007914 <pow+0x298>)
 8007690:	e9cd 0100 	strd	r0, r1, [sp]
 8007694:	f997 3000 	ldrsb.w	r3, [r7]
 8007698:	463e      	mov	r6, r7
 800769a:	9302      	str	r3, [sp, #8]
 800769c:	3301      	adds	r3, #1
 800769e:	d05f      	beq.n	8007760 <pow+0xe4>
 80076a0:	4622      	mov	r2, r4
 80076a2:	462b      	mov	r3, r5
 80076a4:	4620      	mov	r0, r4
 80076a6:	4629      	mov	r1, r5
 80076a8:	f7f9 f9a8 	bl	80009fc <__aeabi_dcmpun>
 80076ac:	4682      	mov	sl, r0
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d156      	bne.n	8007760 <pow+0xe4>
 80076b2:	4642      	mov	r2, r8
 80076b4:	464b      	mov	r3, r9
 80076b6:	4640      	mov	r0, r8
 80076b8:	4649      	mov	r1, r9
 80076ba:	f7f9 f99f 	bl	80009fc <__aeabi_dcmpun>
 80076be:	9003      	str	r0, [sp, #12]
 80076c0:	b1e8      	cbz	r0, 80076fe <pow+0x82>
 80076c2:	2200      	movs	r2, #0
 80076c4:	2300      	movs	r3, #0
 80076c6:	4620      	mov	r0, r4
 80076c8:	4629      	mov	r1, r5
 80076ca:	f7f9 f965 	bl	8000998 <__aeabi_dcmpeq>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d046      	beq.n	8007760 <pow+0xe4>
 80076d2:	2301      	movs	r3, #1
 80076d4:	2200      	movs	r2, #0
 80076d6:	9304      	str	r3, [sp, #16]
 80076d8:	4b8f      	ldr	r3, [pc, #572]	; (8007918 <pow+0x29c>)
 80076da:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80076de:	9305      	str	r3, [sp, #20]
 80076e0:	4b8e      	ldr	r3, [pc, #568]	; (800791c <pow+0x2a0>)
 80076e2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80076e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80076ea:	9b02      	ldr	r3, [sp, #8]
 80076ec:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d031      	beq.n	8007758 <pow+0xdc>
 80076f4:	a804      	add	r0, sp, #16
 80076f6:	f001 fbeb 	bl	8008ed0 <matherr>
 80076fa:	bb38      	cbnz	r0, 800774c <pow+0xd0>
 80076fc:	e058      	b.n	80077b0 <pow+0x134>
 80076fe:	f04f 0a00 	mov.w	sl, #0
 8007702:	f04f 0b00 	mov.w	fp, #0
 8007706:	4652      	mov	r2, sl
 8007708:	465b      	mov	r3, fp
 800770a:	4640      	mov	r0, r8
 800770c:	4649      	mov	r1, r9
 800770e:	f7f9 f943 	bl	8000998 <__aeabi_dcmpeq>
 8007712:	2800      	cmp	r0, #0
 8007714:	d051      	beq.n	80077ba <pow+0x13e>
 8007716:	4652      	mov	r2, sl
 8007718:	465b      	mov	r3, fp
 800771a:	4620      	mov	r0, r4
 800771c:	4629      	mov	r1, r5
 800771e:	f7f9 f93b 	bl	8000998 <__aeabi_dcmpeq>
 8007722:	4606      	mov	r6, r0
 8007724:	b308      	cbz	r0, 800776a <pow+0xee>
 8007726:	2301      	movs	r3, #1
 8007728:	9304      	str	r3, [sp, #16]
 800772a:	4b7b      	ldr	r3, [pc, #492]	; (8007918 <pow+0x29c>)
 800772c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007730:	9305      	str	r3, [sp, #20]
 8007732:	9b03      	ldr	r3, [sp, #12]
 8007734:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007738:	930c      	str	r3, [sp, #48]	; 0x30
 800773a:	9b02      	ldr	r3, [sp, #8]
 800773c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007740:	2b00      	cmp	r3, #0
 8007742:	d0d7      	beq.n	80076f4 <pow+0x78>
 8007744:	2200      	movs	r2, #0
 8007746:	4b75      	ldr	r3, [pc, #468]	; (800791c <pow+0x2a0>)
 8007748:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800774c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800774e:	b11b      	cbz	r3, 8007758 <pow+0xdc>
 8007750:	f7ff fdd2 	bl	80072f8 <__errno>
 8007754:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007756:	6003      	str	r3, [r0, #0]
 8007758:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800775c:	e9cd 3400 	strd	r3, r4, [sp]
 8007760:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007764:	b00f      	add	sp, #60	; 0x3c
 8007766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776a:	4620      	mov	r0, r4
 800776c:	4629      	mov	r1, r5
 800776e:	f001 fba9 	bl	8008ec4 <finite>
 8007772:	2800      	cmp	r0, #0
 8007774:	d0f4      	beq.n	8007760 <pow+0xe4>
 8007776:	4652      	mov	r2, sl
 8007778:	465b      	mov	r3, fp
 800777a:	4620      	mov	r0, r4
 800777c:	4629      	mov	r1, r5
 800777e:	f7f9 f915 	bl	80009ac <__aeabi_dcmplt>
 8007782:	2800      	cmp	r0, #0
 8007784:	d0ec      	beq.n	8007760 <pow+0xe4>
 8007786:	2301      	movs	r3, #1
 8007788:	9304      	str	r3, [sp, #16]
 800778a:	4b63      	ldr	r3, [pc, #396]	; (8007918 <pow+0x29c>)
 800778c:	960c      	str	r6, [sp, #48]	; 0x30
 800778e:	9305      	str	r3, [sp, #20]
 8007790:	f997 3000 	ldrsb.w	r3, [r7]
 8007794:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007798:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800779c:	b913      	cbnz	r3, 80077a4 <pow+0x128>
 800779e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80077a2:	e7a7      	b.n	80076f4 <pow+0x78>
 80077a4:	2000      	movs	r0, #0
 80077a6:	495e      	ldr	r1, [pc, #376]	; (8007920 <pow+0x2a4>)
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80077ae:	d1a1      	bne.n	80076f4 <pow+0x78>
 80077b0:	f7ff fda2 	bl	80072f8 <__errno>
 80077b4:	2321      	movs	r3, #33	; 0x21
 80077b6:	6003      	str	r3, [r0, #0]
 80077b8:	e7c8      	b.n	800774c <pow+0xd0>
 80077ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077be:	f001 fb81 	bl	8008ec4 <finite>
 80077c2:	9002      	str	r0, [sp, #8]
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d177      	bne.n	80078b8 <pow+0x23c>
 80077c8:	4640      	mov	r0, r8
 80077ca:	4649      	mov	r1, r9
 80077cc:	f001 fb7a 	bl	8008ec4 <finite>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d071      	beq.n	80078b8 <pow+0x23c>
 80077d4:	4620      	mov	r0, r4
 80077d6:	4629      	mov	r1, r5
 80077d8:	f001 fb74 	bl	8008ec4 <finite>
 80077dc:	2800      	cmp	r0, #0
 80077de:	d06b      	beq.n	80078b8 <pow+0x23c>
 80077e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077e4:	4619      	mov	r1, r3
 80077e6:	4610      	mov	r0, r2
 80077e8:	f7f9 f908 	bl	80009fc <__aeabi_dcmpun>
 80077ec:	f997 7000 	ldrsb.w	r7, [r7]
 80077f0:	4b49      	ldr	r3, [pc, #292]	; (8007918 <pow+0x29c>)
 80077f2:	b1a0      	cbz	r0, 800781e <pow+0x1a2>
 80077f4:	2201      	movs	r2, #1
 80077f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077fa:	9b02      	ldr	r3, [sp, #8]
 80077fc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007800:	930c      	str	r3, [sp, #48]	; 0x30
 8007802:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007806:	2f00      	cmp	r7, #0
 8007808:	d0c9      	beq.n	800779e <pow+0x122>
 800780a:	4652      	mov	r2, sl
 800780c:	465b      	mov	r3, fp
 800780e:	4650      	mov	r0, sl
 8007810:	4659      	mov	r1, fp
 8007812:	f7f8 ff83 	bl	800071c <__aeabi_ddiv>
 8007816:	2f02      	cmp	r7, #2
 8007818:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800781c:	e7c7      	b.n	80077ae <pow+0x132>
 800781e:	2203      	movs	r2, #3
 8007820:	900c      	str	r0, [sp, #48]	; 0x30
 8007822:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007826:	4620      	mov	r0, r4
 8007828:	4629      	mov	r1, r5
 800782a:	2200      	movs	r2, #0
 800782c:	4b3d      	ldr	r3, [pc, #244]	; (8007924 <pow+0x2a8>)
 800782e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007832:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007836:	f7f8 fe47 	bl	80004c8 <__aeabi_dmul>
 800783a:	4604      	mov	r4, r0
 800783c:	460d      	mov	r5, r1
 800783e:	bb17      	cbnz	r7, 8007886 <pow+0x20a>
 8007840:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007844:	4b38      	ldr	r3, [pc, #224]	; (8007928 <pow+0x2ac>)
 8007846:	4640      	mov	r0, r8
 8007848:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800784c:	4649      	mov	r1, r9
 800784e:	4652      	mov	r2, sl
 8007850:	465b      	mov	r3, fp
 8007852:	f7f9 f8ab 	bl	80009ac <__aeabi_dcmplt>
 8007856:	2800      	cmp	r0, #0
 8007858:	d054      	beq.n	8007904 <pow+0x288>
 800785a:	4620      	mov	r0, r4
 800785c:	4629      	mov	r1, r5
 800785e:	f001 fb3f 	bl	8008ee0 <rint>
 8007862:	4622      	mov	r2, r4
 8007864:	462b      	mov	r3, r5
 8007866:	f7f9 f897 	bl	8000998 <__aeabi_dcmpeq>
 800786a:	b920      	cbnz	r0, 8007876 <pow+0x1fa>
 800786c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007870:	4b2e      	ldr	r3, [pc, #184]	; (800792c <pow+0x2b0>)
 8007872:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007876:	f996 3000 	ldrsb.w	r3, [r6]
 800787a:	2b02      	cmp	r3, #2
 800787c:	d142      	bne.n	8007904 <pow+0x288>
 800787e:	f7ff fd3b 	bl	80072f8 <__errno>
 8007882:	2322      	movs	r3, #34	; 0x22
 8007884:	e797      	b.n	80077b6 <pow+0x13a>
 8007886:	2200      	movs	r2, #0
 8007888:	4b29      	ldr	r3, [pc, #164]	; (8007930 <pow+0x2b4>)
 800788a:	4640      	mov	r0, r8
 800788c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007890:	4649      	mov	r1, r9
 8007892:	4652      	mov	r2, sl
 8007894:	465b      	mov	r3, fp
 8007896:	f7f9 f889 	bl	80009ac <__aeabi_dcmplt>
 800789a:	2800      	cmp	r0, #0
 800789c:	d0eb      	beq.n	8007876 <pow+0x1fa>
 800789e:	4620      	mov	r0, r4
 80078a0:	4629      	mov	r1, r5
 80078a2:	f001 fb1d 	bl	8008ee0 <rint>
 80078a6:	4622      	mov	r2, r4
 80078a8:	462b      	mov	r3, r5
 80078aa:	f7f9 f875 	bl	8000998 <__aeabi_dcmpeq>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d1e1      	bne.n	8007876 <pow+0x1fa>
 80078b2:	2200      	movs	r2, #0
 80078b4:	4b1a      	ldr	r3, [pc, #104]	; (8007920 <pow+0x2a4>)
 80078b6:	e7dc      	b.n	8007872 <pow+0x1f6>
 80078b8:	2200      	movs	r2, #0
 80078ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078be:	2300      	movs	r3, #0
 80078c0:	f7f9 f86a 	bl	8000998 <__aeabi_dcmpeq>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	f43f af4b 	beq.w	8007760 <pow+0xe4>
 80078ca:	4640      	mov	r0, r8
 80078cc:	4649      	mov	r1, r9
 80078ce:	f001 faf9 	bl	8008ec4 <finite>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	f43f af44 	beq.w	8007760 <pow+0xe4>
 80078d8:	4620      	mov	r0, r4
 80078da:	4629      	mov	r1, r5
 80078dc:	f001 faf2 	bl	8008ec4 <finite>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	f43f af3d 	beq.w	8007760 <pow+0xe4>
 80078e6:	2304      	movs	r3, #4
 80078e8:	9304      	str	r3, [sp, #16]
 80078ea:	4b0b      	ldr	r3, [pc, #44]	; (8007918 <pow+0x29c>)
 80078ec:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80078f0:	9305      	str	r3, [sp, #20]
 80078f2:	2300      	movs	r3, #0
 80078f4:	2400      	movs	r4, #0
 80078f6:	930c      	str	r3, [sp, #48]	; 0x30
 80078f8:	2300      	movs	r3, #0
 80078fa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80078fe:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8007902:	e7b8      	b.n	8007876 <pow+0x1fa>
 8007904:	a804      	add	r0, sp, #16
 8007906:	f001 fae3 	bl	8008ed0 <matherr>
 800790a:	2800      	cmp	r0, #0
 800790c:	f47f af1e 	bne.w	800774c <pow+0xd0>
 8007910:	e7b5      	b.n	800787e <pow+0x202>
 8007912:	bf00      	nop
 8007914:	200001f4 	.word	0x200001f4
 8007918:	08009260 	.word	0x08009260
 800791c:	3ff00000 	.word	0x3ff00000
 8007920:	fff00000 	.word	0xfff00000
 8007924:	3fe00000 	.word	0x3fe00000
 8007928:	47efffff 	.word	0x47efffff
 800792c:	c7efffff 	.word	0xc7efffff
 8007930:	7ff00000 	.word	0x7ff00000

08007934 <sqrt>:
 8007934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007938:	b08b      	sub	sp, #44	; 0x2c
 800793a:	4604      	mov	r4, r0
 800793c:	460d      	mov	r5, r1
 800793e:	f001 f885 	bl	8008a4c <__ieee754_sqrt>
 8007942:	4b24      	ldr	r3, [pc, #144]	; (80079d4 <sqrt+0xa0>)
 8007944:	4680      	mov	r8, r0
 8007946:	f993 a000 	ldrsb.w	sl, [r3]
 800794a:	4689      	mov	r9, r1
 800794c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007950:	d02b      	beq.n	80079aa <sqrt+0x76>
 8007952:	4622      	mov	r2, r4
 8007954:	462b      	mov	r3, r5
 8007956:	4620      	mov	r0, r4
 8007958:	4629      	mov	r1, r5
 800795a:	f7f9 f84f 	bl	80009fc <__aeabi_dcmpun>
 800795e:	4683      	mov	fp, r0
 8007960:	bb18      	cbnz	r0, 80079aa <sqrt+0x76>
 8007962:	2600      	movs	r6, #0
 8007964:	2700      	movs	r7, #0
 8007966:	4632      	mov	r2, r6
 8007968:	463b      	mov	r3, r7
 800796a:	4620      	mov	r0, r4
 800796c:	4629      	mov	r1, r5
 800796e:	f7f9 f81d 	bl	80009ac <__aeabi_dcmplt>
 8007972:	b1d0      	cbz	r0, 80079aa <sqrt+0x76>
 8007974:	2301      	movs	r3, #1
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	4b17      	ldr	r3, [pc, #92]	; (80079d8 <sqrt+0xa4>)
 800797a:	f8cd b020 	str.w	fp, [sp, #32]
 800797e:	9301      	str	r3, [sp, #4]
 8007980:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007984:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007988:	f1ba 0f00 	cmp.w	sl, #0
 800798c:	d112      	bne.n	80079b4 <sqrt+0x80>
 800798e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007992:	4668      	mov	r0, sp
 8007994:	f001 fa9c 	bl	8008ed0 <matherr>
 8007998:	b1b8      	cbz	r0, 80079ca <sqrt+0x96>
 800799a:	9b08      	ldr	r3, [sp, #32]
 800799c:	b11b      	cbz	r3, 80079a6 <sqrt+0x72>
 800799e:	f7ff fcab 	bl	80072f8 <__errno>
 80079a2:	9b08      	ldr	r3, [sp, #32]
 80079a4:	6003      	str	r3, [r0, #0]
 80079a6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80079aa:	4640      	mov	r0, r8
 80079ac:	4649      	mov	r1, r9
 80079ae:	b00b      	add	sp, #44	; 0x2c
 80079b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b4:	4632      	mov	r2, r6
 80079b6:	463b      	mov	r3, r7
 80079b8:	4630      	mov	r0, r6
 80079ba:	4639      	mov	r1, r7
 80079bc:	f7f8 feae 	bl	800071c <__aeabi_ddiv>
 80079c0:	f1ba 0f02 	cmp.w	sl, #2
 80079c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80079c8:	d1e3      	bne.n	8007992 <sqrt+0x5e>
 80079ca:	f7ff fc95 	bl	80072f8 <__errno>
 80079ce:	2321      	movs	r3, #33	; 0x21
 80079d0:	6003      	str	r3, [r0, #0]
 80079d2:	e7e2      	b.n	800799a <sqrt+0x66>
 80079d4:	200001f4 	.word	0x200001f4
 80079d8:	08009264 	.word	0x08009264
 80079dc:	00000000 	.word	0x00000000

080079e0 <__ieee754_acos>:
 80079e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e4:	4cb2      	ldr	r4, [pc, #712]	; (8007cb0 <__ieee754_acos+0x2d0>)
 80079e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80079ea:	42a3      	cmp	r3, r4
 80079ec:	4607      	mov	r7, r0
 80079ee:	460e      	mov	r6, r1
 80079f0:	dd16      	ble.n	8007a20 <__ieee754_acos+0x40>
 80079f2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80079f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80079fa:	4303      	orrs	r3, r0
 80079fc:	d107      	bne.n	8007a0e <__ieee754_acos+0x2e>
 80079fe:	2900      	cmp	r1, #0
 8007a00:	f300 8202 	bgt.w	8007e08 <__ieee754_acos+0x428>
 8007a04:	a190      	add	r1, pc, #576	; (adr r1, 8007c48 <__ieee754_acos+0x268>)
 8007a06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	f7f8 fba1 	bl	8000158 <__aeabi_dsub>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	f7f8 fe7f 	bl	800071c <__aeabi_ddiv>
 8007a1e:	e7f4      	b.n	8007a0a <__ieee754_acos+0x2a>
 8007a20:	4ca4      	ldr	r4, [pc, #656]	; (8007cb4 <__ieee754_acos+0x2d4>)
 8007a22:	42a3      	cmp	r3, r4
 8007a24:	f300 8083 	bgt.w	8007b2e <__ieee754_acos+0x14e>
 8007a28:	4aa3      	ldr	r2, [pc, #652]	; (8007cb8 <__ieee754_acos+0x2d8>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	f340 81ef 	ble.w	8007e0e <__ieee754_acos+0x42e>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	f7f8 fd48 	bl	80004c8 <__aeabi_dmul>
 8007a38:	a385      	add	r3, pc, #532	; (adr r3, 8007c50 <__ieee754_acos+0x270>)
 8007a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3e:	4604      	mov	r4, r0
 8007a40:	460d      	mov	r5, r1
 8007a42:	f7f8 fd41 	bl	80004c8 <__aeabi_dmul>
 8007a46:	a384      	add	r3, pc, #528	; (adr r3, 8007c58 <__ieee754_acos+0x278>)
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	f7f8 fb86 	bl	800015c <__adddf3>
 8007a50:	4622      	mov	r2, r4
 8007a52:	462b      	mov	r3, r5
 8007a54:	f7f8 fd38 	bl	80004c8 <__aeabi_dmul>
 8007a58:	a381      	add	r3, pc, #516	; (adr r3, 8007c60 <__ieee754_acos+0x280>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	f7f8 fb7b 	bl	8000158 <__aeabi_dsub>
 8007a62:	4622      	mov	r2, r4
 8007a64:	462b      	mov	r3, r5
 8007a66:	f7f8 fd2f 	bl	80004c8 <__aeabi_dmul>
 8007a6a:	a37f      	add	r3, pc, #508	; (adr r3, 8007c68 <__ieee754_acos+0x288>)
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	f7f8 fb74 	bl	800015c <__adddf3>
 8007a74:	4622      	mov	r2, r4
 8007a76:	462b      	mov	r3, r5
 8007a78:	f7f8 fd26 	bl	80004c8 <__aeabi_dmul>
 8007a7c:	a37c      	add	r3, pc, #496	; (adr r3, 8007c70 <__ieee754_acos+0x290>)
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	f7f8 fb69 	bl	8000158 <__aeabi_dsub>
 8007a86:	4622      	mov	r2, r4
 8007a88:	462b      	mov	r3, r5
 8007a8a:	f7f8 fd1d 	bl	80004c8 <__aeabi_dmul>
 8007a8e:	a37a      	add	r3, pc, #488	; (adr r3, 8007c78 <__ieee754_acos+0x298>)
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	f7f8 fb62 	bl	800015c <__adddf3>
 8007a98:	4622      	mov	r2, r4
 8007a9a:	462b      	mov	r3, r5
 8007a9c:	f7f8 fd14 	bl	80004c8 <__aeabi_dmul>
 8007aa0:	a377      	add	r3, pc, #476	; (adr r3, 8007c80 <__ieee754_acos+0x2a0>)
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	4680      	mov	r8, r0
 8007aa8:	4689      	mov	r9, r1
 8007aaa:	4620      	mov	r0, r4
 8007aac:	4629      	mov	r1, r5
 8007aae:	f7f8 fd0b 	bl	80004c8 <__aeabi_dmul>
 8007ab2:	a375      	add	r3, pc, #468	; (adr r3, 8007c88 <__ieee754_acos+0x2a8>)
 8007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab8:	f7f8 fb4e 	bl	8000158 <__aeabi_dsub>
 8007abc:	4622      	mov	r2, r4
 8007abe:	462b      	mov	r3, r5
 8007ac0:	f7f8 fd02 	bl	80004c8 <__aeabi_dmul>
 8007ac4:	a372      	add	r3, pc, #456	; (adr r3, 8007c90 <__ieee754_acos+0x2b0>)
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	f7f8 fb47 	bl	800015c <__adddf3>
 8007ace:	4622      	mov	r2, r4
 8007ad0:	462b      	mov	r3, r5
 8007ad2:	f7f8 fcf9 	bl	80004c8 <__aeabi_dmul>
 8007ad6:	a370      	add	r3, pc, #448	; (adr r3, 8007c98 <__ieee754_acos+0x2b8>)
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	f7f8 fb3c 	bl	8000158 <__aeabi_dsub>
 8007ae0:	4622      	mov	r2, r4
 8007ae2:	462b      	mov	r3, r5
 8007ae4:	f7f8 fcf0 	bl	80004c8 <__aeabi_dmul>
 8007ae8:	2200      	movs	r2, #0
 8007aea:	4b74      	ldr	r3, [pc, #464]	; (8007cbc <__ieee754_acos+0x2dc>)
 8007aec:	f7f8 fb36 	bl	800015c <__adddf3>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	4640      	mov	r0, r8
 8007af6:	4649      	mov	r1, r9
 8007af8:	f7f8 fe10 	bl	800071c <__aeabi_ddiv>
 8007afc:	463a      	mov	r2, r7
 8007afe:	4633      	mov	r3, r6
 8007b00:	f7f8 fce2 	bl	80004c8 <__aeabi_dmul>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	a165      	add	r1, pc, #404	; (adr r1, 8007ca0 <__ieee754_acos+0x2c0>)
 8007b0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b0e:	f7f8 fb23 	bl	8000158 <__aeabi_dsub>
 8007b12:	4602      	mov	r2, r0
 8007b14:	460b      	mov	r3, r1
 8007b16:	4638      	mov	r0, r7
 8007b18:	4631      	mov	r1, r6
 8007b1a:	f7f8 fb1d 	bl	8000158 <__aeabi_dsub>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	a161      	add	r1, pc, #388	; (adr r1, 8007ca8 <__ieee754_acos+0x2c8>)
 8007b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b28:	f7f8 fb16 	bl	8000158 <__aeabi_dsub>
 8007b2c:	e76d      	b.n	8007a0a <__ieee754_acos+0x2a>
 8007b2e:	2900      	cmp	r1, #0
 8007b30:	f280 80c8 	bge.w	8007cc4 <__ieee754_acos+0x2e4>
 8007b34:	2200      	movs	r2, #0
 8007b36:	4b61      	ldr	r3, [pc, #388]	; (8007cbc <__ieee754_acos+0x2dc>)
 8007b38:	f7f8 fb10 	bl	800015c <__adddf3>
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4b60      	ldr	r3, [pc, #384]	; (8007cc0 <__ieee754_acos+0x2e0>)
 8007b40:	f7f8 fcc2 	bl	80004c8 <__aeabi_dmul>
 8007b44:	a342      	add	r3, pc, #264	; (adr r3, 8007c50 <__ieee754_acos+0x270>)
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	460d      	mov	r5, r1
 8007b4e:	f7f8 fcbb 	bl	80004c8 <__aeabi_dmul>
 8007b52:	a341      	add	r3, pc, #260	; (adr r3, 8007c58 <__ieee754_acos+0x278>)
 8007b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b58:	f7f8 fb00 	bl	800015c <__adddf3>
 8007b5c:	4622      	mov	r2, r4
 8007b5e:	462b      	mov	r3, r5
 8007b60:	f7f8 fcb2 	bl	80004c8 <__aeabi_dmul>
 8007b64:	a33e      	add	r3, pc, #248	; (adr r3, 8007c60 <__ieee754_acos+0x280>)
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	f7f8 faf5 	bl	8000158 <__aeabi_dsub>
 8007b6e:	4622      	mov	r2, r4
 8007b70:	462b      	mov	r3, r5
 8007b72:	f7f8 fca9 	bl	80004c8 <__aeabi_dmul>
 8007b76:	a33c      	add	r3, pc, #240	; (adr r3, 8007c68 <__ieee754_acos+0x288>)
 8007b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7c:	f7f8 faee 	bl	800015c <__adddf3>
 8007b80:	4622      	mov	r2, r4
 8007b82:	462b      	mov	r3, r5
 8007b84:	f7f8 fca0 	bl	80004c8 <__aeabi_dmul>
 8007b88:	a339      	add	r3, pc, #228	; (adr r3, 8007c70 <__ieee754_acos+0x290>)
 8007b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8e:	f7f8 fae3 	bl	8000158 <__aeabi_dsub>
 8007b92:	4622      	mov	r2, r4
 8007b94:	462b      	mov	r3, r5
 8007b96:	f7f8 fc97 	bl	80004c8 <__aeabi_dmul>
 8007b9a:	a337      	add	r3, pc, #220	; (adr r3, 8007c78 <__ieee754_acos+0x298>)
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	f7f8 fadc 	bl	800015c <__adddf3>
 8007ba4:	4622      	mov	r2, r4
 8007ba6:	462b      	mov	r3, r5
 8007ba8:	f7f8 fc8e 	bl	80004c8 <__aeabi_dmul>
 8007bac:	4680      	mov	r8, r0
 8007bae:	4689      	mov	r9, r1
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	f000 ff4a 	bl	8008a4c <__ieee754_sqrt>
 8007bb8:	a331      	add	r3, pc, #196	; (adr r3, 8007c80 <__ieee754_acos+0x2a0>)
 8007bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	460f      	mov	r7, r1
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	f7f8 fc7f 	bl	80004c8 <__aeabi_dmul>
 8007bca:	a32f      	add	r3, pc, #188	; (adr r3, 8007c88 <__ieee754_acos+0x2a8>)
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	f7f8 fac2 	bl	8000158 <__aeabi_dsub>
 8007bd4:	4622      	mov	r2, r4
 8007bd6:	462b      	mov	r3, r5
 8007bd8:	f7f8 fc76 	bl	80004c8 <__aeabi_dmul>
 8007bdc:	a32c      	add	r3, pc, #176	; (adr r3, 8007c90 <__ieee754_acos+0x2b0>)
 8007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be2:	f7f8 fabb 	bl	800015c <__adddf3>
 8007be6:	4622      	mov	r2, r4
 8007be8:	462b      	mov	r3, r5
 8007bea:	f7f8 fc6d 	bl	80004c8 <__aeabi_dmul>
 8007bee:	a32a      	add	r3, pc, #168	; (adr r3, 8007c98 <__ieee754_acos+0x2b8>)
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	f7f8 fab0 	bl	8000158 <__aeabi_dsub>
 8007bf8:	4622      	mov	r2, r4
 8007bfa:	462b      	mov	r3, r5
 8007bfc:	f7f8 fc64 	bl	80004c8 <__aeabi_dmul>
 8007c00:	2200      	movs	r2, #0
 8007c02:	4b2e      	ldr	r3, [pc, #184]	; (8007cbc <__ieee754_acos+0x2dc>)
 8007c04:	f7f8 faaa 	bl	800015c <__adddf3>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4640      	mov	r0, r8
 8007c0e:	4649      	mov	r1, r9
 8007c10:	f7f8 fd84 	bl	800071c <__aeabi_ddiv>
 8007c14:	4632      	mov	r2, r6
 8007c16:	463b      	mov	r3, r7
 8007c18:	f7f8 fc56 	bl	80004c8 <__aeabi_dmul>
 8007c1c:	a320      	add	r3, pc, #128	; (adr r3, 8007ca0 <__ieee754_acos+0x2c0>)
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	f7f8 fa99 	bl	8000158 <__aeabi_dsub>
 8007c26:	4632      	mov	r2, r6
 8007c28:	463b      	mov	r3, r7
 8007c2a:	f7f8 fa97 	bl	800015c <__adddf3>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	f7f8 fa93 	bl	800015c <__adddf3>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	a103      	add	r1, pc, #12	; (adr r1, 8007c48 <__ieee754_acos+0x268>)
 8007c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c40:	e772      	b.n	8007b28 <__ieee754_acos+0x148>
 8007c42:	bf00      	nop
 8007c44:	f3af 8000 	nop.w
 8007c48:	54442d18 	.word	0x54442d18
 8007c4c:	400921fb 	.word	0x400921fb
 8007c50:	0dfdf709 	.word	0x0dfdf709
 8007c54:	3f023de1 	.word	0x3f023de1
 8007c58:	7501b288 	.word	0x7501b288
 8007c5c:	3f49efe0 	.word	0x3f49efe0
 8007c60:	b5688f3b 	.word	0xb5688f3b
 8007c64:	3fa48228 	.word	0x3fa48228
 8007c68:	0e884455 	.word	0x0e884455
 8007c6c:	3fc9c155 	.word	0x3fc9c155
 8007c70:	03eb6f7d 	.word	0x03eb6f7d
 8007c74:	3fd4d612 	.word	0x3fd4d612
 8007c78:	55555555 	.word	0x55555555
 8007c7c:	3fc55555 	.word	0x3fc55555
 8007c80:	b12e9282 	.word	0xb12e9282
 8007c84:	3fb3b8c5 	.word	0x3fb3b8c5
 8007c88:	1b8d0159 	.word	0x1b8d0159
 8007c8c:	3fe6066c 	.word	0x3fe6066c
 8007c90:	9c598ac8 	.word	0x9c598ac8
 8007c94:	40002ae5 	.word	0x40002ae5
 8007c98:	1c8a2d4b 	.word	0x1c8a2d4b
 8007c9c:	40033a27 	.word	0x40033a27
 8007ca0:	33145c07 	.word	0x33145c07
 8007ca4:	3c91a626 	.word	0x3c91a626
 8007ca8:	54442d18 	.word	0x54442d18
 8007cac:	3ff921fb 	.word	0x3ff921fb
 8007cb0:	3fefffff 	.word	0x3fefffff
 8007cb4:	3fdfffff 	.word	0x3fdfffff
 8007cb8:	3c600000 	.word	0x3c600000
 8007cbc:	3ff00000 	.word	0x3ff00000
 8007cc0:	3fe00000 	.word	0x3fe00000
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	2000      	movs	r0, #0
 8007cca:	4969      	ldr	r1, [pc, #420]	; (8007e70 <__ieee754_acos+0x490>)
 8007ccc:	f7f8 fa44 	bl	8000158 <__aeabi_dsub>
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	4b68      	ldr	r3, [pc, #416]	; (8007e74 <__ieee754_acos+0x494>)
 8007cd4:	f7f8 fbf8 	bl	80004c8 <__aeabi_dmul>
 8007cd8:	4604      	mov	r4, r0
 8007cda:	460d      	mov	r5, r1
 8007cdc:	f000 feb6 	bl	8008a4c <__ieee754_sqrt>
 8007ce0:	a34d      	add	r3, pc, #308	; (adr r3, 8007e18 <__ieee754_acos+0x438>)
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	4689      	mov	r9, r1
 8007ce8:	4680      	mov	r8, r0
 8007cea:	4629      	mov	r1, r5
 8007cec:	4620      	mov	r0, r4
 8007cee:	f7f8 fbeb 	bl	80004c8 <__aeabi_dmul>
 8007cf2:	a34b      	add	r3, pc, #300	; (adr r3, 8007e20 <__ieee754_acos+0x440>)
 8007cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf8:	f7f8 fa30 	bl	800015c <__adddf3>
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	462b      	mov	r3, r5
 8007d00:	f7f8 fbe2 	bl	80004c8 <__aeabi_dmul>
 8007d04:	a348      	add	r3, pc, #288	; (adr r3, 8007e28 <__ieee754_acos+0x448>)
 8007d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0a:	f7f8 fa25 	bl	8000158 <__aeabi_dsub>
 8007d0e:	4622      	mov	r2, r4
 8007d10:	462b      	mov	r3, r5
 8007d12:	f7f8 fbd9 	bl	80004c8 <__aeabi_dmul>
 8007d16:	a346      	add	r3, pc, #280	; (adr r3, 8007e30 <__ieee754_acos+0x450>)
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	f7f8 fa1e 	bl	800015c <__adddf3>
 8007d20:	4622      	mov	r2, r4
 8007d22:	462b      	mov	r3, r5
 8007d24:	f7f8 fbd0 	bl	80004c8 <__aeabi_dmul>
 8007d28:	a343      	add	r3, pc, #268	; (adr r3, 8007e38 <__ieee754_acos+0x458>)
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	f7f8 fa13 	bl	8000158 <__aeabi_dsub>
 8007d32:	4622      	mov	r2, r4
 8007d34:	462b      	mov	r3, r5
 8007d36:	f7f8 fbc7 	bl	80004c8 <__aeabi_dmul>
 8007d3a:	a341      	add	r3, pc, #260	; (adr r3, 8007e40 <__ieee754_acos+0x460>)
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	f7f8 fa0c 	bl	800015c <__adddf3>
 8007d44:	4622      	mov	r2, r4
 8007d46:	462b      	mov	r3, r5
 8007d48:	f7f8 fbbe 	bl	80004c8 <__aeabi_dmul>
 8007d4c:	a33e      	add	r3, pc, #248	; (adr r3, 8007e48 <__ieee754_acos+0x468>)
 8007d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d52:	4682      	mov	sl, r0
 8007d54:	468b      	mov	fp, r1
 8007d56:	4620      	mov	r0, r4
 8007d58:	4629      	mov	r1, r5
 8007d5a:	f7f8 fbb5 	bl	80004c8 <__aeabi_dmul>
 8007d5e:	a33c      	add	r3, pc, #240	; (adr r3, 8007e50 <__ieee754_acos+0x470>)
 8007d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d64:	f7f8 f9f8 	bl	8000158 <__aeabi_dsub>
 8007d68:	4622      	mov	r2, r4
 8007d6a:	462b      	mov	r3, r5
 8007d6c:	f7f8 fbac 	bl	80004c8 <__aeabi_dmul>
 8007d70:	a339      	add	r3, pc, #228	; (adr r3, 8007e58 <__ieee754_acos+0x478>)
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	f7f8 f9f1 	bl	800015c <__adddf3>
 8007d7a:	4622      	mov	r2, r4
 8007d7c:	462b      	mov	r3, r5
 8007d7e:	f7f8 fba3 	bl	80004c8 <__aeabi_dmul>
 8007d82:	a337      	add	r3, pc, #220	; (adr r3, 8007e60 <__ieee754_acos+0x480>)
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f7f8 f9e6 	bl	8000158 <__aeabi_dsub>
 8007d8c:	4622      	mov	r2, r4
 8007d8e:	462b      	mov	r3, r5
 8007d90:	f7f8 fb9a 	bl	80004c8 <__aeabi_dmul>
 8007d94:	2200      	movs	r2, #0
 8007d96:	4b36      	ldr	r3, [pc, #216]	; (8007e70 <__ieee754_acos+0x490>)
 8007d98:	f7f8 f9e0 	bl	800015c <__adddf3>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4650      	mov	r0, sl
 8007da2:	4659      	mov	r1, fp
 8007da4:	f7f8 fcba 	bl	800071c <__aeabi_ddiv>
 8007da8:	4642      	mov	r2, r8
 8007daa:	464b      	mov	r3, r9
 8007dac:	f7f8 fb8c 	bl	80004c8 <__aeabi_dmul>
 8007db0:	2600      	movs	r6, #0
 8007db2:	4682      	mov	sl, r0
 8007db4:	468b      	mov	fp, r1
 8007db6:	4632      	mov	r2, r6
 8007db8:	464b      	mov	r3, r9
 8007dba:	4630      	mov	r0, r6
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	f7f8 fb83 	bl	80004c8 <__aeabi_dmul>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	4629      	mov	r1, r5
 8007dca:	f7f8 f9c5 	bl	8000158 <__aeabi_dsub>
 8007dce:	4632      	mov	r2, r6
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	460d      	mov	r5, r1
 8007dd4:	464b      	mov	r3, r9
 8007dd6:	4640      	mov	r0, r8
 8007dd8:	4649      	mov	r1, r9
 8007dda:	f7f8 f9bf 	bl	800015c <__adddf3>
 8007dde:	4602      	mov	r2, r0
 8007de0:	460b      	mov	r3, r1
 8007de2:	4620      	mov	r0, r4
 8007de4:	4629      	mov	r1, r5
 8007de6:	f7f8 fc99 	bl	800071c <__aeabi_ddiv>
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	4650      	mov	r0, sl
 8007df0:	4659      	mov	r1, fp
 8007df2:	f7f8 f9b3 	bl	800015c <__adddf3>
 8007df6:	4632      	mov	r2, r6
 8007df8:	464b      	mov	r3, r9
 8007dfa:	f7f8 f9af 	bl	800015c <__adddf3>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	f7f8 f9ab 	bl	800015c <__adddf3>
 8007e06:	e600      	b.n	8007a0a <__ieee754_acos+0x2a>
 8007e08:	2000      	movs	r0, #0
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	e5fd      	b.n	8007a0a <__ieee754_acos+0x2a>
 8007e0e:	a116      	add	r1, pc, #88	; (adr r1, 8007e68 <__ieee754_acos+0x488>)
 8007e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e14:	e5f9      	b.n	8007a0a <__ieee754_acos+0x2a>
 8007e16:	bf00      	nop
 8007e18:	0dfdf709 	.word	0x0dfdf709
 8007e1c:	3f023de1 	.word	0x3f023de1
 8007e20:	7501b288 	.word	0x7501b288
 8007e24:	3f49efe0 	.word	0x3f49efe0
 8007e28:	b5688f3b 	.word	0xb5688f3b
 8007e2c:	3fa48228 	.word	0x3fa48228
 8007e30:	0e884455 	.word	0x0e884455
 8007e34:	3fc9c155 	.word	0x3fc9c155
 8007e38:	03eb6f7d 	.word	0x03eb6f7d
 8007e3c:	3fd4d612 	.word	0x3fd4d612
 8007e40:	55555555 	.word	0x55555555
 8007e44:	3fc55555 	.word	0x3fc55555
 8007e48:	b12e9282 	.word	0xb12e9282
 8007e4c:	3fb3b8c5 	.word	0x3fb3b8c5
 8007e50:	1b8d0159 	.word	0x1b8d0159
 8007e54:	3fe6066c 	.word	0x3fe6066c
 8007e58:	9c598ac8 	.word	0x9c598ac8
 8007e5c:	40002ae5 	.word	0x40002ae5
 8007e60:	1c8a2d4b 	.word	0x1c8a2d4b
 8007e64:	40033a27 	.word	0x40033a27
 8007e68:	54442d18 	.word	0x54442d18
 8007e6c:	3ff921fb 	.word	0x3ff921fb
 8007e70:	3ff00000 	.word	0x3ff00000
 8007e74:	3fe00000 	.word	0x3fe00000

08007e78 <__ieee754_atan2>:
 8007e78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	4256      	negs	r6, r2
 8007e7e:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8007e82:	4316      	orrs	r6, r2
 8007e84:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8008030 <__ieee754_atan2+0x1b8>
 8007e88:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8007e8c:	454e      	cmp	r6, r9
 8007e8e:	4604      	mov	r4, r0
 8007e90:	460d      	mov	r5, r1
 8007e92:	469e      	mov	lr, r3
 8007e94:	d808      	bhi.n	8007ea8 <__ieee754_atan2+0x30>
 8007e96:	4246      	negs	r6, r0
 8007e98:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007e9c:	4306      	orrs	r6, r0
 8007e9e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8007ea2:	454e      	cmp	r6, r9
 8007ea4:	4688      	mov	r8, r1
 8007ea6:	d906      	bls.n	8007eb6 <__ieee754_atan2+0x3e>
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	4629      	mov	r1, r5
 8007eac:	f7f8 f956 	bl	800015c <__adddf3>
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	460d      	mov	r5, r1
 8007eb4:	e030      	b.n	8007f18 <__ieee754_atan2+0xa0>
 8007eb6:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8007eba:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007ebe:	4316      	orrs	r6, r2
 8007ec0:	d103      	bne.n	8007eca <__ieee754_atan2+0x52>
 8007ec2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec6:	f000 be6f 	b.w	8008ba8 <atan>
 8007eca:	179e      	asrs	r6, r3, #30
 8007ecc:	f006 0602 	and.w	r6, r6, #2
 8007ed0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007ed4:	ea57 0100 	orrs.w	r1, r7, r0
 8007ed8:	d107      	bne.n	8007eea <__ieee754_atan2+0x72>
 8007eda:	2e02      	cmp	r6, #2
 8007edc:	d079      	beq.n	8007fd2 <__ieee754_atan2+0x15a>
 8007ede:	2e03      	cmp	r6, #3
 8007ee0:	d11a      	bne.n	8007f18 <__ieee754_atan2+0xa0>
 8007ee2:	a541      	add	r5, pc, #260	; (adr r5, 8007fe8 <__ieee754_atan2+0x170>)
 8007ee4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ee8:	e016      	b.n	8007f18 <__ieee754_atan2+0xa0>
 8007eea:	ea5c 0102 	orrs.w	r1, ip, r2
 8007eee:	d106      	bne.n	8007efe <__ieee754_atan2+0x86>
 8007ef0:	f1b8 0f00 	cmp.w	r8, #0
 8007ef4:	da71      	bge.n	8007fda <__ieee754_atan2+0x162>
 8007ef6:	a53e      	add	r5, pc, #248	; (adr r5, 8007ff0 <__ieee754_atan2+0x178>)
 8007ef8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007efc:	e00c      	b.n	8007f18 <__ieee754_atan2+0xa0>
 8007efe:	45cc      	cmp	ip, r9
 8007f00:	d123      	bne.n	8007f4a <__ieee754_atan2+0xd2>
 8007f02:	4567      	cmp	r7, ip
 8007f04:	d114      	bne.n	8007f30 <__ieee754_atan2+0xb8>
 8007f06:	2e02      	cmp	r6, #2
 8007f08:	d00a      	beq.n	8007f20 <__ieee754_atan2+0xa8>
 8007f0a:	2e03      	cmp	r6, #3
 8007f0c:	d00c      	beq.n	8007f28 <__ieee754_atan2+0xb0>
 8007f0e:	2e01      	cmp	r6, #1
 8007f10:	d15b      	bne.n	8007fca <__ieee754_atan2+0x152>
 8007f12:	a539      	add	r5, pc, #228	; (adr r5, 8007ff8 <__ieee754_atan2+0x180>)
 8007f14:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007f18:	4620      	mov	r0, r4
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f20:	a537      	add	r5, pc, #220	; (adr r5, 8008000 <__ieee754_atan2+0x188>)
 8007f22:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007f26:	e7f7      	b.n	8007f18 <__ieee754_atan2+0xa0>
 8007f28:	a537      	add	r5, pc, #220	; (adr r5, 8008008 <__ieee754_atan2+0x190>)
 8007f2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007f2e:	e7f3      	b.n	8007f18 <__ieee754_atan2+0xa0>
 8007f30:	2e02      	cmp	r6, #2
 8007f32:	d04e      	beq.n	8007fd2 <__ieee754_atan2+0x15a>
 8007f34:	2e03      	cmp	r6, #3
 8007f36:	d0d4      	beq.n	8007ee2 <__ieee754_atan2+0x6a>
 8007f38:	2e01      	cmp	r6, #1
 8007f3a:	f04f 0400 	mov.w	r4, #0
 8007f3e:	d102      	bne.n	8007f46 <__ieee754_atan2+0xce>
 8007f40:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8007f44:	e7e8      	b.n	8007f18 <__ieee754_atan2+0xa0>
 8007f46:	2500      	movs	r5, #0
 8007f48:	e7e6      	b.n	8007f18 <__ieee754_atan2+0xa0>
 8007f4a:	454f      	cmp	r7, r9
 8007f4c:	d0d0      	beq.n	8007ef0 <__ieee754_atan2+0x78>
 8007f4e:	eba7 070c 	sub.w	r7, r7, ip
 8007f52:	153f      	asrs	r7, r7, #20
 8007f54:	2f3c      	cmp	r7, #60	; 0x3c
 8007f56:	dc1e      	bgt.n	8007f96 <__ieee754_atan2+0x11e>
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	da01      	bge.n	8007f60 <__ieee754_atan2+0xe8>
 8007f5c:	373c      	adds	r7, #60	; 0x3c
 8007f5e:	db1e      	blt.n	8007f9e <__ieee754_atan2+0x126>
 8007f60:	4620      	mov	r0, r4
 8007f62:	4629      	mov	r1, r5
 8007f64:	f7f8 fbda 	bl	800071c <__aeabi_ddiv>
 8007f68:	f000 ffa8 	bl	8008ebc <fabs>
 8007f6c:	f000 fe1c 	bl	8008ba8 <atan>
 8007f70:	4604      	mov	r4, r0
 8007f72:	460d      	mov	r5, r1
 8007f74:	2e01      	cmp	r6, #1
 8007f76:	d015      	beq.n	8007fa4 <__ieee754_atan2+0x12c>
 8007f78:	2e02      	cmp	r6, #2
 8007f7a:	d017      	beq.n	8007fac <__ieee754_atan2+0x134>
 8007f7c:	2e00      	cmp	r6, #0
 8007f7e:	d0cb      	beq.n	8007f18 <__ieee754_atan2+0xa0>
 8007f80:	a323      	add	r3, pc, #140	; (adr r3, 8008010 <__ieee754_atan2+0x198>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	4620      	mov	r0, r4
 8007f88:	4629      	mov	r1, r5
 8007f8a:	f7f8 f8e5 	bl	8000158 <__aeabi_dsub>
 8007f8e:	a322      	add	r3, pc, #136	; (adr r3, 8008018 <__ieee754_atan2+0x1a0>)
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	e016      	b.n	8007fc4 <__ieee754_atan2+0x14c>
 8007f96:	a522      	add	r5, pc, #136	; (adr r5, 8008020 <__ieee754_atan2+0x1a8>)
 8007f98:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007f9c:	e7ea      	b.n	8007f74 <__ieee754_atan2+0xfc>
 8007f9e:	2400      	movs	r4, #0
 8007fa0:	2500      	movs	r5, #0
 8007fa2:	e7e7      	b.n	8007f74 <__ieee754_atan2+0xfc>
 8007fa4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007fa8:	461d      	mov	r5, r3
 8007faa:	e7b5      	b.n	8007f18 <__ieee754_atan2+0xa0>
 8007fac:	a318      	add	r3, pc, #96	; (adr r3, 8008010 <__ieee754_atan2+0x198>)
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	f7f8 f8cf 	bl	8000158 <__aeabi_dsub>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	a116      	add	r1, pc, #88	; (adr r1, 8008018 <__ieee754_atan2+0x1a0>)
 8007fc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fc4:	f7f8 f8c8 	bl	8000158 <__aeabi_dsub>
 8007fc8:	e772      	b.n	8007eb0 <__ieee754_atan2+0x38>
 8007fca:	a517      	add	r5, pc, #92	; (adr r5, 8008028 <__ieee754_atan2+0x1b0>)
 8007fcc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007fd0:	e7a2      	b.n	8007f18 <__ieee754_atan2+0xa0>
 8007fd2:	a511      	add	r5, pc, #68	; (adr r5, 8008018 <__ieee754_atan2+0x1a0>)
 8007fd4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007fd8:	e79e      	b.n	8007f18 <__ieee754_atan2+0xa0>
 8007fda:	a511      	add	r5, pc, #68	; (adr r5, 8008020 <__ieee754_atan2+0x1a8>)
 8007fdc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007fe0:	e79a      	b.n	8007f18 <__ieee754_atan2+0xa0>
 8007fe2:	bf00      	nop
 8007fe4:	f3af 8000 	nop.w
 8007fe8:	54442d18 	.word	0x54442d18
 8007fec:	c00921fb 	.word	0xc00921fb
 8007ff0:	54442d18 	.word	0x54442d18
 8007ff4:	bff921fb 	.word	0xbff921fb
 8007ff8:	54442d18 	.word	0x54442d18
 8007ffc:	bfe921fb 	.word	0xbfe921fb
 8008000:	7f3321d2 	.word	0x7f3321d2
 8008004:	4002d97c 	.word	0x4002d97c
 8008008:	7f3321d2 	.word	0x7f3321d2
 800800c:	c002d97c 	.word	0xc002d97c
 8008010:	33145c07 	.word	0x33145c07
 8008014:	3ca1a626 	.word	0x3ca1a626
 8008018:	54442d18 	.word	0x54442d18
 800801c:	400921fb 	.word	0x400921fb
 8008020:	54442d18 	.word	0x54442d18
 8008024:	3ff921fb 	.word	0x3ff921fb
 8008028:	54442d18 	.word	0x54442d18
 800802c:	3fe921fb 	.word	0x3fe921fb
 8008030:	7ff00000 	.word	0x7ff00000
 8008034:	00000000 	.word	0x00000000

08008038 <__ieee754_pow>:
 8008038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803c:	b091      	sub	sp, #68	; 0x44
 800803e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008042:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8008046:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800804a:	ea55 0302 	orrs.w	r3, r5, r2
 800804e:	4607      	mov	r7, r0
 8008050:	4688      	mov	r8, r1
 8008052:	f000 84b7 	beq.w	80089c4 <__ieee754_pow+0x98c>
 8008056:	4b80      	ldr	r3, [pc, #512]	; (8008258 <__ieee754_pow+0x220>)
 8008058:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800805c:	429c      	cmp	r4, r3
 800805e:	4689      	mov	r9, r1
 8008060:	4682      	mov	sl, r0
 8008062:	dc09      	bgt.n	8008078 <__ieee754_pow+0x40>
 8008064:	d103      	bne.n	800806e <__ieee754_pow+0x36>
 8008066:	b938      	cbnz	r0, 8008078 <__ieee754_pow+0x40>
 8008068:	42a5      	cmp	r5, r4
 800806a:	dc0d      	bgt.n	8008088 <__ieee754_pow+0x50>
 800806c:	e001      	b.n	8008072 <__ieee754_pow+0x3a>
 800806e:	429d      	cmp	r5, r3
 8008070:	dc02      	bgt.n	8008078 <__ieee754_pow+0x40>
 8008072:	429d      	cmp	r5, r3
 8008074:	d10e      	bne.n	8008094 <__ieee754_pow+0x5c>
 8008076:	b16a      	cbz	r2, 8008094 <__ieee754_pow+0x5c>
 8008078:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800807c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008080:	ea54 030a 	orrs.w	r3, r4, sl
 8008084:	f000 849e 	beq.w	80089c4 <__ieee754_pow+0x98c>
 8008088:	4874      	ldr	r0, [pc, #464]	; (800825c <__ieee754_pow+0x224>)
 800808a:	b011      	add	sp, #68	; 0x44
 800808c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008090:	f000 bf20 	b.w	8008ed4 <nan>
 8008094:	f1b9 0f00 	cmp.w	r9, #0
 8008098:	da53      	bge.n	8008142 <__ieee754_pow+0x10a>
 800809a:	4b71      	ldr	r3, [pc, #452]	; (8008260 <__ieee754_pow+0x228>)
 800809c:	429d      	cmp	r5, r3
 800809e:	dc4e      	bgt.n	800813e <__ieee754_pow+0x106>
 80080a0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80080a4:	429d      	cmp	r5, r3
 80080a6:	dd4c      	ble.n	8008142 <__ieee754_pow+0x10a>
 80080a8:	152b      	asrs	r3, r5, #20
 80080aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80080ae:	2b14      	cmp	r3, #20
 80080b0:	dd28      	ble.n	8008104 <__ieee754_pow+0xcc>
 80080b2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80080b6:	fa22 f103 	lsr.w	r1, r2, r3
 80080ba:	fa01 f303 	lsl.w	r3, r1, r3
 80080be:	4293      	cmp	r3, r2
 80080c0:	d13f      	bne.n	8008142 <__ieee754_pow+0x10a>
 80080c2:	f001 0101 	and.w	r1, r1, #1
 80080c6:	f1c1 0302 	rsb	r3, r1, #2
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	2a00      	cmp	r2, #0
 80080ce:	d15c      	bne.n	800818a <__ieee754_pow+0x152>
 80080d0:	4b61      	ldr	r3, [pc, #388]	; (8008258 <__ieee754_pow+0x220>)
 80080d2:	429d      	cmp	r5, r3
 80080d4:	d126      	bne.n	8008124 <__ieee754_pow+0xec>
 80080d6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80080da:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80080de:	ea53 030a 	orrs.w	r3, r3, sl
 80080e2:	f000 846f 	beq.w	80089c4 <__ieee754_pow+0x98c>
 80080e6:	4b5f      	ldr	r3, [pc, #380]	; (8008264 <__ieee754_pow+0x22c>)
 80080e8:	429c      	cmp	r4, r3
 80080ea:	dd2c      	ble.n	8008146 <__ieee754_pow+0x10e>
 80080ec:	2e00      	cmp	r6, #0
 80080ee:	f280 846f 	bge.w	80089d0 <__ieee754_pow+0x998>
 80080f2:	f04f 0b00 	mov.w	fp, #0
 80080f6:	f04f 0c00 	mov.w	ip, #0
 80080fa:	4658      	mov	r0, fp
 80080fc:	4661      	mov	r1, ip
 80080fe:	b011      	add	sp, #68	; 0x44
 8008100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008104:	2a00      	cmp	r2, #0
 8008106:	d13e      	bne.n	8008186 <__ieee754_pow+0x14e>
 8008108:	f1c3 0314 	rsb	r3, r3, #20
 800810c:	fa45 f103 	asr.w	r1, r5, r3
 8008110:	fa01 f303 	lsl.w	r3, r1, r3
 8008114:	42ab      	cmp	r3, r5
 8008116:	f040 8463 	bne.w	80089e0 <__ieee754_pow+0x9a8>
 800811a:	f001 0101 	and.w	r1, r1, #1
 800811e:	f1c1 0302 	rsb	r3, r1, #2
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	4b50      	ldr	r3, [pc, #320]	; (8008268 <__ieee754_pow+0x230>)
 8008126:	429d      	cmp	r5, r3
 8008128:	d114      	bne.n	8008154 <__ieee754_pow+0x11c>
 800812a:	2e00      	cmp	r6, #0
 800812c:	f280 8454 	bge.w	80089d8 <__ieee754_pow+0x9a0>
 8008130:	463a      	mov	r2, r7
 8008132:	4643      	mov	r3, r8
 8008134:	2000      	movs	r0, #0
 8008136:	494c      	ldr	r1, [pc, #304]	; (8008268 <__ieee754_pow+0x230>)
 8008138:	f7f8 faf0 	bl	800071c <__aeabi_ddiv>
 800813c:	e013      	b.n	8008166 <__ieee754_pow+0x12e>
 800813e:	2302      	movs	r3, #2
 8008140:	e7c3      	b.n	80080ca <__ieee754_pow+0x92>
 8008142:	2300      	movs	r3, #0
 8008144:	e7c1      	b.n	80080ca <__ieee754_pow+0x92>
 8008146:	2e00      	cmp	r6, #0
 8008148:	dad3      	bge.n	80080f2 <__ieee754_pow+0xba>
 800814a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800814e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8008152:	e7d2      	b.n	80080fa <__ieee754_pow+0xc2>
 8008154:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8008158:	d108      	bne.n	800816c <__ieee754_pow+0x134>
 800815a:	463a      	mov	r2, r7
 800815c:	4643      	mov	r3, r8
 800815e:	4638      	mov	r0, r7
 8008160:	4641      	mov	r1, r8
 8008162:	f7f8 f9b1 	bl	80004c8 <__aeabi_dmul>
 8008166:	4683      	mov	fp, r0
 8008168:	468c      	mov	ip, r1
 800816a:	e7c6      	b.n	80080fa <__ieee754_pow+0xc2>
 800816c:	4b3f      	ldr	r3, [pc, #252]	; (800826c <__ieee754_pow+0x234>)
 800816e:	429e      	cmp	r6, r3
 8008170:	d10b      	bne.n	800818a <__ieee754_pow+0x152>
 8008172:	f1b9 0f00 	cmp.w	r9, #0
 8008176:	db08      	blt.n	800818a <__ieee754_pow+0x152>
 8008178:	4638      	mov	r0, r7
 800817a:	4641      	mov	r1, r8
 800817c:	b011      	add	sp, #68	; 0x44
 800817e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008182:	f000 bc63 	b.w	8008a4c <__ieee754_sqrt>
 8008186:	2300      	movs	r3, #0
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	4638      	mov	r0, r7
 800818c:	4641      	mov	r1, r8
 800818e:	f000 fe95 	bl	8008ebc <fabs>
 8008192:	4683      	mov	fp, r0
 8008194:	468c      	mov	ip, r1
 8008196:	f1ba 0f00 	cmp.w	sl, #0
 800819a:	d12b      	bne.n	80081f4 <__ieee754_pow+0x1bc>
 800819c:	b124      	cbz	r4, 80081a8 <__ieee754_pow+0x170>
 800819e:	4b32      	ldr	r3, [pc, #200]	; (8008268 <__ieee754_pow+0x230>)
 80081a0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d125      	bne.n	80081f4 <__ieee754_pow+0x1bc>
 80081a8:	2e00      	cmp	r6, #0
 80081aa:	da07      	bge.n	80081bc <__ieee754_pow+0x184>
 80081ac:	465a      	mov	r2, fp
 80081ae:	4663      	mov	r3, ip
 80081b0:	2000      	movs	r0, #0
 80081b2:	492d      	ldr	r1, [pc, #180]	; (8008268 <__ieee754_pow+0x230>)
 80081b4:	f7f8 fab2 	bl	800071c <__aeabi_ddiv>
 80081b8:	4683      	mov	fp, r0
 80081ba:	468c      	mov	ip, r1
 80081bc:	f1b9 0f00 	cmp.w	r9, #0
 80081c0:	da9b      	bge.n	80080fa <__ieee754_pow+0xc2>
 80081c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80081c6:	9b00      	ldr	r3, [sp, #0]
 80081c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80081cc:	4323      	orrs	r3, r4
 80081ce:	d108      	bne.n	80081e2 <__ieee754_pow+0x1aa>
 80081d0:	465a      	mov	r2, fp
 80081d2:	4663      	mov	r3, ip
 80081d4:	4658      	mov	r0, fp
 80081d6:	4661      	mov	r1, ip
 80081d8:	f7f7 ffbe 	bl	8000158 <__aeabi_dsub>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	e7aa      	b.n	8008138 <__ieee754_pow+0x100>
 80081e2:	9b00      	ldr	r3, [sp, #0]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d188      	bne.n	80080fa <__ieee754_pow+0xc2>
 80081e8:	4658      	mov	r0, fp
 80081ea:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80081ee:	4683      	mov	fp, r0
 80081f0:	469c      	mov	ip, r3
 80081f2:	e782      	b.n	80080fa <__ieee754_pow+0xc2>
 80081f4:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80081f8:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80081fc:	930d      	str	r3, [sp, #52]	; 0x34
 80081fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008200:	9b00      	ldr	r3, [sp, #0]
 8008202:	4313      	orrs	r3, r2
 8008204:	d104      	bne.n	8008210 <__ieee754_pow+0x1d8>
 8008206:	463a      	mov	r2, r7
 8008208:	4643      	mov	r3, r8
 800820a:	4638      	mov	r0, r7
 800820c:	4641      	mov	r1, r8
 800820e:	e7e3      	b.n	80081d8 <__ieee754_pow+0x1a0>
 8008210:	4b17      	ldr	r3, [pc, #92]	; (8008270 <__ieee754_pow+0x238>)
 8008212:	429d      	cmp	r5, r3
 8008214:	f340 80fe 	ble.w	8008414 <__ieee754_pow+0x3dc>
 8008218:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800821c:	429d      	cmp	r5, r3
 800821e:	dd0b      	ble.n	8008238 <__ieee754_pow+0x200>
 8008220:	4b10      	ldr	r3, [pc, #64]	; (8008264 <__ieee754_pow+0x22c>)
 8008222:	429c      	cmp	r4, r3
 8008224:	dc0e      	bgt.n	8008244 <__ieee754_pow+0x20c>
 8008226:	2e00      	cmp	r6, #0
 8008228:	f6bf af63 	bge.w	80080f2 <__ieee754_pow+0xba>
 800822c:	a308      	add	r3, pc, #32	; (adr r3, 8008250 <__ieee754_pow+0x218>)
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	4610      	mov	r0, r2
 8008234:	4619      	mov	r1, r3
 8008236:	e794      	b.n	8008162 <__ieee754_pow+0x12a>
 8008238:	4b0e      	ldr	r3, [pc, #56]	; (8008274 <__ieee754_pow+0x23c>)
 800823a:	429c      	cmp	r4, r3
 800823c:	ddf3      	ble.n	8008226 <__ieee754_pow+0x1ee>
 800823e:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <__ieee754_pow+0x230>)
 8008240:	429c      	cmp	r4, r3
 8008242:	dd19      	ble.n	8008278 <__ieee754_pow+0x240>
 8008244:	2e00      	cmp	r6, #0
 8008246:	dcf1      	bgt.n	800822c <__ieee754_pow+0x1f4>
 8008248:	e753      	b.n	80080f2 <__ieee754_pow+0xba>
 800824a:	bf00      	nop
 800824c:	f3af 8000 	nop.w
 8008250:	8800759c 	.word	0x8800759c
 8008254:	7e37e43c 	.word	0x7e37e43c
 8008258:	7ff00000 	.word	0x7ff00000
 800825c:	08009159 	.word	0x08009159
 8008260:	433fffff 	.word	0x433fffff
 8008264:	3fefffff 	.word	0x3fefffff
 8008268:	3ff00000 	.word	0x3ff00000
 800826c:	3fe00000 	.word	0x3fe00000
 8008270:	41e00000 	.word	0x41e00000
 8008274:	3feffffe 	.word	0x3feffffe
 8008278:	4661      	mov	r1, ip
 800827a:	2200      	movs	r2, #0
 800827c:	4b60      	ldr	r3, [pc, #384]	; (8008400 <__ieee754_pow+0x3c8>)
 800827e:	4658      	mov	r0, fp
 8008280:	f7f7 ff6a 	bl	8000158 <__aeabi_dsub>
 8008284:	a354      	add	r3, pc, #336	; (adr r3, 80083d8 <__ieee754_pow+0x3a0>)
 8008286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828a:	4604      	mov	r4, r0
 800828c:	460d      	mov	r5, r1
 800828e:	f7f8 f91b 	bl	80004c8 <__aeabi_dmul>
 8008292:	a353      	add	r3, pc, #332	; (adr r3, 80083e0 <__ieee754_pow+0x3a8>)
 8008294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008298:	4606      	mov	r6, r0
 800829a:	460f      	mov	r7, r1
 800829c:	4620      	mov	r0, r4
 800829e:	4629      	mov	r1, r5
 80082a0:	f7f8 f912 	bl	80004c8 <__aeabi_dmul>
 80082a4:	2200      	movs	r2, #0
 80082a6:	4682      	mov	sl, r0
 80082a8:	468b      	mov	fp, r1
 80082aa:	4b56      	ldr	r3, [pc, #344]	; (8008404 <__ieee754_pow+0x3cc>)
 80082ac:	4620      	mov	r0, r4
 80082ae:	4629      	mov	r1, r5
 80082b0:	f7f8 f90a 	bl	80004c8 <__aeabi_dmul>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	a14b      	add	r1, pc, #300	; (adr r1, 80083e8 <__ieee754_pow+0x3b0>)
 80082ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082be:	f7f7 ff4b 	bl	8000158 <__aeabi_dsub>
 80082c2:	4622      	mov	r2, r4
 80082c4:	462b      	mov	r3, r5
 80082c6:	f7f8 f8ff 	bl	80004c8 <__aeabi_dmul>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	2000      	movs	r0, #0
 80082d0:	494d      	ldr	r1, [pc, #308]	; (8008408 <__ieee754_pow+0x3d0>)
 80082d2:	f7f7 ff41 	bl	8000158 <__aeabi_dsub>
 80082d6:	4622      	mov	r2, r4
 80082d8:	462b      	mov	r3, r5
 80082da:	4680      	mov	r8, r0
 80082dc:	4689      	mov	r9, r1
 80082de:	4620      	mov	r0, r4
 80082e0:	4629      	mov	r1, r5
 80082e2:	f7f8 f8f1 	bl	80004c8 <__aeabi_dmul>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	4640      	mov	r0, r8
 80082ec:	4649      	mov	r1, r9
 80082ee:	f7f8 f8eb 	bl	80004c8 <__aeabi_dmul>
 80082f2:	a33f      	add	r3, pc, #252	; (adr r3, 80083f0 <__ieee754_pow+0x3b8>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f8 f8e6 	bl	80004c8 <__aeabi_dmul>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4650      	mov	r0, sl
 8008302:	4659      	mov	r1, fp
 8008304:	f7f7 ff28 	bl	8000158 <__aeabi_dsub>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4604      	mov	r4, r0
 800830e:	460d      	mov	r5, r1
 8008310:	4630      	mov	r0, r6
 8008312:	4639      	mov	r1, r7
 8008314:	f7f7 ff22 	bl	800015c <__adddf3>
 8008318:	2000      	movs	r0, #0
 800831a:	468b      	mov	fp, r1
 800831c:	4682      	mov	sl, r0
 800831e:	4632      	mov	r2, r6
 8008320:	463b      	mov	r3, r7
 8008322:	f7f7 ff19 	bl	8000158 <__aeabi_dsub>
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	4620      	mov	r0, r4
 800832c:	4629      	mov	r1, r5
 800832e:	f7f7 ff13 	bl	8000158 <__aeabi_dsub>
 8008332:	9b00      	ldr	r3, [sp, #0]
 8008334:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008336:	3b01      	subs	r3, #1
 8008338:	4313      	orrs	r3, r2
 800833a:	f04f 0300 	mov.w	r3, #0
 800833e:	bf0c      	ite	eq
 8008340:	4c32      	ldreq	r4, [pc, #200]	; (800840c <__ieee754_pow+0x3d4>)
 8008342:	4c2f      	ldrne	r4, [pc, #188]	; (8008400 <__ieee754_pow+0x3c8>)
 8008344:	4606      	mov	r6, r0
 8008346:	e9cd 3400 	strd	r3, r4, [sp]
 800834a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800834e:	2400      	movs	r4, #0
 8008350:	460f      	mov	r7, r1
 8008352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008356:	4622      	mov	r2, r4
 8008358:	462b      	mov	r3, r5
 800835a:	f7f7 fefd 	bl	8000158 <__aeabi_dsub>
 800835e:	4652      	mov	r2, sl
 8008360:	465b      	mov	r3, fp
 8008362:	f7f8 f8b1 	bl	80004c8 <__aeabi_dmul>
 8008366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800836a:	4680      	mov	r8, r0
 800836c:	4689      	mov	r9, r1
 800836e:	4630      	mov	r0, r6
 8008370:	4639      	mov	r1, r7
 8008372:	f7f8 f8a9 	bl	80004c8 <__aeabi_dmul>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	4640      	mov	r0, r8
 800837c:	4649      	mov	r1, r9
 800837e:	f7f7 feed 	bl	800015c <__adddf3>
 8008382:	4622      	mov	r2, r4
 8008384:	462b      	mov	r3, r5
 8008386:	4680      	mov	r8, r0
 8008388:	4689      	mov	r9, r1
 800838a:	4650      	mov	r0, sl
 800838c:	4659      	mov	r1, fp
 800838e:	f7f8 f89b 	bl	80004c8 <__aeabi_dmul>
 8008392:	4604      	mov	r4, r0
 8008394:	460d      	mov	r5, r1
 8008396:	460b      	mov	r3, r1
 8008398:	4602      	mov	r2, r0
 800839a:	4649      	mov	r1, r9
 800839c:	4640      	mov	r0, r8
 800839e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80083a2:	f7f7 fedb 	bl	800015c <__adddf3>
 80083a6:	4b1a      	ldr	r3, [pc, #104]	; (8008410 <__ieee754_pow+0x3d8>)
 80083a8:	4682      	mov	sl, r0
 80083aa:	4299      	cmp	r1, r3
 80083ac:	460f      	mov	r7, r1
 80083ae:	460e      	mov	r6, r1
 80083b0:	f340 82e1 	ble.w	8008976 <__ieee754_pow+0x93e>
 80083b4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80083b8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80083bc:	4303      	orrs	r3, r0
 80083be:	f000 81db 	beq.w	8008778 <__ieee754_pow+0x740>
 80083c2:	a30d      	add	r3, pc, #52	; (adr r3, 80083f8 <__ieee754_pow+0x3c0>)
 80083c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083cc:	f7f8 f87c 	bl	80004c8 <__aeabi_dmul>
 80083d0:	a309      	add	r3, pc, #36	; (adr r3, 80083f8 <__ieee754_pow+0x3c0>)
 80083d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d6:	e6c4      	b.n	8008162 <__ieee754_pow+0x12a>
 80083d8:	60000000 	.word	0x60000000
 80083dc:	3ff71547 	.word	0x3ff71547
 80083e0:	f85ddf44 	.word	0xf85ddf44
 80083e4:	3e54ae0b 	.word	0x3e54ae0b
 80083e8:	55555555 	.word	0x55555555
 80083ec:	3fd55555 	.word	0x3fd55555
 80083f0:	652b82fe 	.word	0x652b82fe
 80083f4:	3ff71547 	.word	0x3ff71547
 80083f8:	8800759c 	.word	0x8800759c
 80083fc:	7e37e43c 	.word	0x7e37e43c
 8008400:	3ff00000 	.word	0x3ff00000
 8008404:	3fd00000 	.word	0x3fd00000
 8008408:	3fe00000 	.word	0x3fe00000
 800840c:	bff00000 	.word	0xbff00000
 8008410:	408fffff 	.word	0x408fffff
 8008414:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008418:	f04f 0200 	mov.w	r2, #0
 800841c:	da08      	bge.n	8008430 <__ieee754_pow+0x3f8>
 800841e:	4658      	mov	r0, fp
 8008420:	4bcd      	ldr	r3, [pc, #820]	; (8008758 <__ieee754_pow+0x720>)
 8008422:	4661      	mov	r1, ip
 8008424:	f7f8 f850 	bl	80004c8 <__aeabi_dmul>
 8008428:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800842c:	4683      	mov	fp, r0
 800842e:	460c      	mov	r4, r1
 8008430:	1523      	asrs	r3, r4, #20
 8008432:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008436:	4413      	add	r3, r2
 8008438:	930c      	str	r3, [sp, #48]	; 0x30
 800843a:	4bc8      	ldr	r3, [pc, #800]	; (800875c <__ieee754_pow+0x724>)
 800843c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008440:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008444:	429c      	cmp	r4, r3
 8008446:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800844a:	dd08      	ble.n	800845e <__ieee754_pow+0x426>
 800844c:	4bc4      	ldr	r3, [pc, #784]	; (8008760 <__ieee754_pow+0x728>)
 800844e:	429c      	cmp	r4, r3
 8008450:	f340 815b 	ble.w	800870a <__ieee754_pow+0x6d2>
 8008454:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008456:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800845a:	3301      	adds	r3, #1
 800845c:	930c      	str	r3, [sp, #48]	; 0x30
 800845e:	f04f 0800 	mov.w	r8, #0
 8008462:	4658      	mov	r0, fp
 8008464:	4629      	mov	r1, r5
 8008466:	4bbf      	ldr	r3, [pc, #764]	; (8008764 <__ieee754_pow+0x72c>)
 8008468:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800846c:	444b      	add	r3, r9
 800846e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008472:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008476:	461a      	mov	r2, r3
 8008478:	4623      	mov	r3, r4
 800847a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800847e:	f7f7 fe6b 	bl	8000158 <__aeabi_dsub>
 8008482:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008486:	4606      	mov	r6, r0
 8008488:	460f      	mov	r7, r1
 800848a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800848e:	f7f7 fe65 	bl	800015c <__adddf3>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	2000      	movs	r0, #0
 8008498:	49b3      	ldr	r1, [pc, #716]	; (8008768 <__ieee754_pow+0x730>)
 800849a:	f7f8 f93f 	bl	800071c <__aeabi_ddiv>
 800849e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	4630      	mov	r0, r6
 80084a8:	4639      	mov	r1, r7
 80084aa:	f7f8 f80d 	bl	80004c8 <__aeabi_dmul>
 80084ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80084b2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80084b6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80084ba:	2300      	movs	r3, #0
 80084bc:	2200      	movs	r2, #0
 80084be:	106d      	asrs	r5, r5, #1
 80084c0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80084c4:	9304      	str	r3, [sp, #16]
 80084c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80084ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80084ce:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 80084d2:	4650      	mov	r0, sl
 80084d4:	4659      	mov	r1, fp
 80084d6:	4614      	mov	r4, r2
 80084d8:	461d      	mov	r5, r3
 80084da:	f7f7 fff5 	bl	80004c8 <__aeabi_dmul>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	4630      	mov	r0, r6
 80084e4:	4639      	mov	r1, r7
 80084e6:	f7f7 fe37 	bl	8000158 <__aeabi_dsub>
 80084ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80084ee:	4606      	mov	r6, r0
 80084f0:	460f      	mov	r7, r1
 80084f2:	4620      	mov	r0, r4
 80084f4:	4629      	mov	r1, r5
 80084f6:	f7f7 fe2f 	bl	8000158 <__aeabi_dsub>
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
 80084fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008502:	f7f7 fe29 	bl	8000158 <__aeabi_dsub>
 8008506:	4652      	mov	r2, sl
 8008508:	465b      	mov	r3, fp
 800850a:	f7f7 ffdd 	bl	80004c8 <__aeabi_dmul>
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	4630      	mov	r0, r6
 8008514:	4639      	mov	r1, r7
 8008516:	f7f7 fe1f 	bl	8000158 <__aeabi_dsub>
 800851a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800851e:	f7f7 ffd3 	bl	80004c8 <__aeabi_dmul>
 8008522:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008526:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800852a:	4610      	mov	r0, r2
 800852c:	4619      	mov	r1, r3
 800852e:	f7f7 ffcb 	bl	80004c8 <__aeabi_dmul>
 8008532:	a377      	add	r3, pc, #476	; (adr r3, 8008710 <__ieee754_pow+0x6d8>)
 8008534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008538:	4604      	mov	r4, r0
 800853a:	460d      	mov	r5, r1
 800853c:	f7f7 ffc4 	bl	80004c8 <__aeabi_dmul>
 8008540:	a375      	add	r3, pc, #468	; (adr r3, 8008718 <__ieee754_pow+0x6e0>)
 8008542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008546:	f7f7 fe09 	bl	800015c <__adddf3>
 800854a:	4622      	mov	r2, r4
 800854c:	462b      	mov	r3, r5
 800854e:	f7f7 ffbb 	bl	80004c8 <__aeabi_dmul>
 8008552:	a373      	add	r3, pc, #460	; (adr r3, 8008720 <__ieee754_pow+0x6e8>)
 8008554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008558:	f7f7 fe00 	bl	800015c <__adddf3>
 800855c:	4622      	mov	r2, r4
 800855e:	462b      	mov	r3, r5
 8008560:	f7f7 ffb2 	bl	80004c8 <__aeabi_dmul>
 8008564:	a370      	add	r3, pc, #448	; (adr r3, 8008728 <__ieee754_pow+0x6f0>)
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	f7f7 fdf7 	bl	800015c <__adddf3>
 800856e:	4622      	mov	r2, r4
 8008570:	462b      	mov	r3, r5
 8008572:	f7f7 ffa9 	bl	80004c8 <__aeabi_dmul>
 8008576:	a36e      	add	r3, pc, #440	; (adr r3, 8008730 <__ieee754_pow+0x6f8>)
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	f7f7 fdee 	bl	800015c <__adddf3>
 8008580:	4622      	mov	r2, r4
 8008582:	462b      	mov	r3, r5
 8008584:	f7f7 ffa0 	bl	80004c8 <__aeabi_dmul>
 8008588:	a36b      	add	r3, pc, #428	; (adr r3, 8008738 <__ieee754_pow+0x700>)
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	f7f7 fde5 	bl	800015c <__adddf3>
 8008592:	4622      	mov	r2, r4
 8008594:	4606      	mov	r6, r0
 8008596:	460f      	mov	r7, r1
 8008598:	462b      	mov	r3, r5
 800859a:	4620      	mov	r0, r4
 800859c:	4629      	mov	r1, r5
 800859e:	f7f7 ff93 	bl	80004c8 <__aeabi_dmul>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	4630      	mov	r0, r6
 80085a8:	4639      	mov	r1, r7
 80085aa:	f7f7 ff8d 	bl	80004c8 <__aeabi_dmul>
 80085ae:	4604      	mov	r4, r0
 80085b0:	460d      	mov	r5, r1
 80085b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085b6:	4652      	mov	r2, sl
 80085b8:	465b      	mov	r3, fp
 80085ba:	f7f7 fdcf 	bl	800015c <__adddf3>
 80085be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80085c2:	f7f7 ff81 	bl	80004c8 <__aeabi_dmul>
 80085c6:	4622      	mov	r2, r4
 80085c8:	462b      	mov	r3, r5
 80085ca:	f7f7 fdc7 	bl	800015c <__adddf3>
 80085ce:	4652      	mov	r2, sl
 80085d0:	4606      	mov	r6, r0
 80085d2:	460f      	mov	r7, r1
 80085d4:	465b      	mov	r3, fp
 80085d6:	4650      	mov	r0, sl
 80085d8:	4659      	mov	r1, fp
 80085da:	f7f7 ff75 	bl	80004c8 <__aeabi_dmul>
 80085de:	2200      	movs	r2, #0
 80085e0:	4b62      	ldr	r3, [pc, #392]	; (800876c <__ieee754_pow+0x734>)
 80085e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80085e6:	f7f7 fdb9 	bl	800015c <__adddf3>
 80085ea:	4632      	mov	r2, r6
 80085ec:	463b      	mov	r3, r7
 80085ee:	f7f7 fdb5 	bl	800015c <__adddf3>
 80085f2:	9804      	ldr	r0, [sp, #16]
 80085f4:	460d      	mov	r5, r1
 80085f6:	4604      	mov	r4, r0
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	4650      	mov	r0, sl
 80085fe:	4659      	mov	r1, fp
 8008600:	f7f7 ff62 	bl	80004c8 <__aeabi_dmul>
 8008604:	2200      	movs	r2, #0
 8008606:	4682      	mov	sl, r0
 8008608:	468b      	mov	fp, r1
 800860a:	4b58      	ldr	r3, [pc, #352]	; (800876c <__ieee754_pow+0x734>)
 800860c:	4620      	mov	r0, r4
 800860e:	4629      	mov	r1, r5
 8008610:	f7f7 fda2 	bl	8000158 <__aeabi_dsub>
 8008614:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008618:	f7f7 fd9e 	bl	8000158 <__aeabi_dsub>
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	4630      	mov	r0, r6
 8008622:	4639      	mov	r1, r7
 8008624:	f7f7 fd98 	bl	8000158 <__aeabi_dsub>
 8008628:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800862c:	f7f7 ff4c 	bl	80004c8 <__aeabi_dmul>
 8008630:	4622      	mov	r2, r4
 8008632:	4606      	mov	r6, r0
 8008634:	460f      	mov	r7, r1
 8008636:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800863a:	462b      	mov	r3, r5
 800863c:	f7f7 ff44 	bl	80004c8 <__aeabi_dmul>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	4630      	mov	r0, r6
 8008646:	4639      	mov	r1, r7
 8008648:	f7f7 fd88 	bl	800015c <__adddf3>
 800864c:	4606      	mov	r6, r0
 800864e:	460f      	mov	r7, r1
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	4650      	mov	r0, sl
 8008656:	4659      	mov	r1, fp
 8008658:	f7f7 fd80 	bl	800015c <__adddf3>
 800865c:	a338      	add	r3, pc, #224	; (adr r3, 8008740 <__ieee754_pow+0x708>)
 800865e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008662:	9804      	ldr	r0, [sp, #16]
 8008664:	460d      	mov	r5, r1
 8008666:	4604      	mov	r4, r0
 8008668:	f7f7 ff2e 	bl	80004c8 <__aeabi_dmul>
 800866c:	4652      	mov	r2, sl
 800866e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008672:	465b      	mov	r3, fp
 8008674:	4620      	mov	r0, r4
 8008676:	4629      	mov	r1, r5
 8008678:	f7f7 fd6e 	bl	8000158 <__aeabi_dsub>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4630      	mov	r0, r6
 8008682:	4639      	mov	r1, r7
 8008684:	f7f7 fd68 	bl	8000158 <__aeabi_dsub>
 8008688:	a32f      	add	r3, pc, #188	; (adr r3, 8008748 <__ieee754_pow+0x710>)
 800868a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868e:	f7f7 ff1b 	bl	80004c8 <__aeabi_dmul>
 8008692:	a32f      	add	r3, pc, #188	; (adr r3, 8008750 <__ieee754_pow+0x718>)
 8008694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008698:	4606      	mov	r6, r0
 800869a:	460f      	mov	r7, r1
 800869c:	4620      	mov	r0, r4
 800869e:	4629      	mov	r1, r5
 80086a0:	f7f7 ff12 	bl	80004c8 <__aeabi_dmul>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	4630      	mov	r0, r6
 80086aa:	4639      	mov	r1, r7
 80086ac:	f7f7 fd56 	bl	800015c <__adddf3>
 80086b0:	4b2f      	ldr	r3, [pc, #188]	; (8008770 <__ieee754_pow+0x738>)
 80086b2:	444b      	add	r3, r9
 80086b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b8:	f7f7 fd50 	bl	800015c <__adddf3>
 80086bc:	4604      	mov	r4, r0
 80086be:	980c      	ldr	r0, [sp, #48]	; 0x30
 80086c0:	460d      	mov	r5, r1
 80086c2:	f7f7 fe97 	bl	80003f4 <__aeabi_i2d>
 80086c6:	4606      	mov	r6, r0
 80086c8:	460f      	mov	r7, r1
 80086ca:	4b2a      	ldr	r3, [pc, #168]	; (8008774 <__ieee754_pow+0x73c>)
 80086cc:	4622      	mov	r2, r4
 80086ce:	444b      	add	r3, r9
 80086d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086d4:	462b      	mov	r3, r5
 80086d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086da:	f7f7 fd3f 	bl	800015c <__adddf3>
 80086de:	4642      	mov	r2, r8
 80086e0:	464b      	mov	r3, r9
 80086e2:	f7f7 fd3b 	bl	800015c <__adddf3>
 80086e6:	4632      	mov	r2, r6
 80086e8:	463b      	mov	r3, r7
 80086ea:	f7f7 fd37 	bl	800015c <__adddf3>
 80086ee:	9804      	ldr	r0, [sp, #16]
 80086f0:	4632      	mov	r2, r6
 80086f2:	463b      	mov	r3, r7
 80086f4:	4682      	mov	sl, r0
 80086f6:	468b      	mov	fp, r1
 80086f8:	f7f7 fd2e 	bl	8000158 <__aeabi_dsub>
 80086fc:	4642      	mov	r2, r8
 80086fe:	464b      	mov	r3, r9
 8008700:	f7f7 fd2a 	bl	8000158 <__aeabi_dsub>
 8008704:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008708:	e60b      	b.n	8008322 <__ieee754_pow+0x2ea>
 800870a:	f04f 0801 	mov.w	r8, #1
 800870e:	e6a8      	b.n	8008462 <__ieee754_pow+0x42a>
 8008710:	4a454eef 	.word	0x4a454eef
 8008714:	3fca7e28 	.word	0x3fca7e28
 8008718:	93c9db65 	.word	0x93c9db65
 800871c:	3fcd864a 	.word	0x3fcd864a
 8008720:	a91d4101 	.word	0xa91d4101
 8008724:	3fd17460 	.word	0x3fd17460
 8008728:	518f264d 	.word	0x518f264d
 800872c:	3fd55555 	.word	0x3fd55555
 8008730:	db6fabff 	.word	0xdb6fabff
 8008734:	3fdb6db6 	.word	0x3fdb6db6
 8008738:	33333303 	.word	0x33333303
 800873c:	3fe33333 	.word	0x3fe33333
 8008740:	e0000000 	.word	0xe0000000
 8008744:	3feec709 	.word	0x3feec709
 8008748:	dc3a03fd 	.word	0xdc3a03fd
 800874c:	3feec709 	.word	0x3feec709
 8008750:	145b01f5 	.word	0x145b01f5
 8008754:	be3e2fe0 	.word	0xbe3e2fe0
 8008758:	43400000 	.word	0x43400000
 800875c:	0003988e 	.word	0x0003988e
 8008760:	000bb679 	.word	0x000bb679
 8008764:	08009270 	.word	0x08009270
 8008768:	3ff00000 	.word	0x3ff00000
 800876c:	40080000 	.word	0x40080000
 8008770:	08009290 	.word	0x08009290
 8008774:	08009280 	.word	0x08009280
 8008778:	a39b      	add	r3, pc, #620	; (adr r3, 80089e8 <__ieee754_pow+0x9b0>)
 800877a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877e:	4640      	mov	r0, r8
 8008780:	4649      	mov	r1, r9
 8008782:	f7f7 fceb 	bl	800015c <__adddf3>
 8008786:	4622      	mov	r2, r4
 8008788:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800878c:	462b      	mov	r3, r5
 800878e:	4650      	mov	r0, sl
 8008790:	4639      	mov	r1, r7
 8008792:	f7f7 fce1 	bl	8000158 <__aeabi_dsub>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800879e:	f7f8 f923 	bl	80009e8 <__aeabi_dcmpgt>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	f47f ae0d 	bne.w	80083c2 <__ieee754_pow+0x38a>
 80087a8:	4aa3      	ldr	r2, [pc, #652]	; (8008a38 <__ieee754_pow+0xa00>)
 80087aa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80087ae:	4293      	cmp	r3, r2
 80087b0:	f340 8103 	ble.w	80089ba <__ieee754_pow+0x982>
 80087b4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80087b8:	2000      	movs	r0, #0
 80087ba:	151b      	asrs	r3, r3, #20
 80087bc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80087c0:	fa4a f303 	asr.w	r3, sl, r3
 80087c4:	4433      	add	r3, r6
 80087c6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80087ca:	4f9c      	ldr	r7, [pc, #624]	; (8008a3c <__ieee754_pow+0xa04>)
 80087cc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80087d0:	4117      	asrs	r7, r2
 80087d2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80087d6:	ea23 0107 	bic.w	r1, r3, r7
 80087da:	f1c2 0214 	rsb	r2, r2, #20
 80087de:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80087e2:	fa4a fa02 	asr.w	sl, sl, r2
 80087e6:	2e00      	cmp	r6, #0
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	4620      	mov	r0, r4
 80087ee:	4629      	mov	r1, r5
 80087f0:	bfb8      	it	lt
 80087f2:	f1ca 0a00 	rsblt	sl, sl, #0
 80087f6:	f7f7 fcaf 	bl	8000158 <__aeabi_dsub>
 80087fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008802:	4642      	mov	r2, r8
 8008804:	464b      	mov	r3, r9
 8008806:	f7f7 fca9 	bl	800015c <__adddf3>
 800880a:	a379      	add	r3, pc, #484	; (adr r3, 80089f0 <__ieee754_pow+0x9b8>)
 800880c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008810:	2000      	movs	r0, #0
 8008812:	460d      	mov	r5, r1
 8008814:	4604      	mov	r4, r0
 8008816:	f7f7 fe57 	bl	80004c8 <__aeabi_dmul>
 800881a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800881e:	4606      	mov	r6, r0
 8008820:	460f      	mov	r7, r1
 8008822:	4620      	mov	r0, r4
 8008824:	4629      	mov	r1, r5
 8008826:	f7f7 fc97 	bl	8000158 <__aeabi_dsub>
 800882a:	4602      	mov	r2, r0
 800882c:	460b      	mov	r3, r1
 800882e:	4640      	mov	r0, r8
 8008830:	4649      	mov	r1, r9
 8008832:	f7f7 fc91 	bl	8000158 <__aeabi_dsub>
 8008836:	a370      	add	r3, pc, #448	; (adr r3, 80089f8 <__ieee754_pow+0x9c0>)
 8008838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883c:	f7f7 fe44 	bl	80004c8 <__aeabi_dmul>
 8008840:	a36f      	add	r3, pc, #444	; (adr r3, 8008a00 <__ieee754_pow+0x9c8>)
 8008842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008846:	4680      	mov	r8, r0
 8008848:	4689      	mov	r9, r1
 800884a:	4620      	mov	r0, r4
 800884c:	4629      	mov	r1, r5
 800884e:	f7f7 fe3b 	bl	80004c8 <__aeabi_dmul>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4640      	mov	r0, r8
 8008858:	4649      	mov	r1, r9
 800885a:	f7f7 fc7f 	bl	800015c <__adddf3>
 800885e:	4604      	mov	r4, r0
 8008860:	460d      	mov	r5, r1
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	4630      	mov	r0, r6
 8008868:	4639      	mov	r1, r7
 800886a:	f7f7 fc77 	bl	800015c <__adddf3>
 800886e:	4632      	mov	r2, r6
 8008870:	463b      	mov	r3, r7
 8008872:	4680      	mov	r8, r0
 8008874:	4689      	mov	r9, r1
 8008876:	f7f7 fc6f 	bl	8000158 <__aeabi_dsub>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	4620      	mov	r0, r4
 8008880:	4629      	mov	r1, r5
 8008882:	f7f7 fc69 	bl	8000158 <__aeabi_dsub>
 8008886:	4642      	mov	r2, r8
 8008888:	4606      	mov	r6, r0
 800888a:	460f      	mov	r7, r1
 800888c:	464b      	mov	r3, r9
 800888e:	4640      	mov	r0, r8
 8008890:	4649      	mov	r1, r9
 8008892:	f7f7 fe19 	bl	80004c8 <__aeabi_dmul>
 8008896:	a35c      	add	r3, pc, #368	; (adr r3, 8008a08 <__ieee754_pow+0x9d0>)
 8008898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889c:	4604      	mov	r4, r0
 800889e:	460d      	mov	r5, r1
 80088a0:	f7f7 fe12 	bl	80004c8 <__aeabi_dmul>
 80088a4:	a35a      	add	r3, pc, #360	; (adr r3, 8008a10 <__ieee754_pow+0x9d8>)
 80088a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088aa:	f7f7 fc55 	bl	8000158 <__aeabi_dsub>
 80088ae:	4622      	mov	r2, r4
 80088b0:	462b      	mov	r3, r5
 80088b2:	f7f7 fe09 	bl	80004c8 <__aeabi_dmul>
 80088b6:	a358      	add	r3, pc, #352	; (adr r3, 8008a18 <__ieee754_pow+0x9e0>)
 80088b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088bc:	f7f7 fc4e 	bl	800015c <__adddf3>
 80088c0:	4622      	mov	r2, r4
 80088c2:	462b      	mov	r3, r5
 80088c4:	f7f7 fe00 	bl	80004c8 <__aeabi_dmul>
 80088c8:	a355      	add	r3, pc, #340	; (adr r3, 8008a20 <__ieee754_pow+0x9e8>)
 80088ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ce:	f7f7 fc43 	bl	8000158 <__aeabi_dsub>
 80088d2:	4622      	mov	r2, r4
 80088d4:	462b      	mov	r3, r5
 80088d6:	f7f7 fdf7 	bl	80004c8 <__aeabi_dmul>
 80088da:	a353      	add	r3, pc, #332	; (adr r3, 8008a28 <__ieee754_pow+0x9f0>)
 80088dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e0:	f7f7 fc3c 	bl	800015c <__adddf3>
 80088e4:	4622      	mov	r2, r4
 80088e6:	462b      	mov	r3, r5
 80088e8:	f7f7 fdee 	bl	80004c8 <__aeabi_dmul>
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	4640      	mov	r0, r8
 80088f2:	4649      	mov	r1, r9
 80088f4:	f7f7 fc30 	bl	8000158 <__aeabi_dsub>
 80088f8:	4604      	mov	r4, r0
 80088fa:	460d      	mov	r5, r1
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	4640      	mov	r0, r8
 8008902:	4649      	mov	r1, r9
 8008904:	f7f7 fde0 	bl	80004c8 <__aeabi_dmul>
 8008908:	2200      	movs	r2, #0
 800890a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800890e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008912:	4620      	mov	r0, r4
 8008914:	4629      	mov	r1, r5
 8008916:	f7f7 fc1f 	bl	8000158 <__aeabi_dsub>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008922:	f7f7 fefb 	bl	800071c <__aeabi_ddiv>
 8008926:	4632      	mov	r2, r6
 8008928:	4604      	mov	r4, r0
 800892a:	460d      	mov	r5, r1
 800892c:	463b      	mov	r3, r7
 800892e:	4640      	mov	r0, r8
 8008930:	4649      	mov	r1, r9
 8008932:	f7f7 fdc9 	bl	80004c8 <__aeabi_dmul>
 8008936:	4632      	mov	r2, r6
 8008938:	463b      	mov	r3, r7
 800893a:	f7f7 fc0f 	bl	800015c <__adddf3>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	4620      	mov	r0, r4
 8008944:	4629      	mov	r1, r5
 8008946:	f7f7 fc07 	bl	8000158 <__aeabi_dsub>
 800894a:	4642      	mov	r2, r8
 800894c:	464b      	mov	r3, r9
 800894e:	f7f7 fc03 	bl	8000158 <__aeabi_dsub>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	2000      	movs	r0, #0
 8008958:	4939      	ldr	r1, [pc, #228]	; (8008a40 <__ieee754_pow+0xa08>)
 800895a:	f7f7 fbfd 	bl	8000158 <__aeabi_dsub>
 800895e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008962:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008966:	da2b      	bge.n	80089c0 <__ieee754_pow+0x988>
 8008968:	4652      	mov	r2, sl
 800896a:	f000 fb45 	bl	8008ff8 <scalbn>
 800896e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008972:	f7ff bbf6 	b.w	8008162 <__ieee754_pow+0x12a>
 8008976:	4b33      	ldr	r3, [pc, #204]	; (8008a44 <__ieee754_pow+0xa0c>)
 8008978:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800897c:	429f      	cmp	r7, r3
 800897e:	f77f af13 	ble.w	80087a8 <__ieee754_pow+0x770>
 8008982:	4b31      	ldr	r3, [pc, #196]	; (8008a48 <__ieee754_pow+0xa10>)
 8008984:	440b      	add	r3, r1
 8008986:	4303      	orrs	r3, r0
 8008988:	d00b      	beq.n	80089a2 <__ieee754_pow+0x96a>
 800898a:	a329      	add	r3, pc, #164	; (adr r3, 8008a30 <__ieee754_pow+0x9f8>)
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008994:	f7f7 fd98 	bl	80004c8 <__aeabi_dmul>
 8008998:	a325      	add	r3, pc, #148	; (adr r3, 8008a30 <__ieee754_pow+0x9f8>)
 800899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899e:	f7ff bbe0 	b.w	8008162 <__ieee754_pow+0x12a>
 80089a2:	4622      	mov	r2, r4
 80089a4:	462b      	mov	r3, r5
 80089a6:	f7f7 fbd7 	bl	8000158 <__aeabi_dsub>
 80089aa:	4642      	mov	r2, r8
 80089ac:	464b      	mov	r3, r9
 80089ae:	f7f8 f811 	bl	80009d4 <__aeabi_dcmpge>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	f43f aef8 	beq.w	80087a8 <__ieee754_pow+0x770>
 80089b8:	e7e7      	b.n	800898a <__ieee754_pow+0x952>
 80089ba:	f04f 0a00 	mov.w	sl, #0
 80089be:	e71e      	b.n	80087fe <__ieee754_pow+0x7c6>
 80089c0:	4621      	mov	r1, r4
 80089c2:	e7d4      	b.n	800896e <__ieee754_pow+0x936>
 80089c4:	f04f 0b00 	mov.w	fp, #0
 80089c8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008a40 <__ieee754_pow+0xa08>
 80089cc:	f7ff bb95 	b.w	80080fa <__ieee754_pow+0xc2>
 80089d0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80089d4:	f7ff bb91 	b.w	80080fa <__ieee754_pow+0xc2>
 80089d8:	4638      	mov	r0, r7
 80089da:	4641      	mov	r1, r8
 80089dc:	f7ff bbc3 	b.w	8008166 <__ieee754_pow+0x12e>
 80089e0:	9200      	str	r2, [sp, #0]
 80089e2:	f7ff bb9f 	b.w	8008124 <__ieee754_pow+0xec>
 80089e6:	bf00      	nop
 80089e8:	652b82fe 	.word	0x652b82fe
 80089ec:	3c971547 	.word	0x3c971547
 80089f0:	00000000 	.word	0x00000000
 80089f4:	3fe62e43 	.word	0x3fe62e43
 80089f8:	fefa39ef 	.word	0xfefa39ef
 80089fc:	3fe62e42 	.word	0x3fe62e42
 8008a00:	0ca86c39 	.word	0x0ca86c39
 8008a04:	be205c61 	.word	0xbe205c61
 8008a08:	72bea4d0 	.word	0x72bea4d0
 8008a0c:	3e663769 	.word	0x3e663769
 8008a10:	c5d26bf1 	.word	0xc5d26bf1
 8008a14:	3ebbbd41 	.word	0x3ebbbd41
 8008a18:	af25de2c 	.word	0xaf25de2c
 8008a1c:	3f11566a 	.word	0x3f11566a
 8008a20:	16bebd93 	.word	0x16bebd93
 8008a24:	3f66c16c 	.word	0x3f66c16c
 8008a28:	5555553e 	.word	0x5555553e
 8008a2c:	3fc55555 	.word	0x3fc55555
 8008a30:	c2f8f359 	.word	0xc2f8f359
 8008a34:	01a56e1f 	.word	0x01a56e1f
 8008a38:	3fe00000 	.word	0x3fe00000
 8008a3c:	000fffff 	.word	0x000fffff
 8008a40:	3ff00000 	.word	0x3ff00000
 8008a44:	4090cbff 	.word	0x4090cbff
 8008a48:	3f6f3400 	.word	0x3f6f3400

08008a4c <__ieee754_sqrt>:
 8008a4c:	4b54      	ldr	r3, [pc, #336]	; (8008ba0 <__ieee754_sqrt+0x154>)
 8008a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a52:	438b      	bics	r3, r1
 8008a54:	4606      	mov	r6, r0
 8008a56:	460d      	mov	r5, r1
 8008a58:	460a      	mov	r2, r1
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	d10f      	bne.n	8008a7e <__ieee754_sqrt+0x32>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	f7f7 fd31 	bl	80004c8 <__aeabi_dmul>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	f7f7 fb75 	bl	800015c <__adddf3>
 8008a72:	4606      	mov	r6, r0
 8008a74:	460d      	mov	r5, r1
 8008a76:	4630      	mov	r0, r6
 8008a78:	4629      	mov	r1, r5
 8008a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a7e:	2900      	cmp	r1, #0
 8008a80:	4607      	mov	r7, r0
 8008a82:	4603      	mov	r3, r0
 8008a84:	dc0e      	bgt.n	8008aa4 <__ieee754_sqrt+0x58>
 8008a86:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008a8a:	ea5c 0707 	orrs.w	r7, ip, r7
 8008a8e:	d0f2      	beq.n	8008a76 <__ieee754_sqrt+0x2a>
 8008a90:	b141      	cbz	r1, 8008aa4 <__ieee754_sqrt+0x58>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	f7f7 fb5f 	bl	8000158 <__aeabi_dsub>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	f7f7 fe3d 	bl	800071c <__aeabi_ddiv>
 8008aa2:	e7e6      	b.n	8008a72 <__ieee754_sqrt+0x26>
 8008aa4:	1512      	asrs	r2, r2, #20
 8008aa6:	d074      	beq.n	8008b92 <__ieee754_sqrt+0x146>
 8008aa8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008aac:	07d5      	lsls	r5, r2, #31
 8008aae:	f04f 0500 	mov.w	r5, #0
 8008ab2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008ab6:	bf48      	it	mi
 8008ab8:	0fd9      	lsrmi	r1, r3, #31
 8008aba:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008abe:	bf44      	itt	mi
 8008ac0:	005b      	lslmi	r3, r3, #1
 8008ac2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8008ac6:	1051      	asrs	r1, r2, #1
 8008ac8:	0fda      	lsrs	r2, r3, #31
 8008aca:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8008ace:	4628      	mov	r0, r5
 8008ad0:	2216      	movs	r2, #22
 8008ad2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	1987      	adds	r7, r0, r6
 8008ada:	42a7      	cmp	r7, r4
 8008adc:	bfde      	ittt	le
 8008ade:	19b8      	addle	r0, r7, r6
 8008ae0:	1be4      	suble	r4, r4, r7
 8008ae2:	19ad      	addle	r5, r5, r6
 8008ae4:	0fdf      	lsrs	r7, r3, #31
 8008ae6:	3a01      	subs	r2, #1
 8008ae8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8008aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008af0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008af4:	d1f0      	bne.n	8008ad8 <__ieee754_sqrt+0x8c>
 8008af6:	f04f 0c20 	mov.w	ip, #32
 8008afa:	4696      	mov	lr, r2
 8008afc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008b00:	4284      	cmp	r4, r0
 8008b02:	eb06 070e 	add.w	r7, r6, lr
 8008b06:	dc02      	bgt.n	8008b0e <__ieee754_sqrt+0xc2>
 8008b08:	d112      	bne.n	8008b30 <__ieee754_sqrt+0xe4>
 8008b0a:	429f      	cmp	r7, r3
 8008b0c:	d810      	bhi.n	8008b30 <__ieee754_sqrt+0xe4>
 8008b0e:	2f00      	cmp	r7, #0
 8008b10:	eb07 0e06 	add.w	lr, r7, r6
 8008b14:	da42      	bge.n	8008b9c <__ieee754_sqrt+0x150>
 8008b16:	f1be 0f00 	cmp.w	lr, #0
 8008b1a:	db3f      	blt.n	8008b9c <__ieee754_sqrt+0x150>
 8008b1c:	f100 0801 	add.w	r8, r0, #1
 8008b20:	1a24      	subs	r4, r4, r0
 8008b22:	4640      	mov	r0, r8
 8008b24:	429f      	cmp	r7, r3
 8008b26:	bf88      	it	hi
 8008b28:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 8008b2c:	1bdb      	subs	r3, r3, r7
 8008b2e:	4432      	add	r2, r6
 8008b30:	0064      	lsls	r4, r4, #1
 8008b32:	f1bc 0c01 	subs.w	ip, ip, #1
 8008b36:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8008b3a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008b3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008b42:	d1dd      	bne.n	8008b00 <__ieee754_sqrt+0xb4>
 8008b44:	4323      	orrs	r3, r4
 8008b46:	d006      	beq.n	8008b56 <__ieee754_sqrt+0x10a>
 8008b48:	1c54      	adds	r4, r2, #1
 8008b4a:	bf0b      	itete	eq
 8008b4c:	4662      	moveq	r2, ip
 8008b4e:	3201      	addne	r2, #1
 8008b50:	3501      	addeq	r5, #1
 8008b52:	f022 0201 	bicne.w	r2, r2, #1
 8008b56:	106b      	asrs	r3, r5, #1
 8008b58:	0852      	lsrs	r2, r2, #1
 8008b5a:	07e8      	lsls	r0, r5, #31
 8008b5c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008b60:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008b64:	bf48      	it	mi
 8008b66:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008b6a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8008b6e:	4616      	mov	r6, r2
 8008b70:	e781      	b.n	8008a76 <__ieee754_sqrt+0x2a>
 8008b72:	0adc      	lsrs	r4, r3, #11
 8008b74:	3915      	subs	r1, #21
 8008b76:	055b      	lsls	r3, r3, #21
 8008b78:	2c00      	cmp	r4, #0
 8008b7a:	d0fa      	beq.n	8008b72 <__ieee754_sqrt+0x126>
 8008b7c:	02e6      	lsls	r6, r4, #11
 8008b7e:	d50a      	bpl.n	8008b96 <__ieee754_sqrt+0x14a>
 8008b80:	f1c2 0020 	rsb	r0, r2, #32
 8008b84:	fa23 f000 	lsr.w	r0, r3, r0
 8008b88:	1e55      	subs	r5, r2, #1
 8008b8a:	4093      	lsls	r3, r2
 8008b8c:	4304      	orrs	r4, r0
 8008b8e:	1b4a      	subs	r2, r1, r5
 8008b90:	e78a      	b.n	8008aa8 <__ieee754_sqrt+0x5c>
 8008b92:	4611      	mov	r1, r2
 8008b94:	e7f0      	b.n	8008b78 <__ieee754_sqrt+0x12c>
 8008b96:	0064      	lsls	r4, r4, #1
 8008b98:	3201      	adds	r2, #1
 8008b9a:	e7ef      	b.n	8008b7c <__ieee754_sqrt+0x130>
 8008b9c:	4680      	mov	r8, r0
 8008b9e:	e7bf      	b.n	8008b20 <__ieee754_sqrt+0xd4>
 8008ba0:	7ff00000 	.word	0x7ff00000
 8008ba4:	00000000 	.word	0x00000000

08008ba8 <atan>:
 8008ba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bac:	4bb6      	ldr	r3, [pc, #728]	; (8008e88 <atan+0x2e0>)
 8008bae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008bb2:	429e      	cmp	r6, r3
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	460d      	mov	r5, r1
 8008bb8:	468b      	mov	fp, r1
 8008bba:	dd17      	ble.n	8008bec <atan+0x44>
 8008bbc:	4bb3      	ldr	r3, [pc, #716]	; (8008e8c <atan+0x2e4>)
 8008bbe:	429e      	cmp	r6, r3
 8008bc0:	dc01      	bgt.n	8008bc6 <atan+0x1e>
 8008bc2:	d109      	bne.n	8008bd8 <atan+0x30>
 8008bc4:	b140      	cbz	r0, 8008bd8 <atan+0x30>
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	462b      	mov	r3, r5
 8008bca:	4620      	mov	r0, r4
 8008bcc:	4629      	mov	r1, r5
 8008bce:	f7f7 fac5 	bl	800015c <__adddf3>
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	460d      	mov	r5, r1
 8008bd6:	e005      	b.n	8008be4 <atan+0x3c>
 8008bd8:	f1bb 0f00 	cmp.w	fp, #0
 8008bdc:	4cac      	ldr	r4, [pc, #688]	; (8008e90 <atan+0x2e8>)
 8008bde:	f340 8121 	ble.w	8008e24 <atan+0x27c>
 8008be2:	4dac      	ldr	r5, [pc, #688]	; (8008e94 <atan+0x2ec>)
 8008be4:	4620      	mov	r0, r4
 8008be6:	4629      	mov	r1, r5
 8008be8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bec:	4baa      	ldr	r3, [pc, #680]	; (8008e98 <atan+0x2f0>)
 8008bee:	429e      	cmp	r6, r3
 8008bf0:	dc11      	bgt.n	8008c16 <atan+0x6e>
 8008bf2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008bf6:	429e      	cmp	r6, r3
 8008bf8:	dc0a      	bgt.n	8008c10 <atan+0x68>
 8008bfa:	a38b      	add	r3, pc, #556	; (adr r3, 8008e28 <atan+0x280>)
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	f7f7 faac 	bl	800015c <__adddf3>
 8008c04:	2200      	movs	r2, #0
 8008c06:	4ba5      	ldr	r3, [pc, #660]	; (8008e9c <atan+0x2f4>)
 8008c08:	f7f7 feee 	bl	80009e8 <__aeabi_dcmpgt>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	d1e9      	bne.n	8008be4 <atan+0x3c>
 8008c10:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008c14:	e027      	b.n	8008c66 <atan+0xbe>
 8008c16:	f000 f951 	bl	8008ebc <fabs>
 8008c1a:	4ba1      	ldr	r3, [pc, #644]	; (8008ea0 <atan+0x2f8>)
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	429e      	cmp	r6, r3
 8008c20:	460d      	mov	r5, r1
 8008c22:	f300 80b8 	bgt.w	8008d96 <atan+0x1ee>
 8008c26:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008c2a:	429e      	cmp	r6, r3
 8008c2c:	f300 809c 	bgt.w	8008d68 <atan+0x1c0>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	f7f7 fa92 	bl	800015c <__adddf3>
 8008c38:	2200      	movs	r2, #0
 8008c3a:	4b98      	ldr	r3, [pc, #608]	; (8008e9c <atan+0x2f4>)
 8008c3c:	f7f7 fa8c 	bl	8000158 <__aeabi_dsub>
 8008c40:	2200      	movs	r2, #0
 8008c42:	4606      	mov	r6, r0
 8008c44:	460f      	mov	r7, r1
 8008c46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	f7f7 fa85 	bl	800015c <__adddf3>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4630      	mov	r0, r6
 8008c58:	4639      	mov	r1, r7
 8008c5a:	f7f7 fd5f 	bl	800071c <__aeabi_ddiv>
 8008c5e:	f04f 0a00 	mov.w	sl, #0
 8008c62:	4604      	mov	r4, r0
 8008c64:	460d      	mov	r5, r1
 8008c66:	4622      	mov	r2, r4
 8008c68:	462b      	mov	r3, r5
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	4629      	mov	r1, r5
 8008c6e:	f7f7 fc2b 	bl	80004c8 <__aeabi_dmul>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	4680      	mov	r8, r0
 8008c78:	4689      	mov	r9, r1
 8008c7a:	f7f7 fc25 	bl	80004c8 <__aeabi_dmul>
 8008c7e:	a36c      	add	r3, pc, #432	; (adr r3, 8008e30 <atan+0x288>)
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	4606      	mov	r6, r0
 8008c86:	460f      	mov	r7, r1
 8008c88:	f7f7 fc1e 	bl	80004c8 <__aeabi_dmul>
 8008c8c:	a36a      	add	r3, pc, #424	; (adr r3, 8008e38 <atan+0x290>)
 8008c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c92:	f7f7 fa63 	bl	800015c <__adddf3>
 8008c96:	4632      	mov	r2, r6
 8008c98:	463b      	mov	r3, r7
 8008c9a:	f7f7 fc15 	bl	80004c8 <__aeabi_dmul>
 8008c9e:	a368      	add	r3, pc, #416	; (adr r3, 8008e40 <atan+0x298>)
 8008ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca4:	f7f7 fa5a 	bl	800015c <__adddf3>
 8008ca8:	4632      	mov	r2, r6
 8008caa:	463b      	mov	r3, r7
 8008cac:	f7f7 fc0c 	bl	80004c8 <__aeabi_dmul>
 8008cb0:	a365      	add	r3, pc, #404	; (adr r3, 8008e48 <atan+0x2a0>)
 8008cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb6:	f7f7 fa51 	bl	800015c <__adddf3>
 8008cba:	4632      	mov	r2, r6
 8008cbc:	463b      	mov	r3, r7
 8008cbe:	f7f7 fc03 	bl	80004c8 <__aeabi_dmul>
 8008cc2:	a363      	add	r3, pc, #396	; (adr r3, 8008e50 <atan+0x2a8>)
 8008cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc8:	f7f7 fa48 	bl	800015c <__adddf3>
 8008ccc:	4632      	mov	r2, r6
 8008cce:	463b      	mov	r3, r7
 8008cd0:	f7f7 fbfa 	bl	80004c8 <__aeabi_dmul>
 8008cd4:	a360      	add	r3, pc, #384	; (adr r3, 8008e58 <atan+0x2b0>)
 8008cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cda:	f7f7 fa3f 	bl	800015c <__adddf3>
 8008cde:	4642      	mov	r2, r8
 8008ce0:	464b      	mov	r3, r9
 8008ce2:	f7f7 fbf1 	bl	80004c8 <__aeabi_dmul>
 8008ce6:	a35e      	add	r3, pc, #376	; (adr r3, 8008e60 <atan+0x2b8>)
 8008ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cec:	4680      	mov	r8, r0
 8008cee:	4689      	mov	r9, r1
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	4639      	mov	r1, r7
 8008cf4:	f7f7 fbe8 	bl	80004c8 <__aeabi_dmul>
 8008cf8:	a35b      	add	r3, pc, #364	; (adr r3, 8008e68 <atan+0x2c0>)
 8008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfe:	f7f7 fa2b 	bl	8000158 <__aeabi_dsub>
 8008d02:	4632      	mov	r2, r6
 8008d04:	463b      	mov	r3, r7
 8008d06:	f7f7 fbdf 	bl	80004c8 <__aeabi_dmul>
 8008d0a:	a359      	add	r3, pc, #356	; (adr r3, 8008e70 <atan+0x2c8>)
 8008d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d10:	f7f7 fa22 	bl	8000158 <__aeabi_dsub>
 8008d14:	4632      	mov	r2, r6
 8008d16:	463b      	mov	r3, r7
 8008d18:	f7f7 fbd6 	bl	80004c8 <__aeabi_dmul>
 8008d1c:	a356      	add	r3, pc, #344	; (adr r3, 8008e78 <atan+0x2d0>)
 8008d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d22:	f7f7 fa19 	bl	8000158 <__aeabi_dsub>
 8008d26:	4632      	mov	r2, r6
 8008d28:	463b      	mov	r3, r7
 8008d2a:	f7f7 fbcd 	bl	80004c8 <__aeabi_dmul>
 8008d2e:	a354      	add	r3, pc, #336	; (adr r3, 8008e80 <atan+0x2d8>)
 8008d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d34:	f7f7 fa10 	bl	8000158 <__aeabi_dsub>
 8008d38:	4632      	mov	r2, r6
 8008d3a:	463b      	mov	r3, r7
 8008d3c:	f7f7 fbc4 	bl	80004c8 <__aeabi_dmul>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4640      	mov	r0, r8
 8008d46:	4649      	mov	r1, r9
 8008d48:	f7f7 fa08 	bl	800015c <__adddf3>
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	462b      	mov	r3, r5
 8008d50:	f7f7 fbba 	bl	80004c8 <__aeabi_dmul>
 8008d54:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	d144      	bne.n	8008de8 <atan+0x240>
 8008d5e:	4620      	mov	r0, r4
 8008d60:	4629      	mov	r1, r5
 8008d62:	f7f7 f9f9 	bl	8000158 <__aeabi_dsub>
 8008d66:	e734      	b.n	8008bd2 <atan+0x2a>
 8008d68:	2200      	movs	r2, #0
 8008d6a:	4b4c      	ldr	r3, [pc, #304]	; (8008e9c <atan+0x2f4>)
 8008d6c:	f7f7 f9f4 	bl	8000158 <__aeabi_dsub>
 8008d70:	2200      	movs	r2, #0
 8008d72:	4606      	mov	r6, r0
 8008d74:	460f      	mov	r7, r1
 8008d76:	4b49      	ldr	r3, [pc, #292]	; (8008e9c <atan+0x2f4>)
 8008d78:	4620      	mov	r0, r4
 8008d7a:	4629      	mov	r1, r5
 8008d7c:	f7f7 f9ee 	bl	800015c <__adddf3>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4630      	mov	r0, r6
 8008d86:	4639      	mov	r1, r7
 8008d88:	f7f7 fcc8 	bl	800071c <__aeabi_ddiv>
 8008d8c:	f04f 0a01 	mov.w	sl, #1
 8008d90:	4604      	mov	r4, r0
 8008d92:	460d      	mov	r5, r1
 8008d94:	e767      	b.n	8008c66 <atan+0xbe>
 8008d96:	4b43      	ldr	r3, [pc, #268]	; (8008ea4 <atan+0x2fc>)
 8008d98:	429e      	cmp	r6, r3
 8008d9a:	dc1a      	bgt.n	8008dd2 <atan+0x22a>
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	4b42      	ldr	r3, [pc, #264]	; (8008ea8 <atan+0x300>)
 8008da0:	f7f7 f9da 	bl	8000158 <__aeabi_dsub>
 8008da4:	2200      	movs	r2, #0
 8008da6:	4606      	mov	r6, r0
 8008da8:	460f      	mov	r7, r1
 8008daa:	4b3f      	ldr	r3, [pc, #252]	; (8008ea8 <atan+0x300>)
 8008dac:	4620      	mov	r0, r4
 8008dae:	4629      	mov	r1, r5
 8008db0:	f7f7 fb8a 	bl	80004c8 <__aeabi_dmul>
 8008db4:	2200      	movs	r2, #0
 8008db6:	4b39      	ldr	r3, [pc, #228]	; (8008e9c <atan+0x2f4>)
 8008db8:	f7f7 f9d0 	bl	800015c <__adddf3>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	4639      	mov	r1, r7
 8008dc4:	f7f7 fcaa 	bl	800071c <__aeabi_ddiv>
 8008dc8:	f04f 0a02 	mov.w	sl, #2
 8008dcc:	4604      	mov	r4, r0
 8008dce:	460d      	mov	r5, r1
 8008dd0:	e749      	b.n	8008c66 <atan+0xbe>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	4934      	ldr	r1, [pc, #208]	; (8008eac <atan+0x304>)
 8008dda:	f7f7 fc9f 	bl	800071c <__aeabi_ddiv>
 8008dde:	f04f 0a03 	mov.w	sl, #3
 8008de2:	4604      	mov	r4, r0
 8008de4:	460d      	mov	r5, r1
 8008de6:	e73e      	b.n	8008c66 <atan+0xbe>
 8008de8:	4b31      	ldr	r3, [pc, #196]	; (8008eb0 <atan+0x308>)
 8008dea:	4e32      	ldr	r6, [pc, #200]	; (8008eb4 <atan+0x30c>)
 8008dec:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8008df0:	4456      	add	r6, sl
 8008df2:	449a      	add	sl, r3
 8008df4:	e9da 2300 	ldrd	r2, r3, [sl]
 8008df8:	f7f7 f9ae 	bl	8000158 <__aeabi_dsub>
 8008dfc:	4622      	mov	r2, r4
 8008dfe:	462b      	mov	r3, r5
 8008e00:	f7f7 f9aa 	bl	8000158 <__aeabi_dsub>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008e0c:	f7f7 f9a4 	bl	8000158 <__aeabi_dsub>
 8008e10:	f1bb 0f00 	cmp.w	fp, #0
 8008e14:	4604      	mov	r4, r0
 8008e16:	460d      	mov	r5, r1
 8008e18:	f6bf aee4 	bge.w	8008be4 <atan+0x3c>
 8008e1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e20:	461d      	mov	r5, r3
 8008e22:	e6df      	b.n	8008be4 <atan+0x3c>
 8008e24:	4d24      	ldr	r5, [pc, #144]	; (8008eb8 <atan+0x310>)
 8008e26:	e6dd      	b.n	8008be4 <atan+0x3c>
 8008e28:	8800759c 	.word	0x8800759c
 8008e2c:	7e37e43c 	.word	0x7e37e43c
 8008e30:	e322da11 	.word	0xe322da11
 8008e34:	3f90ad3a 	.word	0x3f90ad3a
 8008e38:	24760deb 	.word	0x24760deb
 8008e3c:	3fa97b4b 	.word	0x3fa97b4b
 8008e40:	a0d03d51 	.word	0xa0d03d51
 8008e44:	3fb10d66 	.word	0x3fb10d66
 8008e48:	c54c206e 	.word	0xc54c206e
 8008e4c:	3fb745cd 	.word	0x3fb745cd
 8008e50:	920083ff 	.word	0x920083ff
 8008e54:	3fc24924 	.word	0x3fc24924
 8008e58:	5555550d 	.word	0x5555550d
 8008e5c:	3fd55555 	.word	0x3fd55555
 8008e60:	2c6a6c2f 	.word	0x2c6a6c2f
 8008e64:	bfa2b444 	.word	0xbfa2b444
 8008e68:	52defd9a 	.word	0x52defd9a
 8008e6c:	3fadde2d 	.word	0x3fadde2d
 8008e70:	af749a6d 	.word	0xaf749a6d
 8008e74:	3fb3b0f2 	.word	0x3fb3b0f2
 8008e78:	fe231671 	.word	0xfe231671
 8008e7c:	3fbc71c6 	.word	0x3fbc71c6
 8008e80:	9998ebc4 	.word	0x9998ebc4
 8008e84:	3fc99999 	.word	0x3fc99999
 8008e88:	440fffff 	.word	0x440fffff
 8008e8c:	7ff00000 	.word	0x7ff00000
 8008e90:	54442d18 	.word	0x54442d18
 8008e94:	3ff921fb 	.word	0x3ff921fb
 8008e98:	3fdbffff 	.word	0x3fdbffff
 8008e9c:	3ff00000 	.word	0x3ff00000
 8008ea0:	3ff2ffff 	.word	0x3ff2ffff
 8008ea4:	40037fff 	.word	0x40037fff
 8008ea8:	3ff80000 	.word	0x3ff80000
 8008eac:	bff00000 	.word	0xbff00000
 8008eb0:	080092c0 	.word	0x080092c0
 8008eb4:	080092a0 	.word	0x080092a0
 8008eb8:	bff921fb 	.word	0xbff921fb

08008ebc <fabs>:
 8008ebc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4770      	bx	lr

08008ec4 <finite>:
 8008ec4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8008ec8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8008ecc:	0fc0      	lsrs	r0, r0, #31
 8008ece:	4770      	bx	lr

08008ed0 <matherr>:
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	4770      	bx	lr

08008ed4 <nan>:
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	4901      	ldr	r1, [pc, #4]	; (8008edc <nan+0x8>)
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	7ff80000 	.word	0x7ff80000

08008ee0 <rint>:
 8008ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ee2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008ee6:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8008eea:	f1bc 0f13 	cmp.w	ip, #19
 8008eee:	4604      	mov	r4, r0
 8008ef0:	460d      	mov	r5, r1
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8008efa:	dc5a      	bgt.n	8008fb2 <rint+0xd2>
 8008efc:	f1bc 0f00 	cmp.w	ip, #0
 8008f00:	da2b      	bge.n	8008f5a <rint+0x7a>
 8008f02:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008f06:	4302      	orrs	r2, r0
 8008f08:	d023      	beq.n	8008f52 <rint+0x72>
 8008f0a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008f0e:	4302      	orrs	r2, r0
 8008f10:	4256      	negs	r6, r2
 8008f12:	4316      	orrs	r6, r2
 8008f14:	0c4b      	lsrs	r3, r1, #17
 8008f16:	0b36      	lsrs	r6, r6, #12
 8008f18:	4934      	ldr	r1, [pc, #208]	; (8008fec <rint+0x10c>)
 8008f1a:	045b      	lsls	r3, r3, #17
 8008f1c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8008f20:	ea46 0503 	orr.w	r5, r6, r3
 8008f24:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8008f28:	4602      	mov	r2, r0
 8008f2a:	462b      	mov	r3, r5
 8008f2c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8008f30:	4620      	mov	r0, r4
 8008f32:	4629      	mov	r1, r5
 8008f34:	f7f7 f912 	bl	800015c <__adddf3>
 8008f38:	e9cd 0100 	strd	r0, r1, [sp]
 8008f3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f40:	462b      	mov	r3, r5
 8008f42:	4622      	mov	r2, r4
 8008f44:	f7f7 f908 	bl	8000158 <__aeabi_dsub>
 8008f48:	4604      	mov	r4, r0
 8008f4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f4e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8008f52:	4620      	mov	r0, r4
 8008f54:	4629      	mov	r1, r5
 8008f56:	b003      	add	sp, #12
 8008f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f5a:	4a25      	ldr	r2, [pc, #148]	; (8008ff0 <rint+0x110>)
 8008f5c:	fa42 f20c 	asr.w	r2, r2, ip
 8008f60:	4011      	ands	r1, r2
 8008f62:	4301      	orrs	r1, r0
 8008f64:	d0f5      	beq.n	8008f52 <rint+0x72>
 8008f66:	0852      	lsrs	r2, r2, #1
 8008f68:	ea05 0102 	and.w	r1, r5, r2
 8008f6c:	ea50 0601 	orrs.w	r6, r0, r1
 8008f70:	d00c      	beq.n	8008f8c <rint+0xac>
 8008f72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008f76:	f1bc 0f13 	cmp.w	ip, #19
 8008f7a:	bf0c      	ite	eq
 8008f7c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8008f80:	2600      	movne	r6, #0
 8008f82:	ea25 0202 	bic.w	r2, r5, r2
 8008f86:	fa43 f30c 	asr.w	r3, r3, ip
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	4917      	ldr	r1, [pc, #92]	; (8008fec <rint+0x10c>)
 8008f8e:	4632      	mov	r2, r6
 8008f90:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8008f94:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008f98:	4620      	mov	r0, r4
 8008f9a:	4629      	mov	r1, r5
 8008f9c:	f7f7 f8de 	bl	800015c <__adddf3>
 8008fa0:	e9cd 0100 	strd	r0, r1, [sp]
 8008fa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fa8:	4622      	mov	r2, r4
 8008faa:	462b      	mov	r3, r5
 8008fac:	f7f7 f8d4 	bl	8000158 <__aeabi_dsub>
 8008fb0:	e008      	b.n	8008fc4 <rint+0xe4>
 8008fb2:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8008fb6:	dd08      	ble.n	8008fca <rint+0xea>
 8008fb8:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8008fbc:	d1c9      	bne.n	8008f52 <rint+0x72>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	f7f7 f8cc 	bl	800015c <__adddf3>
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	460d      	mov	r5, r1
 8008fc8:	e7c3      	b.n	8008f52 <rint+0x72>
 8008fca:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8008fce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fd2:	40ca      	lsrs	r2, r1
 8008fd4:	4210      	tst	r0, r2
 8008fd6:	d0bc      	beq.n	8008f52 <rint+0x72>
 8008fd8:	0852      	lsrs	r2, r2, #1
 8008fda:	4210      	tst	r0, r2
 8008fdc:	bf1f      	itttt	ne
 8008fde:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8008fe2:	ea20 0202 	bicne.w	r2, r0, r2
 8008fe6:	410e      	asrne	r6, r1
 8008fe8:	4316      	orrne	r6, r2
 8008fea:	e7cf      	b.n	8008f8c <rint+0xac>
 8008fec:	080092e0 	.word	0x080092e0
 8008ff0:	000fffff 	.word	0x000fffff
 8008ff4:	00000000 	.word	0x00000000

08008ff8 <scalbn>:
 8008ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffa:	4616      	mov	r6, r2
 8008ffc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009000:	4604      	mov	r4, r0
 8009002:	460d      	mov	r5, r1
 8009004:	460b      	mov	r3, r1
 8009006:	b982      	cbnz	r2, 800902a <scalbn+0x32>
 8009008:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800900c:	4303      	orrs	r3, r0
 800900e:	d034      	beq.n	800907a <scalbn+0x82>
 8009010:	4b2d      	ldr	r3, [pc, #180]	; (80090c8 <scalbn+0xd0>)
 8009012:	2200      	movs	r2, #0
 8009014:	f7f7 fa58 	bl	80004c8 <__aeabi_dmul>
 8009018:	4b2c      	ldr	r3, [pc, #176]	; (80090cc <scalbn+0xd4>)
 800901a:	4604      	mov	r4, r0
 800901c:	429e      	cmp	r6, r3
 800901e:	460d      	mov	r5, r1
 8009020:	da0d      	bge.n	800903e <scalbn+0x46>
 8009022:	a325      	add	r3, pc, #148	; (adr r3, 80090b8 <scalbn+0xc0>)
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	e01c      	b.n	8009064 <scalbn+0x6c>
 800902a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800902e:	42ba      	cmp	r2, r7
 8009030:	d109      	bne.n	8009046 <scalbn+0x4e>
 8009032:	4602      	mov	r2, r0
 8009034:	f7f7 f892 	bl	800015c <__adddf3>
 8009038:	4604      	mov	r4, r0
 800903a:	460d      	mov	r5, r1
 800903c:	e01d      	b.n	800907a <scalbn+0x82>
 800903e:	460b      	mov	r3, r1
 8009040:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009044:	3a36      	subs	r2, #54	; 0x36
 8009046:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800904a:	4432      	add	r2, r6
 800904c:	428a      	cmp	r2, r1
 800904e:	dd0c      	ble.n	800906a <scalbn+0x72>
 8009050:	4622      	mov	r2, r4
 8009052:	462b      	mov	r3, r5
 8009054:	a11a      	add	r1, pc, #104	; (adr r1, 80090c0 <scalbn+0xc8>)
 8009056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800905a:	f000 f83b 	bl	80090d4 <copysign>
 800905e:	a318      	add	r3, pc, #96	; (adr r3, 80090c0 <scalbn+0xc8>)
 8009060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009064:	f7f7 fa30 	bl	80004c8 <__aeabi_dmul>
 8009068:	e7e6      	b.n	8009038 <scalbn+0x40>
 800906a:	2a00      	cmp	r2, #0
 800906c:	dd08      	ble.n	8009080 <scalbn+0x88>
 800906e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009072:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009076:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800907a:	4620      	mov	r0, r4
 800907c:	4629      	mov	r1, r5
 800907e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009080:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009084:	da0b      	bge.n	800909e <scalbn+0xa6>
 8009086:	f24c 3350 	movw	r3, #50000	; 0xc350
 800908a:	429e      	cmp	r6, r3
 800908c:	4622      	mov	r2, r4
 800908e:	462b      	mov	r3, r5
 8009090:	dce0      	bgt.n	8009054 <scalbn+0x5c>
 8009092:	a109      	add	r1, pc, #36	; (adr r1, 80090b8 <scalbn+0xc0>)
 8009094:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009098:	f000 f81c 	bl	80090d4 <copysign>
 800909c:	e7c1      	b.n	8009022 <scalbn+0x2a>
 800909e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80090a2:	3236      	adds	r2, #54	; 0x36
 80090a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80090a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80090ac:	4620      	mov	r0, r4
 80090ae:	4629      	mov	r1, r5
 80090b0:	2200      	movs	r2, #0
 80090b2:	4b07      	ldr	r3, [pc, #28]	; (80090d0 <scalbn+0xd8>)
 80090b4:	e7d6      	b.n	8009064 <scalbn+0x6c>
 80090b6:	bf00      	nop
 80090b8:	c2f8f359 	.word	0xc2f8f359
 80090bc:	01a56e1f 	.word	0x01a56e1f
 80090c0:	8800759c 	.word	0x8800759c
 80090c4:	7e37e43c 	.word	0x7e37e43c
 80090c8:	43500000 	.word	0x43500000
 80090cc:	ffff3cb0 	.word	0xffff3cb0
 80090d0:	3c900000 	.word	0x3c900000

080090d4 <copysign>:
 80090d4:	b530      	push	{r4, r5, lr}
 80090d6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80090da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090de:	ea42 0503 	orr.w	r5, r2, r3
 80090e2:	4629      	mov	r1, r5
 80090e4:	bd30      	pop	{r4, r5, pc}
	...

080090e8 <_init>:
 80090e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ea:	bf00      	nop
 80090ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ee:	bc08      	pop	{r3}
 80090f0:	469e      	mov	lr, r3
 80090f2:	4770      	bx	lr

080090f4 <_fini>:
 80090f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f6:	bf00      	nop
 80090f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090fa:	bc08      	pop	{r3}
 80090fc:	469e      	mov	lr, r3
 80090fe:	4770      	bx	lr
